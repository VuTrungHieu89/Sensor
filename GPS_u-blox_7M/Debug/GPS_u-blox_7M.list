
GPS_u-blox_7M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080085c8  080085c8  000185c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c90  08008c90  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008c90  08008c90  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c90  08008c90  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e0  08008e78  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08008e78  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009455  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c29  00000000  00000000  0002965e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca23  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6b3  00000000  00000000  00048c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9714  00000000  00000000  00057326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120a3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003720  00000000  00000000  00120a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080085b0 	.word	0x080085b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080085b0 	.word	0x080085b0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2iz>:
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff0:	d30f      	bcc.n	8001012 <__aeabi_f2iz+0x2a>
 8000ff2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffa:	d90d      	bls.n	8001018 <__aeabi_f2iz+0x30>
 8000ffc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001004:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001008:	fa23 f002 	lsr.w	r0, r3, r2
 800100c:	bf18      	it	ne
 800100e:	4240      	negne	r0, r0
 8001010:	4770      	bx	lr
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	4770      	bx	lr
 8001018:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800101c:	d101      	bne.n	8001022 <__aeabi_f2iz+0x3a>
 800101e:	0242      	lsls	r2, r0, #9
 8001020:	d105      	bne.n	800102e <__aeabi_f2iz+0x46>
 8001022:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001026:	bf08      	it	eq
 8001028:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr

08001034 <__aeabi_f2uiz>:
 8001034:	0042      	lsls	r2, r0, #1
 8001036:	d20e      	bcs.n	8001056 <__aeabi_f2uiz+0x22>
 8001038:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800103c:	d30b      	bcc.n	8001056 <__aeabi_f2uiz+0x22>
 800103e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001042:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001046:	d409      	bmi.n	800105c <__aeabi_f2uiz+0x28>
 8001048:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800104c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	4770      	bx	lr
 8001056:	f04f 0000 	mov.w	r0, #0
 800105a:	4770      	bx	lr
 800105c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001060:	d101      	bne.n	8001066 <__aeabi_f2uiz+0x32>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	d102      	bne.n	800106c <__aeabi_f2uiz+0x38>
 8001066:	f04f 30ff 	mov.w	r0, #4294967295
 800106a:	4770      	bx	lr
 800106c:	f04f 0000 	mov.w	r0, #0
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_d2lz>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4605      	mov	r5, r0
 8001078:	460c      	mov	r4, r1
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	4628      	mov	r0, r5
 8001080:	4621      	mov	r1, r4
 8001082:	f7ff fca5 	bl	80009d0 <__aeabi_dcmplt>
 8001086:	b928      	cbnz	r0, 8001094 <__aeabi_d2lz+0x20>
 8001088:	4628      	mov	r0, r5
 800108a:	4621      	mov	r1, r4
 800108c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001090:	f000 b82a 	b.w	80010e8 <__aeabi_d2ulz>
 8001094:	4628      	mov	r0, r5
 8001096:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800109a:	f000 f825 	bl	80010e8 <__aeabi_d2ulz>
 800109e:	4240      	negs	r0, r0
 80010a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
 80010a6:	bf00      	nop

080010a8 <__aeabi_f2ulz>:
 80010a8:	b5d0      	push	{r4, r6, r7, lr}
 80010aa:	f7ff f9c7 	bl	800043c <__aeabi_f2d>
 80010ae:	2200      	movs	r2, #0
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <__aeabi_f2ulz+0x38>)
 80010b2:	4606      	mov	r6, r0
 80010b4:	460f      	mov	r7, r1
 80010b6:	f7ff fa19 	bl	80004ec <__aeabi_dmul>
 80010ba:	f7ff fcc7 	bl	8000a4c <__aeabi_d2uiz>
 80010be:	4604      	mov	r4, r0
 80010c0:	f7ff f99a 	bl	80003f8 <__aeabi_ui2d>
 80010c4:	2200      	movs	r2, #0
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <__aeabi_f2ulz+0x3c>)
 80010c8:	f7ff fa10 	bl	80004ec <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4630      	mov	r0, r6
 80010d2:	4639      	mov	r1, r7
 80010d4:	f7ff f852 	bl	800017c <__aeabi_dsub>
 80010d8:	f7ff fcb8 	bl	8000a4c <__aeabi_d2uiz>
 80010dc:	4621      	mov	r1, r4
 80010de:	bdd0      	pop	{r4, r6, r7, pc}
 80010e0:	3df00000 	.word	0x3df00000
 80010e4:	41f00000 	.word	0x41f00000

080010e8 <__aeabi_d2ulz>:
 80010e8:	b5d0      	push	{r4, r6, r7, lr}
 80010ea:	2200      	movs	r2, #0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <__aeabi_d2ulz+0x34>)
 80010ee:	4606      	mov	r6, r0
 80010f0:	460f      	mov	r7, r1
 80010f2:	f7ff f9fb 	bl	80004ec <__aeabi_dmul>
 80010f6:	f7ff fca9 	bl	8000a4c <__aeabi_d2uiz>
 80010fa:	4604      	mov	r4, r0
 80010fc:	f7ff f97c 	bl	80003f8 <__aeabi_ui2d>
 8001100:	2200      	movs	r2, #0
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <__aeabi_d2ulz+0x38>)
 8001104:	f7ff f9f2 	bl	80004ec <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4630      	mov	r0, r6
 800110e:	4639      	mov	r1, r7
 8001110:	f7ff f834 	bl	800017c <__aeabi_dsub>
 8001114:	f7ff fc9a 	bl	8000a4c <__aeabi_d2uiz>
 8001118:	4621      	mov	r1, r4
 800111a:	bdd0      	pop	{r4, r6, r7, pc}
 800111c:	3df00000 	.word	0x3df00000
 8001120:	41f00000 	.word	0x41f00000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_GPIO_Init+0x28>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <MX_GPIO_Init+0x28>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <MX_GPIO_Init+0x28>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fa14 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f803 	bl	8001162 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  GPS_Init();
 800115c:	f002 ffb4 	bl	80040c8 <GPS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x10>

08001162 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b090      	sub	sp, #64	; 0x40
 8001166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	2228      	movs	r2, #40	; 0x28
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fb0b 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fd97 	bl	8001ccc <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011a4:	f000 f818 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 f805 	bl	80021d0 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011cc:	f000 f804 	bl	80011d8 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3740      	adds	r7, #64	; 0x40
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_MspInit+0x5c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_MspInit+0x5c>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x5c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x5c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x60>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_MspInit+0x60>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f9bd 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x10>)
 800129e:	f001 fa1d 	bl	80026dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000200 	.word	0x20000200

080012ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_kill>:

int _kill(int pid, int sig)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c4:	f003 fa2a 	bl	800471c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2216      	movs	r2, #22
 80012cc:	601a      	str	r2, [r3, #0]
  return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_exit>:

void _exit (int status)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e2:	f04f 31ff 	mov.w	r1, #4294967295
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffe7 	bl	80012ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ec:	e7fe      	b.n	80012ec <_exit+0x12>

080012ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001300:	f3af 8000 	nop.w
 8001304:	4601      	mov	r1, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf0      	blt.n	8001300 <_read+0x12>
  }

  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e009      	b.n	800134e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf1      	blt.n	800133a <_write+0x12>
  }
  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_close>:

int _close(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f003 f994 	bl	800471c <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20005000 	.word	0x20005000
 8001420:	00000400 	.word	0x00000400
 8001424:	200001fc 	.word	0x200001fc
 8001428:	200003e8 	.word	0x200003e8

0800142c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART1_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001470:	f001 f83c 	bl	80024ec <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f7ff fead 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000200 	.word	0x20000200
 8001488:	40013800 	.word	0x40013800

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_UART_MspInit+0x9c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d139      	bne.n	8001520 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xa4>)
 80014f2:	f000 fa67 	bl	80019c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0xa4>)
 800150c:	f000 fa5a 	bl	80019c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2025      	movs	r0, #37	; 0x25
 8001516:	f000 f96c 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151a:	2025      	movs	r0, #37	; 0x25
 800151c:	f000 f985 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	40010800 	.word	0x40010800

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff ff7a 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f003 f8e3 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff fdf5 	bl	8001150 <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001570:	08008c98 	.word	0x08008c98
  ldr r2, =_sbss
 8001574:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001578:	200003e8 	.word	0x200003e8

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f923 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fe22 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f93b 	bl	8001846 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f903 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000000 	.word	0x20000000
 8001604:	20000008 	.word	0x20000008
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000008 	.word	0x20000008
 800162c:	20000248 	.word	0x20000248

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000248 	.word	0x20000248

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <__NVIC_EnableIRQ+0x34>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff90 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff2d 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff42 	bl	800168c <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff35 	bl	80016a8 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d008      	beq.n	8001888 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2204      	movs	r2, #4
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e020      	b.n	80018ca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 020e 	bic.w	r2, r2, #14
 8001896:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d005      	beq.n	80018f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2204      	movs	r2, #4
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e051      	b.n	800199c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020e 	bic.w	r2, r2, #14
 8001906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_DMA_Abort_IT+0xd4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d029      	beq.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <HAL_DMA_Abort_IT+0xd8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d022      	beq.n	8001972 <HAL_DMA_Abort_IT+0x9e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_DMA_Abort_IT+0xdc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01a      	beq.n	800196c <HAL_DMA_Abort_IT+0x98>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_DMA_Abort_IT+0xe0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d012      	beq.n	8001966 <HAL_DMA_Abort_IT+0x92>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_DMA_Abort_IT+0xe4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00a      	beq.n	8001960 <HAL_DMA_Abort_IT+0x8c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_DMA_Abort_IT+0xe8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <HAL_DMA_Abort_IT+0x86>
 8001954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001958:	e00e      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 800195a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800195e:	e00b      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	e008      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	e005      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 800196c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001970:	e002      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 8001972:	2310      	movs	r3, #16
 8001974:	e000      	b.n	8001978 <HAL_DMA_Abort_IT+0xa4>
 8001976:	2301      	movs	r3, #1
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_DMA_Abort_IT+0xec>)
 800197a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    } 
  }
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020008 	.word	0x40020008
 80019ac:	4002001c 	.word	0x4002001c
 80019b0:	40020030 	.word	0x40020030
 80019b4:	40020044 	.word	0x40020044
 80019b8:	40020058 	.word	0x40020058
 80019bc:	4002006c 	.word	0x4002006c
 80019c0:	40020000 	.word	0x40020000

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b08b      	sub	sp, #44	; 0x2c
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e169      	b.n	8001cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d8:	2201      	movs	r2, #1
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8158 	bne.w	8001ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a9a      	ldr	r2, [pc, #616]	; (8001c64 <HAL_GPIO_Init+0x2a0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d05e      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a00:	4a98      	ldr	r2, [pc, #608]	; (8001c64 <HAL_GPIO_Init+0x2a0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d875      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a06:	4a98      	ldr	r2, [pc, #608]	; (8001c68 <HAL_GPIO_Init+0x2a4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d058      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a0c:	4a96      	ldr	r2, [pc, #600]	; (8001c68 <HAL_GPIO_Init+0x2a4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d86f      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a12:	4a96      	ldr	r2, [pc, #600]	; (8001c6c <HAL_GPIO_Init+0x2a8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d052      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a18:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_GPIO_Init+0x2a8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d869      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a1e:	4a94      	ldr	r2, [pc, #592]	; (8001c70 <HAL_GPIO_Init+0x2ac>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04c      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a24:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_GPIO_Init+0x2ac>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d863      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a2a:	4a92      	ldr	r2, [pc, #584]	; (8001c74 <HAL_GPIO_Init+0x2b0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d046      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a30:	4a90      	ldr	r2, [pc, #576]	; (8001c74 <HAL_GPIO_Init+0x2b0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d85d      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d82a      	bhi.n	8001a90 <HAL_GPIO_Init+0xcc>
 8001a3a:	2b12      	cmp	r3, #18
 8001a3c:	d859      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <HAL_GPIO_Init+0x80>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001a99 	.word	0x08001a99
 8001a4c:	08001aab 	.word	0x08001aab
 8001a50:	08001aed 	.word	0x08001aed
 8001a54:	08001af3 	.word	0x08001af3
 8001a58:	08001af3 	.word	0x08001af3
 8001a5c:	08001af3 	.word	0x08001af3
 8001a60:	08001af3 	.word	0x08001af3
 8001a64:	08001af3 	.word	0x08001af3
 8001a68:	08001af3 	.word	0x08001af3
 8001a6c:	08001af3 	.word	0x08001af3
 8001a70:	08001af3 	.word	0x08001af3
 8001a74:	08001af3 	.word	0x08001af3
 8001a78:	08001af3 	.word	0x08001af3
 8001a7c:	08001af3 	.word	0x08001af3
 8001a80:	08001af3 	.word	0x08001af3
 8001a84:	08001af3 	.word	0x08001af3
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001ab5 	.word	0x08001ab5
 8001a90:	4a79      	ldr	r2, [pc, #484]	; (8001c78 <HAL_GPIO_Init+0x2b4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a96:	e02c      	b.n	8001af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e029      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e024      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	3308      	adds	r3, #8
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e01f      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	330c      	adds	r3, #12
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e01a      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e013      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	611a      	str	r2, [r3, #16]
          break;
 8001ade:	e009      	b.n	8001af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	615a      	str	r2, [r3, #20]
          break;
 8001aea:	e003      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          break;
 8001af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d801      	bhi.n	8001afe <HAL_GPIO_Init+0x13a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	e001      	b.n	8001b02 <HAL_GPIO_Init+0x13e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3304      	adds	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d802      	bhi.n	8001b10 <HAL_GPIO_Init+0x14c>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x152>
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	3b08      	subs	r3, #8
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	6a39      	ldr	r1, [r7, #32]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80b1 	beq.w	8001ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_GPIO_Init+0x2b8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_GPIO_Init+0x2b8>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_GPIO_Init+0x2b8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b5c:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_GPIO_Init+0x2bc>)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <HAL_GPIO_Init+0x2c0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_GPIO_Init+0x1ec>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3f      	ldr	r2, [pc, #252]	; (8001c88 <HAL_GPIO_Init+0x2c4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_GPIO_Init+0x1e8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3e      	ldr	r2, [pc, #248]	; (8001c8c <HAL_GPIO_Init+0x2c8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3d      	ldr	r2, [pc, #244]	; (8001c90 <HAL_GPIO_Init+0x2cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_GPIO_Init+0x1e0>
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e004      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_GPIO_Init+0x1ee>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc2:	492f      	ldr	r1, [pc, #188]	; (8001c80 <HAL_GPIO_Init+0x2bc>)
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	492c      	ldr	r1, [pc, #176]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4928      	ldr	r1, [pc, #160]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	4922      	ldr	r1, [pc, #136]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	491e      	ldr	r1, [pc, #120]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4918      	ldr	r1, [pc, #96]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4914      	ldr	r1, [pc, #80]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d021      	beq.n	8001c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e021      	b.n	8001ca6 <HAL_GPIO_Init+0x2e2>
 8001c62:	bf00      	nop
 8001c64:	10320000 	.word	0x10320000
 8001c68:	10310000 	.word	0x10310000
 8001c6c:	10220000 	.word	0x10220000
 8001c70:	10210000 	.word	0x10210000
 8001c74:	10120000 	.word	0x10120000
 8001c78:	10110000 	.word	0x10110000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	40010c00 	.word	0x40010c00
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40011400 	.word	0x40011400
 8001c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <HAL_GPIO_Init+0x304>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	3301      	adds	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f47f ae8e 	bne.w	80019d8 <HAL_GPIO_Init+0x14>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e272      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cec:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d00c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf8:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d112      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x12c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d168      	bne.n	8001df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e24c      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x76>
 8001d34:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a7f      	ldr	r2, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x98>
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b78      	ldr	r3, [pc, #480]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a77      	ldr	r2, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xbc>
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a71      	ldr	r2, [pc, #452]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d88:	4b6b      	ldr	r3, [pc, #428]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a67      	ldr	r2, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc42 	bl	8001630 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fc3e 	bl	8001630 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e200      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe4>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fc2e 	bl	8001630 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fc2a 	bl	8001630 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1ec      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x10c>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c0      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4939      	ldr	r1, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fbe3 	bl	8001630 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fbdf 	bl	8001630 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1a1      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fbc2 	bl	8001630 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fbbe 	bl	8001630 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e180      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fba2 	bl	8001630 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fb9e 	bl	8001630 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e160      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 face 	bl	80024b0 <RCC_Delay>
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fb88 	bl	8001630 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f22:	e00f      	b.n	8001f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fb84 	bl	8001630 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e146      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	42420000 	.word	0x42420000
 8001f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b92      	ldr	r3, [pc, #584]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e9      	bne.n	8001f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a6 	beq.w	80020aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b8b      	ldr	r3, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b88      	ldr	r3, [pc, #544]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a87      	ldr	r2, [pc, #540]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b85      	ldr	r3, [pc, #532]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fb45 	bl	8001630 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff fb41 	bl	8001630 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e103      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x312>
 8001fd0:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x334>
 8001fe6:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x356>
 8002008:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff faf5 	bl	8001630 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff faf1 	bl	8001630 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0b1      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x37e>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff fadf 	bl	8001630 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fadb 	bl	8001630 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e09b      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d061      	beq.n	8002184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d146      	bne.n	8002156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff faaf 	bl	8001630 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff faab 	bl	8001630 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e06d      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4921      	ldr	r1, [pc, #132]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a19      	ldr	r1, [r3, #32]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	430b      	orrs	r3, r1
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fa7f 	bl	8001630 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fa7b 	bl	8001630 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e03d      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x46a>
 8002154:	e035      	b.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fa68 	bl	8001630 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff fa64 	bl	8001630 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e026      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x498>
 8002182:	e01e      	b.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e019      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
 8002190:	40021000 	.word	0x40021000
 8002194:	40007000 	.word	0x40007000
 8002198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x500>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d0      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4965      	ldr	r1, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800224e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d040      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e073      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4936      	ldr	r1, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7ff f9b6 	bl	8001630 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff f9b2 	bl	8001630 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e053      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d210      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1cc>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f914 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
 8002398:	08008710 	.word	0x08008710
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_GetSysClockFreq+0x94>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x30>
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x36>
 80023d2:	e027      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_GetSysClockFreq+0x98>)
 80023d6:	613b      	str	r3, [r7, #16]
      break;
 80023d8:	e027      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_GetSysClockFreq+0x94>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0c5b      	lsrs	r3, r3, #17
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_RCC_GetSysClockFreq+0x98>)
 8002406:	fb03 f202 	mul.w	r2, r3, r2
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e004      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	613b      	str	r3, [r7, #16]
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetSysClockFreq+0x98>)
 8002426:	613b      	str	r3, [r7, #16]
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	693b      	ldr	r3, [r7, #16]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	08008728 	.word	0x08008728
 8002444:	08008738 	.word	0x08008738
 8002448:	003d0900 	.word	0x003d0900

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <HAL_RCC_GetHCLKFreq+0x10>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000000 	.word	0x20000000

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002464:	f7ff fff2 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	08008720 	.word	0x08008720

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800248c:	f7ff ffde 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08008720 	.word	0x08008720

080024b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCC_Delay+0x34>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <RCC_Delay+0x38>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0a5b      	lsrs	r3, r3, #9
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024cc:	bf00      	nop
  }
  while (Delay --);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	60fa      	str	r2, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <RCC_Delay+0x1c>
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000000 	.word	0x20000000
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e042      	b.n	8002584 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe ffba 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fdc5 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d16d      	bne.n	8002688 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_UART_Transmit+0x2c>
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e066      	b.n	800268a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2221      	movs	r2, #33	; 0x21
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ca:	f7ff f831 	bl	8001630 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	88fa      	ldrh	r2, [r7, #6]
 80025d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e4:	d108      	bne.n	80025f8 <HAL_UART_Transmit+0x6c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	e003      	b.n	8002600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002600:	e02a      	b.n	8002658 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb14 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e036      	b.n	800268a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	3302      	adds	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	e007      	b.n	800264a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1cf      	bne.n	8002602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fae4 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e006      	b.n	800268a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	e000      	b.n	800268a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d112      	bne.n	80026d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_UART_Receive_IT+0x26>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00b      	b.n	80026d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fb24 	bl	8002d16 <UART_Start_Receive_IT>
 80026ce:	4603      	mov	r3, r0
 80026d0:	e000      	b.n	80026d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0ba      	sub	sp, #232	; 0xe8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800271a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_UART_IRQHandler+0x66>
 800272e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fc01 	bl	8002f42 <UART_Receive_IT>
      return;
 8002740:	e25b      	b.n	8002bfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80de 	beq.w	8002908 <HAL_UART_IRQHandler+0x22c>
 800274c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80d1 	beq.w	8002908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_UART_IRQHandler+0xae>
 8002772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_UART_IRQHandler+0xd2>
 8002796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HAL_UART_IRQHandler+0xf6>
 80027ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d011      	beq.n	8002802 <HAL_UART_IRQHandler+0x126>
 80027de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f043 0208 	orr.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 81f2 	beq.w	8002bf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800280c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_UART_IRQHandler+0x14e>
 8002818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fb8c 	bl	8002f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_UART_IRQHandler+0x17a>
 800284e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d04f      	beq.n	80028f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa96 	bl	8002d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d041      	beq.n	80028ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1d9      	bne.n	800286a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d013      	beq.n	80028e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_UART_IRQHandler+0x3e0>)
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f802 	bl	80018d4 <HAL_DMA_Abort_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e00e      	b.n	8002904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f993 	bl	8002c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	e00a      	b.n	8002904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f98f 	bl	8002c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	e006      	b.n	8002904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f98b 	bl	8002c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002902:	e175      	b.n	8002bf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	bf00      	nop
    return;
 8002906:	e173      	b.n	8002bf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	2b01      	cmp	r3, #1
 800290e:	f040 814f 	bne.w	8002bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8148 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8141 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80b6 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8145 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800296e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002972:	429a      	cmp	r2, r3
 8002974:	f080 813e 	bcs.w	8002bf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800297e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b20      	cmp	r3, #32
 8002988:	f000 8088 	beq.w	8002a9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1d9      	bne.n	800298c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e1      	bne.n	80029d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e3      	bne.n	8002a14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	f023 0310 	bic.w	r3, r3, #16
 8002a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e3      	bne.n	8002a5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fee1 	bl	800185e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b6 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab8:	e09c      	b.n	8002bf4 <HAL_UART_IRQHandler+0x518>
 8002aba:	bf00      	nop
 8002abc:	08002e4d 	.word	0x08002e4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808e 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8089 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b42:	633a      	str	r2, [r7, #48]	; 0x30
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	617b      	str	r3, [r7, #20]
   return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e3      	bne.n	8002b64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f83b 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bae:	e023      	b.n	8002bf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x4f4>
 8002bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f953 	bl	8002e74 <UART_Transmit_IT>
    return;
 8002bce:	e014      	b.n	8002bfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <HAL_UART_IRQHandler+0x51e>
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f992 	bl	8002f12 <UART_EndTransmit_IT>
    return;
 8002bee:	e004      	b.n	8002bfa <HAL_UART_IRQHandler+0x51e>
    return;
 8002bf0:	bf00      	nop
 8002bf2:	e002      	b.n	8002bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8002bf8:	bf00      	nop
  }
}
 8002bfa:	37e8      	adds	r7, #232	; 0xe8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b090      	sub	sp, #64	; 0x40
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4a:	e050      	b.n	8002cee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d04c      	beq.n	8002cee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	f7fe fce9 	bl	8001630 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d241      	bcs.n	8002cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	613b      	str	r3, [r7, #16]
   return(result);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cbe:	623a      	str	r2, [r7, #32]
 8002cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e5      	bne.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e00f      	b.n	8002d0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d09f      	beq.n	8002c4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3740      	adds	r7, #64	; 0x40
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2222      	movs	r2, #34	; 0x22
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0220 	orr.w	r2, r2, #32
 8002d7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b095      	sub	sp, #84	; 0x54
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db0:	643a      	str	r2, [r7, #64]	; 0x40
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e5      	bne.n	8002d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3314      	adds	r3, #20
 8002de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e20:	61ba      	str	r2, [r7, #24]
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e42:	bf00      	nop
 8002e44:	3754      	adds	r7, #84	; 0x54
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fed3 	bl	8002c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b21      	cmp	r3, #33	; 0x21
 8002e86:	d13e      	bne.n	8002f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d114      	bne.n	8002ebc <UART_Transmit_IT+0x48>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d110      	bne.n	8002ebc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]
 8002eba:	e008      	b.n	8002ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6211      	str	r1, [r2, #32]
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fe64 	bl	8002c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08c      	sub	sp, #48	; 0x30
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b22      	cmp	r3, #34	; 0x22
 8002f54:	f040 80ae 	bne.w	80030b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d117      	bne.n	8002f92 <UART_Receive_IT+0x50>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d113      	bne.n	8002f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e026      	b.n	8002fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d007      	beq.n	8002fb6 <UART_Receive_IT+0x74>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <UART_Receive_IT+0x82>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e008      	b.n	8002fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d15d      	bne.n	80030b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0220 	bic.w	r2, r2, #32
 8003002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	2b01      	cmp	r3, #1
 8003038:	d135      	bne.n	80030a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	613b      	str	r3, [r7, #16]
   return(result);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f023 0310 	bic.w	r3, r3, #16
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	623a      	str	r2, [r7, #32]
 8003062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	69f9      	ldr	r1, [r7, #28]
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	61bb      	str	r3, [r7, #24]
   return(result);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d10a      	bne.n	8003098 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fdc0 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
 80030a4:	e002      	b.n	80030ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f001 f86e 	bl	8004188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3730      	adds	r7, #48	; 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030fa:	f023 030c 	bic.w	r3, r3, #12
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	430b      	orrs	r3, r1
 8003106:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <UART_SetConfig+0x114>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7ff f9ae 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	e002      	b.n	8003136 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7ff f996 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009a      	lsls	r2, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <UART_SetConfig+0x118>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	0119      	lsls	r1, r3, #4
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fbb2 f2f3 	udiv	r2, r2, r3
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <UART_SetConfig+0x118>)
 800316e:	fba3 0302 	umull	r0, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	fb00 f303 	mul.w	r3, r0, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	3332      	adds	r3, #50	; 0x32
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	4419      	add	r1, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <UART_SetConfig+0x118>)
 80031a6:	fba3 0302 	umull	r0, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2064      	movs	r0, #100	; 0x64
 80031ae:	fb00 f303 	mul.w	r3, r0, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <UART_SetConfig+0x118>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	440a      	add	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40013800 	.word	0x40013800
 80031d8:	51eb851f 	.word	0x51eb851f

080031dc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	4053      	eors	r3, r2
 80031f2:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	b25a      	sxtb	r2, r3
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4053      	eors	r3, r2
 8003200:	b25b      	sxtb	r3, r3
 8003202:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	b29b      	uxth	r3, r3
 800320c:	b21a      	sxth	r2, r3
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21b      	sxth	r3, r3
 8003214:	4053      	eors	r3, r2
 8003216:	b21a      	sxth	r2, r3
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	b21b      	sxth	r3, r3
 800321e:	4053      	eors	r3, r2
 8003220:	b21a      	sxth	r2, r3
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	b2db      	uxtb	r3, r3
 8003228:	b21b      	sxth	r3, r3
 800322a:	4053      	eors	r3, r2
 800322c:	b21b      	sxth	r3, r3
 800322e:	b29a      	uxth	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	801a      	strh	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <crc_init>:
 * @brief Initiliaze the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324c:	801a      	strh	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8003264:	f107 030e 	add.w	r3, r7, #14
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ffe8 	bl	800323e <crc_init>
	while (length--) {
 800326e:	e009      	b.n	8003284 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f107 020e 	add.w	r2, r7, #14
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ffac 	bl	80031dc <crc_accumulate>
	while (length--) {
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	1e5a      	subs	r2, r3, #1
 8003288:	807a      	strh	r2, [r7, #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <crc_calculate+0x18>
        }
        return crcTmp;
 800328e:	89fb      	ldrh	r3, [r7, #14]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	617b      	str	r3, [r7, #20]
	while (length--) {
 80032aa:	e007      	b.n	80032bc <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	617a      	str	r2, [r7, #20]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff90 	bl	80031dc <crc_accumulate>
	while (length--) {
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	80fa      	strh	r2, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f2      	bne.n	80032ac <crc_accumulate_buffer+0x14>
        }
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <mavlink_sha256_init+0x50>)
 80032e8:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <mavlink_sha256_init+0x54>)
 80032ee:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <mavlink_sha256_init+0x58>)
 80032f4:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a0c      	ldr	r2, [pc, #48]	; (800332c <mavlink_sha256_init+0x5c>)
 80032fa:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <mavlink_sha256_init+0x60>)
 8003300:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <mavlink_sha256_init+0x64>)
 8003306:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <mavlink_sha256_init+0x68>)
 800330c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <mavlink_sha256_init+0x6c>)
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	6a09e667 	.word	0x6a09e667
 8003324:	bb67ae85 	.word	0xbb67ae85
 8003328:	3c6ef372 	.word	0x3c6ef372
 800332c:	a54ff53a 	.word	0xa54ff53a
 8003330:	510e527f 	.word	0x510e527f
 8003334:	9b05688c 	.word	0x9b05688c
 8003338:	1f83d9ab 	.word	0x1f83d9ab
 800333c:	5be0cd19 	.word	0x5be0cd19

08003340 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8003340:	b480      	push	{r7}
 8003342:	b0cf      	sub	sp, #316	; 0x13c
 8003344:	af00      	add	r7, sp, #0
 8003346:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800334a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800334e:	6018      	str	r0, [r3, #0]
 8003350:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003354:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003358:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800335a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800335e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800336a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800336e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800337a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800337e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800338a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800338e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800339a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800339e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80033aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80033ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80033ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80033e0:	e016      	b.n	8003410 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80033ec:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340a:	3301      	adds	r3, #1
 800340c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003414:	2b0f      	cmp	r3, #15
 8003416:	dde4      	ble.n	80033e2 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8003418:	2310      	movs	r3, #16
 800341a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800341e:	e069      	b.n	80034f4 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003424:	1e9a      	subs	r2, r3, #2
 8003426:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800342a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	ea4f 4273 	mov.w	r2, r3, ror #17
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343a:	1e99      	subs	r1, r3, #2
 800343c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003448:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800344c:	405a      	eors	r2, r3
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	1e99      	subs	r1, r3, #2
 8003454:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800345c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003460:	0a9b      	lsrs	r3, r3, #10
 8003462:	405a      	eors	r2, r3
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	1fd9      	subs	r1, r3, #7
 800346a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800346e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003476:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347c:	f1a3 010f 	sub.w	r1, r3, #15
 8003480:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003488:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800348c:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	f1a3 000f 	sub.w	r0, r3, #15
 8003498:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800349c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80034a4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80034a8:	4059      	eors	r1, r3
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ae:	f1a3 000f 	sub.w	r0, r3, #15
 80034b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80034b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80034c2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c8:	f1a3 0110 	sub.w	r1, r3, #16
 80034cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80034d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034d8:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80034da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80034de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ee:	3301      	adds	r3, #1
 80034f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	2b3f      	cmp	r3, #63	; 0x3f
 80034fa:	dd91      	ble.n	8003420 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003502:	e078      	b.n	80035f6 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003504:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003508:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800350c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003510:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003514:	405a      	eors	r2, r3
 8003516:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800351a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800351e:	405a      	eors	r2, r3
 8003520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003524:	441a      	add	r2, r3
 8003526:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800352a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800352e:	4019      	ands	r1, r3
 8003530:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003534:	43d8      	mvns	r0, r3
 8003536:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800353a:	4003      	ands	r3, r0
 800353c:	404b      	eors	r3, r1
 800353e:	441a      	add	r2, r3
 8003540:	496e      	ldr	r1, [pc, #440]	; (80036fc <mavlink_sha256_calc+0x3bc>)
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003546:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800354a:	441a      	add	r2, r3
 800354c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003554:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800355c:	4413      	add	r3, r2
 800355e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003566:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800356a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800356e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003572:	405a      	eors	r2, r3
 8003574:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003578:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800357c:	405a      	eors	r2, r3
 800357e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8003582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003586:	4059      	eors	r1, r3
 8003588:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800358c:	4019      	ands	r1, r3
 800358e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8003592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003596:	4003      	ands	r3, r0
 8003598:	404b      	eors	r3, r1
 800359a:	4413      	add	r3, r2
 800359c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80035a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80035a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80035b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80035b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80035b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80035bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035c0:	4413      	add	r3, r2
 80035c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80035c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80035ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80035d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80035de:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80035e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e6:	4413      	add	r3, r2
 80035e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	3301      	adds	r3, #1
 80035f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	2b3f      	cmp	r3, #63	; 0x3f
 80035fc:	dd82      	ble.n	8003504 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 80035fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003602:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800360e:	441a      	add	r2, r3
 8003610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003614:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 800361c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003620:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800362c:	441a      	add	r2, r3
 800362e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003632:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800363a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800363e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800364a:	441a      	add	r2, r3
 800364c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003650:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8003658:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800365c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003668:	441a      	add	r2, r3
 800366a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800366e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8003676:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800367a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003686:	441a      	add	r2, r3
 8003688:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800368c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8003694:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003698:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036a4:	441a      	add	r2, r3
 80036a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 80036b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c2:	441a      	add	r2, r3
 80036c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 80036d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036e0:	441a      	add	r2, r3
 80036e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036ee:	bf00      	nop
 80036f0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	0800873c 	.word	0x0800873c

08003700 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b09c      	sub	sp, #112	; 0x70
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800372a:	429a      	cmp	r2, r3
 800372c:	d904      	bls.n	8003738 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8003738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8003742:	e054      	b.n	80037ee <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8003744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003746:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003750:	429a      	cmp	r2, r3
 8003752:	d201      	bcs.n	8003758 <mavlink_sha256_update+0x58>
            l = len;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800375e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003760:	4413      	add	r3, r2
 8003762:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003764:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f802 	bl	8004770 <memcpy>
	offset += l;
 800376c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800376e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003770:	4413      	add	r3, r2
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8003774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003778:	4413      	add	r3, r2
 800377a:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8003784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d131      	bne.n	80037ee <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3328      	adds	r3, #40	; 0x28
 800378e:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8003790:	2300      	movs	r3, #0
 8003792:	663b      	str	r3, [r7, #96]	; 0x60
 8003794:	e020      	b.n	80037d8 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8003796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379c:	4413      	add	r3, r2
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80037a0:	f107 0210 	add.w	r2, r7, #16
 80037a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80037ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ae:	78da      	ldrb	r2, [r3, #3]
 80037b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b2:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80037b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b6:	3301      	adds	r3, #1
 80037b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ba:	7892      	ldrb	r2, [r2, #2]
 80037bc:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	3302      	adds	r3, #2
 80037c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037c4:	7852      	ldrb	r2, [r2, #1]
 80037c6:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80037c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ca:	3303      	adds	r3, #3
 80037cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	3301      	adds	r3, #1
 80037d6:	663b      	str	r3, [r7, #96]	; 0x60
 80037d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	dddb      	ble.n	8003796 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	4619      	mov	r1, r3
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fdab 	bl	8003340 <mavlink_sha256_calc>
	    offset = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1a7      	bne.n	8003744 <mavlink_sha256_update+0x44>
	}
    }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3770      	adds	r7, #112	; 0x70
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b098      	sub	sp, #96	; 0x60
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8003814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003816:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 800381a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381e:	3301      	adds	r3, #1
 8003820:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3308      	adds	r3, #8
 8003826:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	3301      	adds	r3, #1
 8003832:	2247      	movs	r2, #71	; 0x47
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f000 ffa8 	bl	800478c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003842:	3307      	adds	r3, #7
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	3360      	adds	r3, #96	; 0x60
 8003848:	443b      	add	r3, r7
 800384a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0a1a      	lsrs	r2, r3, #8
 8003854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003856:	3306      	adds	r3, #6
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	3360      	adds	r3, #96	; 0x60
 800385c:	443b      	add	r3, r7
 800385e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0c1a      	lsrs	r2, r3, #16
 8003868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386a:	3305      	adds	r3, #5
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	3360      	adds	r3, #96	; 0x60
 8003870:	443b      	add	r3, r7
 8003872:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e1a      	lsrs	r2, r3, #24
 800387c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800387e:	3304      	adds	r3, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	3360      	adds	r3, #96	; 0x60
 8003884:	443b      	add	r3, r7
 8003886:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003890:	3303      	adds	r3, #3
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	3360      	adds	r3, #96	; 0x60
 8003896:	443b      	add	r3, r7
 8003898:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	0a1a      	lsrs	r2, r3, #8
 80038a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a4:	3302      	adds	r3, #2
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	3360      	adds	r3, #96	; 0x60
 80038aa:	443b      	add	r3, r7
 80038ac:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1a      	lsrs	r2, r3, #16
 80038b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b8:	3301      	adds	r3, #1
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	443b      	add	r3, r7
 80038c0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	b2d9      	uxtb	r1, r3
 80038cc:	f107 020c 	add.w	r2, r7, #12
 80038d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d2:	4413      	add	r3, r2
 80038d4:	460a      	mov	r2, r1
 80038d6:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80038d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038da:	f103 0208 	add.w	r2, r3, #8
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff0b 	bl	8003700 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	78da      	ldrb	r2, [r3, #3]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038f8:	7892      	ldrb	r2, [r2, #2]
 80038fa:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	3302      	adds	r3, #2
 8003900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003902:	7852      	ldrb	r2, [r2, #1]
 8003904:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	3303      	adds	r3, #3
 800390a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3304      	adds	r3, #4
 8003914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003916:	79d2      	ldrb	r2, [r2, #7]
 8003918:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	3305      	adds	r3, #5
 800391e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003920:	7992      	ldrb	r2, [r2, #6]
 8003922:	701a      	strb	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3760      	adds	r7, #96	; 0x60
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8003936:	79fa      	ldrb	r2, [r7, #7]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4a03      	ldr	r2, [pc, #12]	; (8003950 <mavlink_get_channel_status+0x24>)
 8003942:	4413      	add	r3, r2
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000378 	.word	0x20000378

08003954 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b0a0      	sub	sp, #128	; 0x80
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <mavlink_sign_packet+0x20>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <mavlink_sign_packet+0x24>
	    return 0;
 8003974:	2300      	movs	r3, #0
 8003976:	e04f      	b.n	8003a18 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	785a      	ldrb	r2, [r3, #1]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003986:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	f107 0110 	add.w	r1, r7, #16
 8003992:	2206      	movs	r2, #6
 8003994:	4618      	mov	r0, r3
 8003996:	f000 feeb 	bl	8004770 <memcpy>
	signing->timestamp++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039a0:	1c54      	adds	r4, r2, #1
 80039a2:	f143 0500 	adc.w	r5, r3, #0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fc8d 	bl	80032d0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f103 0110 	add.w	r1, r3, #16
 80039bc:	f107 0318 	add.w	r3, r7, #24
 80039c0:	2220      	movs	r2, #32
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fe9c 	bl	8003700 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	f107 0318 	add.w	r3, r7, #24
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fe95 	bl	8003700 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80039d6:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 80039da:	f107 0318 	add.w	r3, r7, #24
 80039de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fe8c 	bl	8003700 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80039e8:	f107 0318 	add.w	r3, r7, #24
 80039ec:	2202      	movs	r2, #2
 80039ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fe84 	bl	8003700 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80039f8:	f107 0318 	add.w	r3, r7, #24
 80039fc:	2207      	movs	r2, #7
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fe7d 	bl	8003700 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1dda      	adds	r2, r3, #7
 8003a0a:	f107 0318 	add.w	r3, r7, #24
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fef4 	bl	80037fe <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8003a16:	230d      	movs	r3, #13
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3780      	adds	r7, #128	; 0x80
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bdb0      	pop	{r4, r5, r7, pc}

08003a20 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003a2c:	e002      	b.n	8003a34 <_mav_trim_payload+0x14>
		length--;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d906      	bls.n	8003a48 <_mav_trim_payload+0x28>
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f2      	beq.n	8003a2e <_mav_trim_payload+0xe>
	}
	return length;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	b08f      	sub	sp, #60	; 0x3c
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	72fb      	strb	r3, [r7, #11]
 8003a62:	4613      	mov	r3, r2
 8003a64:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7b1b      	ldrb	r3, [r3, #12]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a7e:	f083 0301 	eor.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <mavlink_finalize_message_buffer+0x4e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <mavlink_finalize_message_buffer+0x4e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <mavlink_finalize_message_buffer+0x4e>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <mavlink_finalize_message_buffer+0x50>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003aa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8003ab4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <mavlink_finalize_message_buffer+0x6c>
 8003abc:	230d      	movs	r3, #13
 8003abe:	e000      	b.n	8003ac2 <mavlink_finalize_message_buffer+0x6e>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8003acc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22fe      	movs	r2, #254	; 0xfe
 8003ad8:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003ada:	2306      	movs	r3, #6
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ae0:	e002      	b.n	8003ae8 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22fd      	movs	r2, #253	; 0xfd
 8003ae6:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <mavlink_finalize_message_buffer+0xb2>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff90 	bl	8003a20 <_mav_trim_payload>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	e001      	b.n	8003b0a <mavlink_finalize_message_buffer+0xb6>
 8003b06:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	7afa      	ldrb	r2, [r7, #11]
 8003b12:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	7aba      	ldrb	r2, [r7, #10]
 8003b18:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8003b20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	791b      	ldrb	r3, [r3, #4]
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	799a      	ldrb	r2, [r3, #6]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	799b      	ldrb	r3, [r3, #6]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	78db      	ldrb	r3, [r3, #3]
 8003b5a:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8003b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	799b      	ldrb	r3, [r3, #6]
 8003b68:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	79db      	ldrb	r3, [r3, #7]
 8003b6e:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	7a1b      	ldrb	r3, [r3, #8]
 8003b74:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	7a5a      	ldrb	r2, [r3, #9]
 8003b7a:	7a99      	ldrb	r1, [r3, #10]
 8003b7c:	0209      	lsls	r1, r1, #8
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	7adb      	ldrb	r3, [r3, #11]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	777b      	strb	r3, [r7, #29]
 8003b8a:	e030      	b.n	8003bee <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	795b      	ldrb	r3, [r3, #5]
 8003b96:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	799b      	ldrb	r3, [r3, #6]
 8003b9c:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	79db      	ldrb	r3, [r3, #7]
 8003ba2:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	7a1b      	ldrb	r3, [r3, #8]
 8003ba8:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	7a5a      	ldrb	r2, [r3, #9]
 8003bae:	7a99      	ldrb	r1, [r3, #10]
 8003bb0:	0209      	lsls	r1, r1, #8
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	7adb      	ldrb	r3, [r3, #11]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	7a5a      	ldrb	r2, [r3, #9]
 8003bc2:	7a99      	ldrb	r1, [r3, #10]
 8003bc4:	0209      	lsls	r1, r1, #8
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	7adb      	ldrb	r3, [r3, #11]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	121b      	asrs	r3, r3, #8
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	7a5a      	ldrb	r2, [r3, #9]
 8003bda:	7a99      	ldrb	r1, [r3, #10]
 8003bdc:	0209      	lsls	r1, r1, #8
 8003bde:	430a      	orrs	r2, r1
 8003be0:	7adb      	ldrb	r3, [r3, #11]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	4313      	orrs	r3, r2
 8003be6:	141b      	asrs	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	f107 0318 	add.w	r3, r7, #24
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fb29 	bl	8003258 <crc_calculate>
 8003c06:	4603      	mov	r3, r0
 8003c08:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f103 010c 	add.w	r1, r3, #12
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	f107 0316 	add.w	r3, r7, #22
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fb3c 	bl	8003298 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8003c20:	f107 0216 	add.w	r2, r7, #22
 8003c24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fad6 	bl	80031dc <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003c30:	8af9      	ldrh	r1, [r7, #22]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	330c      	adds	r3, #12
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	78d2      	ldrb	r2, [r2, #3]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b2ca      	uxtb	r2, r1
 8003c3e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b299      	uxth	r1, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f103 020c 	add.w	r2, r3, #12
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	78db      	ldrb	r3, [r3, #3]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	b2ca      	uxtb	r2, r1
 8003c56:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8003c58:	8afa      	ldrh	r2, [r7, #22]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8003c5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01a      	beq.n	8003c9c <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8003c78:	68f9      	ldr	r1, [r7, #12]
 8003c7a:	310c      	adds	r1, #12
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8003c80:	4401      	add	r1, r0
 8003c82:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8003c86:	f107 0018 	add.w	r0, r7, #24
 8003c8a:	9102      	str	r1, [sp, #8]
 8003c8c:	9201      	str	r2, [sp, #4]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4633      	mov	r3, r6
 8003c92:	4602      	mov	r2, r0
 8003c94:	4629      	mov	r1, r5
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff fe5c 	bl	8003954 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	b29b      	uxth	r3, r3
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	372c      	adds	r7, #44	; 0x2c
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cc2 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b088      	sub	sp, #32
 8003cc6:	af04      	add	r7, sp, #16
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	4608      	mov	r0, r1
 8003ccc:	4611      	mov	r1, r2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	70fb      	strb	r3, [r7, #3]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70bb      	strb	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fe24 	bl	800392c <mavlink_get_channel_status>
 8003ce4:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003ce6:	78ba      	ldrb	r2, [r7, #2]
 8003ce8:	78f9      	ldrb	r1, [r7, #3]
 8003cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cee:	9302      	str	r3, [sp, #8]
 8003cf0:	7f3b      	ldrb	r3, [r7, #28]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	7e3b      	ldrb	r3, [r7, #24]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff feaa 	bl	8003a54 <mavlink_finalize_message_buffer>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af04      	add	r7, sp, #16
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	4608      	mov	r0, r1
 8003d14:	4611      	mov	r1, r2
 8003d16:	461a      	mov	r2, r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	70fb      	strb	r3, [r7, #3]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70bb      	strb	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8003d24:	78ba      	ldrb	r2, [r7, #2]
 8003d26:	78f9      	ldrb	r1, [r7, #3]
 8003d28:	7d3b      	ldrb	r3, [r7, #20]
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	7c3b      	ldrb	r3, [r7, #16]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ffc3 	bl	8003cc2 <mavlink_finalize_message_chan>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	789b      	ldrb	r3, [r3, #2]
 8003d5a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d5c:	d13a      	bne.n	8003dd4 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8003d62:	2305      	movs	r3, #5
 8003d64:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	789a      	ldrb	r2, [r3, #2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3301      	adds	r3, #1
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3302      	adds	r3, #2
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	7992      	ldrb	r2, [r2, #6]
 8003d7e:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3303      	adds	r3, #3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	79d2      	ldrb	r2, [r2, #7]
 8003d88:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	7a12      	ldrb	r2, [r2, #8]
 8003d92:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	7a5a      	ldrb	r2, [r3, #9]
 8003d98:	7a99      	ldrb	r1, [r3, #10]
 8003d9a:	0209      	lsls	r1, r1, #8
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	7adb      	ldrb	r3, [r3, #11]
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	4313      	orrs	r3, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3305      	adds	r3, #5
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	1d98      	adds	r0, r3, #6
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f103 010c 	add.w	r1, r3, #12
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	78db      	ldrb	r3, [r3, #3]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f000 fcd7 	bl	8004770 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003dc2:	7dbb      	ldrb	r3, [r7, #22]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	78d2      	ldrb	r2, [r2, #3]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3301      	adds	r3, #1
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	e06c      	b.n	8003eae <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fe1f 	bl	8003a20 <_mav_trim_payload>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003de6:	2309      	movs	r3, #9
 8003de8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	789a      	ldrb	r2, [r3, #2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3301      	adds	r3, #1
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	7912      	ldrb	r2, [r2, #4]
 8003e02:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3303      	adds	r3, #3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	7952      	ldrb	r2, [r2, #5]
 8003e0c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	7992      	ldrb	r2, [r2, #6]
 8003e16:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3305      	adds	r3, #5
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	79d2      	ldrb	r2, [r2, #7]
 8003e20:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3306      	adds	r3, #6
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	7a12      	ldrb	r2, [r2, #8]
 8003e2a:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	7a5a      	ldrb	r2, [r3, #9]
 8003e30:	7a99      	ldrb	r1, [r3, #10]
 8003e32:	0209      	lsls	r1, r1, #8
 8003e34:	430a      	orrs	r2, r1
 8003e36:	7adb      	ldrb	r3, [r3, #11]
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3307      	adds	r3, #7
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	7a5a      	ldrb	r2, [r3, #9]
 8003e4a:	7a99      	ldrb	r1, [r3, #10]
 8003e4c:	0209      	lsls	r1, r1, #8
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	7adb      	ldrb	r3, [r3, #11]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	4313      	orrs	r3, r2
 8003e56:	121a      	asrs	r2, r3, #8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	7a5a      	ldrb	r2, [r3, #9]
 8003e64:	7a99      	ldrb	r1, [r3, #10]
 8003e66:	0209      	lsls	r1, r1, #8
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	7adb      	ldrb	r3, [r3, #11]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	141a      	asrs	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3309      	adds	r3, #9
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f103 000a 	add.w	r0, r3, #10
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	4619      	mov	r1, r3
 8003e88:	f000 fc72 	bl	8004770 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003e8c:	7dba      	ldrb	r2, [r7, #22]
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	4413      	add	r3, r2
 8003e92:	3301      	adds	r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	791b      	ldrb	r3, [r3, #4]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <mavlink_msg_to_send_buffer+0x164>
 8003ea6:	230d      	movs	r3, #13
 8003ea8:	e000      	b.n	8003eac <mavlink_msg_to_send_buffer+0x166>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1c98      	adds	r0, r3, #2
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8003edc:	7dfa      	ldrb	r2, [r7, #23]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f000 fc46 	bl	8004770 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8003ee4:	7dbb      	ldrb	r3, [r7, #22]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3303      	adds	r3, #3
 8003efa:	b29b      	uxth	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <mavlink_msg_gps_raw_int_pack>:
 * @param yaw [cdeg] Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, int32_t alt_ellipsoid, uint32_t h_acc, uint32_t v_acc, uint32_t vel_acc, uint32_t hdg_acc, uint16_t yaw)
{
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f06:	b093      	sub	sp, #76	; 0x4c
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	603a      	str	r2, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
 8003f10:	460b      	mov	r3, r1
 8003f12:	71bb      	strb	r3, [r7, #6]
    _mav_put_uint16_t(buf, 50, yaw);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#else
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
 8003f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1a:	613b      	str	r3, [r7, #16]
    packet.lat = lat;
 8003f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1e:	617b      	str	r3, [r7, #20]
    packet.lon = lon;
 8003f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f22:	61bb      	str	r3, [r7, #24]
    packet.alt = alt;
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	61fb      	str	r3, [r7, #28]
    packet.eph = eph;
 8003f28:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003f2c:	843b      	strh	r3, [r7, #32]
    packet.epv = epv;
 8003f2e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003f32:	847b      	strh	r3, [r7, #34]	; 0x22
    packet.vel = vel;
 8003f34:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003f38:	84bb      	strh	r3, [r7, #36]	; 0x24
    packet.cog = cog;
 8003f3a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f3e:	84fb      	strh	r3, [r7, #38]	; 0x26
    packet.fix_type = fix_type;
 8003f40:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8003f44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    packet.satellites_visible = satellites_visible;
 8003f48:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8003f4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    packet.alt_ellipsoid = alt_ellipsoid;
 8003f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f54:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    packet.h_acc = h_acc;
 8003f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f5c:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    packet.v_acc = v_acc;
 8003f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f64:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
    packet.vel_acc = vel_acc;
 8003f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f6c:	f8c7 3036 	str.w	r3, [r7, #54]	; 0x36
    packet.hdg_acc = hdg_acc;
 8003f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f74:	f8c7 303a 	str.w	r3, [r7, #58]	; 0x3a
    packet.yaw = yaw;
 8003f78:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f7c:	87fb      	strh	r3, [r7, #62]	; 0x3e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	f107 040c 	add.w	r4, r7, #12
 8003f86:	469c      	mov	ip, r3
 8003f88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003f8c:	4665      	mov	r5, ip
 8003f8e:	4626      	mov	r6, r4
 8003f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f92:	6028      	str	r0, [r5, #0]
 8003f94:	6069      	str	r1, [r5, #4]
 8003f96:	60aa      	str	r2, [r5, #8]
 8003f98:	60eb      	str	r3, [r5, #12]
 8003f9a:	3410      	adds	r4, #16
 8003f9c:	f10c 0c10 	add.w	ip, ip, #16
 8003fa0:	4574      	cmp	r4, lr
 8003fa2:	d1f3      	bne.n	8003f8c <mavlink_msg_gps_raw_int_pack+0x88>
 8003fa4:	4663      	mov	r3, ip
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	6810      	ldr	r0, [r2, #0]
 8003faa:	6018      	str	r0, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f042 0218 	orr.w	r2, r2, #24
 8003fb4:	725a      	strb	r2, [r3, #9]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	729a      	strb	r2, [r3, #10]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_GPS_RAW_INT_MIN_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
 8003fbe:	79ba      	ldrb	r2, [r7, #6]
 8003fc0:	79f9      	ldrb	r1, [r7, #7]
 8003fc2:	2318      	movs	r3, #24
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2334      	movs	r3, #52	; 0x34
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	231e      	movs	r3, #30
 8003fcc:	6838      	ldr	r0, [r7, #0]
 8003fce:	f7ff fe9c 	bl	8003d0a <mavlink_finalize_message>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3744      	adds	r7, #68	; 0x44
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fdc <mavlink_msg_gps_raw_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param gps_raw_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b0a3      	sub	sp, #140	; 0x8c
 8003fe0:	af12      	add	r7, sp, #72	; 0x48
 8003fe2:	63ba      	str	r2, [r7, #56]	; 0x38
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003fec:	460b      	mov	r3, r1
 8003fee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible, gps_raw_int->alt_ellipsoid, gps_raw_int->h_acc, gps_raw_int->v_acc, gps_raw_int->vel_acc, gps_raw_int->hdg_acc, gps_raw_int->yaw);
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	7f1b      	ldrb	r3, [r3, #28]
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	62ba      	str	r2, [r7, #40]	; 0x28
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	691c      	ldr	r4, [r3, #16]
 800400e:	627c      	str	r4, [r7, #36]	; 0x24
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	8a9b      	ldrh	r3, [r3, #20]
 8004014:	b29d      	uxth	r5, r3
 8004016:	623d      	str	r5, [r7, #32]
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	8adb      	ldrh	r3, [r3, #22]
 800401c:	b29e      	uxth	r6, r3
 800401e:	61fe      	str	r6, [r7, #28]
 8004020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004022:	8b1b      	ldrh	r3, [r3, #24]
 8004024:	fa1f fc83 	uxth.w	ip, r3
 8004028:	f8c7 c018 	str.w	ip, [r7, #24]
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	8b5b      	ldrh	r3, [r3, #26]
 8004030:	fa1f fe83 	uxth.w	lr, r3
 8004034:	f8c7 e014 	str.w	lr, [r7, #20]
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	7f5a      	ldrb	r2, [r3, #29]
 800403c:	613a      	str	r2, [r7, #16]
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	f8d3 401e 	ldr.w	r4, [r3, #30]
 8004044:	60fc      	str	r4, [r7, #12]
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
 800404c:	60bd      	str	r5, [r7, #8]
 800404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004050:	f8d3 6026 	ldr.w	r6, [r3, #38]	; 0x26
 8004054:	607e      	str	r6, [r7, #4]
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	f8d3 602a 	ldr.w	r6, [r3, #42]	; 0x2a
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004066:	b29b      	uxth	r3, r3
 8004068:	f897 503e 	ldrb.w	r5, [r7, #62]	; 0x3e
 800406c:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8004070:	9310      	str	r3, [sp, #64]	; 0x40
 8004072:	920f      	str	r2, [sp, #60]	; 0x3c
 8004074:	960e      	str	r6, [sp, #56]	; 0x38
 8004076:	687e      	ldr	r6, [r7, #4]
 8004078:	960d      	str	r6, [sp, #52]	; 0x34
 800407a:	68be      	ldr	r6, [r7, #8]
 800407c:	960c      	str	r6, [sp, #48]	; 0x30
 800407e:	68fe      	ldr	r6, [r7, #12]
 8004080:	960b      	str	r6, [sp, #44]	; 0x2c
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	920a      	str	r2, [sp, #40]	; 0x28
 8004086:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800408a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800408e:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8004092:	f8cd c020 	str.w	ip, [sp, #32]
 8004096:	69fe      	ldr	r6, [r7, #28]
 8004098:	9607      	str	r6, [sp, #28]
 800409a:	6a3e      	ldr	r6, [r7, #32]
 800409c:	9606      	str	r6, [sp, #24]
 800409e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80040a0:	9605      	str	r6, [sp, #20]
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	9204      	str	r2, [sp, #16]
 80040a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a8:	9203      	str	r2, [sp, #12]
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	9302      	str	r3, [sp, #8]
 80040ae:	e9cd 0100 	strd	r0, r1, [sp]
 80040b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b4:	4629      	mov	r1, r5
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ff24 	bl	8003f04 <mavlink_msg_gps_raw_int_pack>
 80040bc:	4603      	mov	r3, r0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3744      	adds	r7, #68	; 0x44
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040c8 <GPS_Init>:
		tx_buffer[i] = rx_buffer[i];
	}
	HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 100);
}
*/
void GPS_Init(){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80040cc:	f7fd f82a 	bl	8001124 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80040d0:	f7fd f9b2 	bl	8001438 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80040d4:	2201      	movs	r2, #1
 80040d6:	4903      	ldr	r1, [pc, #12]	; (80040e4 <GPS_Init+0x1c>)
 80040d8:	4803      	ldr	r0, [pc, #12]	; (80040e8 <GPS_Init+0x20>)
 80040da:	f7fe fada 	bl	8002692 <HAL_UART_Receive_IT>
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000024c 	.word	0x2000024c
 80040e8:	20000200 	.word	0x20000200

080040ec <GPS_UART_CallBack>:

void GPS_UART_CallBack(){
 80040ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ee:	b08b      	sub	sp, #44	; 0x2c
 80040f0:	af0a      	add	r7, sp, #40	; 0x28
	if (rx_data != '\n' && rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <GPS_UART_CallBack+0x88>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b0a      	cmp	r3, #10
 80040f8:	d014      	beq.n	8004124 <GPS_UART_CallBack+0x38>
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <GPS_UART_CallBack+0x88>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b0a      	cmp	r3, #10
 8004100:	d010      	beq.n	8004124 <GPS_UART_CallBack+0x38>
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <GPS_UART_CallBack+0x8c>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b25b      	sxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	db0b      	blt.n	8004124 <GPS_UART_CallBack+0x38>
			rx_buffer[rx_index++] = rx_data;
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <GPS_UART_CallBack+0x8c>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	b2d1      	uxtb	r1, r2
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <GPS_UART_CallBack+0x8c>)
 8004116:	7011      	strb	r1, [r2, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <GPS_UART_CallBack+0x88>)
 800411c:	7819      	ldrb	r1, [r3, #0]
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <GPS_UART_CallBack+0x90>)
 8004120:	5499      	strb	r1, [r3, r2]
 8004122:	e010      	b.n	8004146 <GPS_UART_CallBack+0x5a>
	}
	else {
		//UART_Transmit_raw_data();
		if(GPS_validate((char*) rx_buffer))
 8004124:	4815      	ldr	r0, [pc, #84]	; (800417c <GPS_UART_CallBack+0x90>)
 8004126:	f000 f841 	bl	80041ac <GPS_validate>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <GPS_UART_CallBack+0x4a>
			GPS_parse((char*) rx_buffer);
 8004130:	4812      	ldr	r0, [pc, #72]	; (800417c <GPS_UART_CallBack+0x90>)
 8004132:	f000 f89d 	bl	8004270 <GPS_parse>
		rx_index = 0;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <GPS_UART_CallBack+0x8c>)
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	2100      	movs	r1, #0
 8004140:	480e      	ldr	r0, [pc, #56]	; (800417c <GPS_UART_CallBack+0x90>)
 8004142:	f000 fb23 	bl	800478c <memset>
	}
	Transmit_mavlink_data_GPS(data_GPS);
 8004146:	4e0e      	ldr	r6, [pc, #56]	; (8004180 <GPS_UART_CallBack+0x94>)
 8004148:	466d      	mov	r5, sp
 800414a:	f106 0410 	add.w	r4, r6, #16
 800414e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800415e:	f000 fa07 	bl	8004570 <Transmit_mavlink_data_GPS>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8004162:	2201      	movs	r2, #1
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <GPS_UART_CallBack+0x88>)
 8004166:	4807      	ldr	r0, [pc, #28]	; (8004184 <GPS_UART_CallBack+0x98>)
 8004168:	f7fe fa93 	bl	8002692 <HAL_UART_Receive_IT>
}
 800416c:	bf00      	nop
 800416e:	3704      	adds	r7, #4
 8004170:	46bd      	mov	sp, r7
 8004172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004174:	2000024c 	.word	0x2000024c
 8004178:	200002d0 	.word	0x200002d0
 800417c:	20000250 	.word	0x20000250
 8004180:	200002d4 	.word	0x200002d4
 8004184:	20000200 	.word	0x20000200

08004188 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(huart->Instance == USART1) GPS_UART_CallBack();
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_UART_RxCpltCallback+0x20>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_UART_RxCpltCallback+0x16>
 800419a:	f7ff ffa7 	bl	80040ec <GPS_UART_CallBack>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40013800 	.word	0x40013800

080041ac <GPS_validate>:

int GPS_validate(char *nmeastr){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b24      	cmp	r3, #36	; 0x24
 80041c6:	d103      	bne.n	80041d0 <GPS_validate+0x24>
        i++;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3301      	adds	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80041ce:	e00c      	b.n	80041ea <GPS_validate+0x3e>
        return 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e047      	b.n	8004264 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4053      	eors	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        i++;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <GPS_validate+0x5c>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004200:	d002      	beq.n	8004208 <GPS_validate+0x5c>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b4a      	cmp	r3, #74	; 0x4a
 8004206:	dde5      	ble.n	80041d4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b4a      	cmp	r3, #74	; 0x4a
 800420c:	dd01      	ble.n	8004212 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800420e:	2300      	movs	r3, #0
 8004210:	e028      	b.n	8004264 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b2a      	cmp	r3, #42	; 0x2a
 800421c:	d119      	bne.n	8004252 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3302      	adds	r3, #2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	490a      	ldr	r1, [pc, #40]	; (800426c <GPS_validate+0xc0>)
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fcbc 	bl	8004bc0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8004248:	7a3a      	ldrb	r2, [r7, #8]
 800424a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800424c:	429a      	cmp	r2, r3
 800424e:	d108      	bne.n	8004262 <GPS_validate+0xb6>
 8004250:	e001      	b.n	8004256 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8004252:	2300      	movs	r3, #0
 8004254:	e006      	b.n	8004264 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004256:	7a7a      	ldrb	r2, [r7, #9]
 8004258:	7b7b      	ldrb	r3, [r7, #13]
 800425a:	429a      	cmp	r2, r3
 800425c:	d101      	bne.n	8004262 <GPS_validate+0xb6>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <GPS_validate+0xb8>
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	080085c8 	.word	0x080085c8

08004270 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8004270:	b580      	push	{r7, lr}
 8004272:	b09e      	sub	sp, #120	; 0x78
 8004274:	af10      	add	r7, sp, #64	; 0x40
 8004276:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8004278:	2206      	movs	r2, #6
 800427a:	4972      	ldr	r1, [pc, #456]	; (8004444 <GPS_parse+0x1d4>)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fd2e 	bl	8004cde <strncmp>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d132      	bne.n	80042ee <GPS_parse+0x7e>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units, &GPS.ellipsoid) >= 1){
 8004288:	4b6f      	ldr	r3, [pc, #444]	; (8004448 <GPS_parse+0x1d8>)
 800428a:	9308      	str	r3, [sp, #32]
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <GPS_parse+0x1dc>)
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <GPS_parse+0x1e0>)
 8004292:	9306      	str	r3, [sp, #24]
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <GPS_parse+0x1e4>)
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <GPS_parse+0x1e8>)
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <GPS_parse+0x1ec>)
 800429e:	9303      	str	r3, [sp, #12]
 80042a0:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <GPS_parse+0x1f0>)
 80042a2:	9302      	str	r3, [sp, #8]
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <GPS_parse+0x1f4>)
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <GPS_parse+0x1f8>)
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4b6f      	ldr	r3, [pc, #444]	; (800446c <GPS_parse+0x1fc>)
 80042ae:	4a70      	ldr	r2, [pc, #448]	; (8004470 <GPS_parse+0x200>)
 80042b0:	4970      	ldr	r1, [pc, #448]	; (8004474 <GPS_parse+0x204>)
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fca4 	bl	8004c00 <siscanf>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f340 80be 	ble.w	800443c <GPS_parse+0x1cc>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80042c0:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <GPS_parse+0x208>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4a6c      	ldr	r2, [pc, #432]	; (8004478 <GPS_parse+0x208>)
 80042c6:	7e12      	ldrb	r2, [r2, #24]
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f90c 	bl	80044e8 <GPS_nmea_to_dec>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a69      	ldr	r2, [pc, #420]	; (8004478 <GPS_parse+0x208>)
 80042d4:	6053      	str	r3, [r2, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80042d6:	4b68      	ldr	r3, [pc, #416]	; (8004478 <GPS_parse+0x208>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a67      	ldr	r2, [pc, #412]	; (8004478 <GPS_parse+0x208>)
 80042dc:	7e52      	ldrb	r2, [r2, #25]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f901 	bl	80044e8 <GPS_nmea_to_dec>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a63      	ldr	r2, [pc, #396]	; (8004478 <GPS_parse+0x208>)
 80042ea:	6013      	str	r3, [r2, #0]
    		return;
 80042ec:	e0a6      	b.n	800443c <GPS_parse+0x1cc>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80042ee:	2206      	movs	r2, #6
 80042f0:	4962      	ldr	r1, [pc, #392]	; (800447c <GPS_parse+0x20c>)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fcf3 	bl	8004cde <strncmp>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d114      	bne.n	8004328 <GPS_parse+0xb8>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80042fe:	4b60      	ldr	r3, [pc, #384]	; (8004480 <GPS_parse+0x210>)
 8004300:	9305      	str	r3, [sp, #20]
 8004302:	4b60      	ldr	r3, [pc, #384]	; (8004484 <GPS_parse+0x214>)
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <GPS_parse+0x218>)
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	4b55      	ldr	r3, [pc, #340]	; (8004460 <GPS_parse+0x1f0>)
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	4b55      	ldr	r3, [pc, #340]	; (8004464 <GPS_parse+0x1f4>)
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	4b55      	ldr	r3, [pc, #340]	; (8004468 <GPS_parse+0x1f8>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4b55      	ldr	r3, [pc, #340]	; (800446c <GPS_parse+0x1fc>)
 8004318:	4a55      	ldr	r2, [pc, #340]	; (8004470 <GPS_parse+0x200>)
 800431a:	495c      	ldr	r1, [pc, #368]	; (800448c <GPS_parse+0x21c>)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fc6f 	bl	8004c00 <siscanf>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	e089      	b.n	800443c <GPS_parse+0x1cc>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8004328:	2206      	movs	r2, #6
 800432a:	4959      	ldr	r1, [pc, #356]	; (8004490 <GPS_parse+0x220>)
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fcd6 	bl	8004cde <strncmp>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <GPS_parse+0xea>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8004338:	4b56      	ldr	r3, [pc, #344]	; (8004494 <GPS_parse+0x224>)
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <GPS_parse+0x200>)
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	4b47      	ldr	r3, [pc, #284]	; (8004460 <GPS_parse+0x1f0>)
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	4b47      	ldr	r3, [pc, #284]	; (8004464 <GPS_parse+0x1f4>)
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4b47      	ldr	r3, [pc, #284]	; (8004468 <GPS_parse+0x1f8>)
 800434a:	4a48      	ldr	r2, [pc, #288]	; (800446c <GPS_parse+0x1fc>)
 800434c:	4952      	ldr	r1, [pc, #328]	; (8004498 <GPS_parse+0x228>)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fc56 	bl	8004c00 <siscanf>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	e070      	b.n	800443c <GPS_parse+0x1cc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800435a:	2206      	movs	r2, #6
 800435c:	494f      	ldr	r1, [pc, #316]	; (800449c <GPS_parse+0x22c>)
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fcbd 	bl	8004cde <strncmp>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d114      	bne.n	8004394 <GPS_parse+0x124>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800436a:	4b4d      	ldr	r3, [pc, #308]	; (80044a0 <GPS_parse+0x230>)
 800436c:	9305      	str	r3, [sp, #20]
 800436e:	4b4d      	ldr	r3, [pc, #308]	; (80044a4 <GPS_parse+0x234>)
 8004370:	9304      	str	r3, [sp, #16]
 8004372:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <GPS_parse+0x238>)
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <GPS_parse+0x218>)
 8004378:	9302      	str	r3, [sp, #8]
 800437a:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <GPS_parse+0x23c>)
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <GPS_parse+0x240>)
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <GPS_parse+0x244>)
 8004384:	4a4c      	ldr	r2, [pc, #304]	; (80044b8 <GPS_parse+0x248>)
 8004386:	494d      	ldr	r1, [pc, #308]	; (80044bc <GPS_parse+0x24c>)
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fc39 	bl	8004c00 <siscanf>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	e053      	b.n	800443c <GPS_parse+0x1cc>
            return;
    }
    else if (!strncmp(GPSstrParse, "GPGSA", 6)){
 8004394:	494a      	ldr	r1, [pc, #296]	; (80044c0 <GPS_parse+0x250>)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fb feda 	bl	8000150 <strcmp>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d13d      	bne.n	800441e <GPS_parse+0x1ae>
    	int a[12];
        if(sscanf(GPSstrParse, "$GPGSA,%c,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f", &GPS.mode, &GPS.fix_type,&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7],&a[8],&a[9],&a[10],&a[11], &GPS.PDOP, &GPS.HDOP, &GPS.VDOP) >= 1)
 80043a2:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <GPS_parse+0x254>)
 80043a4:	930e      	str	r3, [sp, #56]	; 0x38
 80043a6:	4b48      	ldr	r3, [pc, #288]	; (80044c8 <GPS_parse+0x258>)
 80043a8:	930d      	str	r3, [sp, #52]	; 0x34
 80043aa:	4b48      	ldr	r3, [pc, #288]	; (80044cc <GPS_parse+0x25c>)
 80043ac:	930c      	str	r3, [sp, #48]	; 0x30
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	332c      	adds	r3, #44	; 0x2c
 80043b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	3328      	adds	r3, #40	; 0x28
 80043bc:	930a      	str	r3, [sp, #40]	; 0x28
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	9309      	str	r3, [sp, #36]	; 0x24
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	3320      	adds	r3, #32
 80043cc:	9308      	str	r3, [sp, #32]
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	331c      	adds	r3, #28
 80043d4:	9307      	str	r3, [sp, #28]
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	3318      	adds	r3, #24
 80043dc:	9306      	str	r3, [sp, #24]
 80043de:	f107 0308 	add.w	r3, r7, #8
 80043e2:	3314      	adds	r3, #20
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	3310      	adds	r3, #16
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	f107 0308 	add.w	r3, r7, #8
 80043f2:	330c      	adds	r3, #12
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	3308      	adds	r3, #8
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	3304      	adds	r3, #4
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <GPS_parse+0x260>)
 800440e:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <GPS_parse+0x264>)
 8004410:	4931      	ldr	r1, [pc, #196]	; (80044d8 <GPS_parse+0x268>)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fbf4 	bl	8004c00 <siscanf>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	e00e      	b.n	800443c <GPS_parse+0x1cc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPRMA", 6)){
 800441e:	2206      	movs	r2, #6
 8004420:	492e      	ldr	r1, [pc, #184]	; (80044dc <GPS_parse+0x26c>)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fc5b 	bl	8004cde <strncmp>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <GPS_parse+0x1cc>
        if(sscanf(GPSstrParse, "$GPRMA,%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,], %f", &GPS.cog) >= 1)
 800442e:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <GPS_parse+0x270>)
 8004430:	492c      	ldr	r1, [pc, #176]	; (80044e4 <GPS_parse+0x274>)
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fbe4 	bl	8004c00 <siscanf>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
            return;
    }

}
 800443c:	3738      	adds	r7, #56	; 0x38
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	080085d0 	.word	0x080085d0
 8004448:	20000374 	.word	0x20000374
 800444c:	20000334 	.word	0x20000334
 8004450:	20000330 	.word	0x20000330
 8004454:	2000032c 	.word	0x2000032c
 8004458:	20000328 	.word	0x20000328
 800445c:	20000324 	.word	0x20000324
 8004460:	20000321 	.word	0x20000321
 8004464:	20000314 	.word	0x20000314
 8004468:	20000320 	.word	0x20000320
 800446c:	20000318 	.word	0x20000318
 8004470:	2000031c 	.word	0x2000031c
 8004474:	080085d8 	.word	0x080085d8
 8004478:	20000308 	.word	0x20000308
 800447c:	08008600 	.word	0x08008600
 8004480:	20000340 	.word	0x20000340
 8004484:	2000033c 	.word	0x2000033c
 8004488:	20000338 	.word	0x20000338
 800448c:	08008608 	.word	0x08008608
 8004490:	08008628 	.word	0x08008628
 8004494:	20000344 	.word	0x20000344
 8004498:	08008630 	.word	0x08008630
 800449c:	0800864c 	.word	0x0800864c
 80044a0:	2000035c 	.word	0x2000035c
 80044a4:	20000358 	.word	0x20000358
 80044a8:	20000355 	.word	0x20000355
 80044ac:	20000354 	.word	0x20000354
 80044b0:	20000350 	.word	0x20000350
 80044b4:	2000034c 	.word	0x2000034c
 80044b8:	20000348 	.word	0x20000348
 80044bc:	08008654 	.word	0x08008654
 80044c0:	08008674 	.word	0x08008674
 80044c4:	20000364 	.word	0x20000364
 80044c8:	20000368 	.word	0x20000368
 80044cc:	20000360 	.word	0x20000360
 80044d0:	2000036c 	.word	0x2000036c
 80044d4:	2000035d 	.word	0x2000035d
 80044d8:	0800867c 	.word	0x0800867c
 80044dc:	080086b8 	.word	0x080086b8
 80044e0:	20000370 	.word	0x20000370
 80044e4:	080086c0 	.word	0x080086c0

080044e8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80044f4:	491b      	ldr	r1, [pc, #108]	; (8004564 <GPS_nmea_to_dec+0x7c>)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fc fcda 	bl	8000eb0 <__aeabi_fdiv>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc fd72 	bl	8000fe8 <__aeabi_f2iz>
 8004504:	4603      	mov	r3, r0
 8004506:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2264      	movs	r2, #100	; 0x64
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc fbc5 	bl	8000ca0 <__aeabi_i2f>
 8004516:	4603      	mov	r3, r0
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fb0a 	bl	8000b34 <__aeabi_fsub>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8004524:	4910      	ldr	r1, [pc, #64]	; (8004568 <GPS_nmea_to_dec+0x80>)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7fc fcc2 	bl	8000eb0 <__aeabi_fdiv>
 800452c:	4603      	mov	r3, r0
 800452e:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8004530:	6938      	ldr	r0, [r7, #16]
 8004532:	f7fc fbb5 	bl	8000ca0 <__aeabi_i2f>
 8004536:	4603      	mov	r3, r0
 8004538:	4619      	mov	r1, r3
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f7fc fafc 	bl	8000b38 <__addsf3>
 8004540:	4603      	mov	r3, r0
 8004542:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	2b53      	cmp	r3, #83	; 0x53
 8004548:	d002      	beq.n	8004550 <GPS_nmea_to_dec+0x68>
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	2b57      	cmp	r3, #87	; 0x57
 800454e:	d103      	bne.n	8004558 <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004556:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8004558:	697b      	ldr	r3, [r7, #20]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	42c80000 	.word	0x42c80000
 8004568:	42700000 	.word	0x42700000
 800456c:	00000000 	.word	0x00000000

08004570 <Transmit_mavlink_data_GPS>:
void Transmit_mavlink_data_GPS(mavlink_gps_raw_int_t data){
 8004570:	b084      	sub	sp, #16
 8004572:	b580      	push	{r7, lr}
 8004574:	b0e2      	sub	sp, #392	; 0x188
 8004576:	af00      	add	r7, sp, #0
 8004578:	f507 7cc8 	add.w	ip, r7, #400	; 0x190
 800457c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	mavlink_message_t msg;
	uint8_t _buffer[100] = {0};
 8004580:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004584:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	2260      	movs	r2, #96	; 0x60
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f8fa 	bl	800478c <memset>
	data.time_usec = GPS.utc_time;
 8004598:	4b5d      	ldr	r3, [pc, #372]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fc fd83 	bl	80010a8 <__aeabi_f2ulz>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80045ac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	data.alt = GPS.altitude_ft;
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fd17 	bl	8000fe8 <__aeabi_f2iz>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	data.alt_ellipsoid = GPS.ellipsoid;
 80045c0:	4b53      	ldr	r3, [pc, #332]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 80045c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c4:	f8c7 31ae 	str.w	r3, [r7, #430]	; 0x1ae
	data.lat = GPS.dec_latitude;
 80045c8:	4b51      	ldr	r3, [pc, #324]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fc fd0b 	bl	8000fe8 <__aeabi_f2iz>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	data.lon = GPS.dec_longitude;
 80045d8:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fc fd03 	bl	8000fe8 <__aeabi_f2iz>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	data.eph = GPS.HDOP * 100;
 80045e8:	4b49      	ldr	r3, [pc, #292]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	4949      	ldr	r1, [pc, #292]	; (8004714 <Transmit_mavlink_data_GPS+0x1a4>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc fbaa 	bl	8000d48 <__aeabi_fmul>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc fd1c 	bl	8001034 <__aeabi_f2uiz>
 80045fc:	4603      	mov	r3, r0
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
	data.epv = GPS.VDOP * 100;
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	4942      	ldr	r1, [pc, #264]	; (8004714 <Transmit_mavlink_data_GPS+0x1a4>)
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fb9c 	bl	8000d48 <__aeabi_fmul>
 8004610:	4603      	mov	r3, r0
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fd0e 	bl	8001034 <__aeabi_f2uiz>
 8004618:	4603      	mov	r3, r0
 800461a:	b29b      	uxth	r3, r3
 800461c:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
	data.fix_type = GPS.fix_type;
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 8004622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
	data.vel = GPS.speed_km * 0.277778;
 800462a:	4b39      	ldr	r3, [pc, #228]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	4618      	mov	r0, r3
 8004630:	f7fb ff04 	bl	800043c <__aeabi_f2d>
 8004634:	a334      	add	r3, pc, #208	; (adr r3, 8004708 <Transmit_mavlink_data_GPS+0x198>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fb ff57 	bl	80004ec <__aeabi_dmul>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f7fc fa01 	bl	8000a4c <__aeabi_d2uiz>
 800464a:	4603      	mov	r3, r0
 800464c:	b29b      	uxth	r3, r3
 800464e:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
	data.cog = GPS.cog;
 8004652:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 8004654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc fcec 	bl	8001034 <__aeabi_f2uiz>
 800465c:	4603      	mov	r3, r0
 800465e:	b29b      	uxth	r3, r3
 8004660:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
	data.satellites_visible = GPS.satelites;
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <Transmit_mavlink_data_GPS+0x1a0>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
	data.alt_ellipsoid = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8004674:	2300      	movs	r3, #0
 8004676:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	data.h_acc = 1;
 800467a:	2300      	movs	r3, #0
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
 8004684:	2300      	movs	r3, #0
 8004686:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
	data.v_acc = 1;
 800468a:	2300      	movs	r3, #0
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
 8004694:	2300      	movs	r3, #0
 8004696:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
	data.vel_acc = 1;
 800469a:	2300      	movs	r3, #0
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	data.hdg_acc = 1;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8a7 31c0 	strh.w	r3, [r7, #448]	; 0x1c0
	data.yaw = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
	mavlink_msg_gps_raw_int_encode(0, 1, &msg, &data);
 80046c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046c4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80046c8:	2101      	movs	r1, #1
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7ff fc86 	bl	8003fdc <mavlink_msg_gps_raw_int_encode>
	uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 80046d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046d4:	463b      	mov	r3, r7
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fb34 	bl	8003d46 <mavlink_msg_to_send_buffer>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	HAL_UART_Transmit(&huart1, _buffer, len, 100);
 80046e4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	4639      	mov	r1, r7
 80046ec:	2364      	movs	r3, #100	; 0x64
 80046ee:	480a      	ldr	r0, [pc, #40]	; (8004718 <Transmit_mavlink_data_GPS+0x1a8>)
 80046f0:	f7fd ff4c 	bl	800258c <HAL_UART_Transmit>
}
 80046f4:	bf00      	nop
 80046f6:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80046fa:	46bd      	mov	sp, r7
 80046fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004700:	b004      	add	sp, #16
 8004702:	4770      	bx	lr
 8004704:	f3af 8000 	nop.w
 8004708:	60631727 	.word	0x60631727
 800470c:	3fd1c71d 	.word	0x3fd1c71d
 8004710:	20000308 	.word	0x20000308
 8004714:	42c80000 	.word	0x42c80000
 8004718:	20000200 	.word	0x20000200

0800471c <__errno>:
 800471c:	4b01      	ldr	r3, [pc, #4]	; (8004724 <__errno+0x8>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2600      	movs	r6, #0
 800472c:	4d0c      	ldr	r5, [pc, #48]	; (8004760 <__libc_init_array+0x38>)
 800472e:	4c0d      	ldr	r4, [pc, #52]	; (8004764 <__libc_init_array+0x3c>)
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	f003 ff3a 	bl	80085b0 <_init>
 800473c:	2600      	movs	r6, #0
 800473e:	4d0a      	ldr	r5, [pc, #40]	; (8004768 <__libc_init_array+0x40>)
 8004740:	4c0a      	ldr	r4, [pc, #40]	; (800476c <__libc_init_array+0x44>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	08008c90 	.word	0x08008c90
 8004764:	08008c90 	.word	0x08008c90
 8004768:	08008c90 	.word	0x08008c90
 800476c:	08008c94 	.word	0x08008c94

08004770 <memcpy>:
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	f100 33ff 	add.w	r3, r0, #4294967295
 8004778:	d100      	bne.n	800477c <memcpy+0xc>
 800477a:	4770      	bx	lr
 800477c:	b510      	push	{r4, lr}
 800477e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004782:	4291      	cmp	r1, r2
 8004784:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004788:	d1f9      	bne.n	800477e <memcpy+0xe>
 800478a:	bd10      	pop	{r4, pc}

0800478c <memset>:
 800478c:	4603      	mov	r3, r0
 800478e:	4402      	add	r2, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_scanf_float>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	b087      	sub	sp, #28
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	688b      	ldr	r3, [r1, #8]
 80047a6:	4617      	mov	r7, r2
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047ae:	bf85      	ittet	hi
 80047b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047b4:	195b      	addhi	r3, r3, r5
 80047b6:	2300      	movls	r3, #0
 80047b8:	9302      	strhi	r3, [sp, #8]
 80047ba:	bf88      	it	hi
 80047bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047c0:	468b      	mov	fp, r1
 80047c2:	f04f 0500 	mov.w	r5, #0
 80047c6:	bf8c      	ite	hi
 80047c8:	608b      	strhi	r3, [r1, #8]
 80047ca:	9302      	strls	r3, [sp, #8]
 80047cc:	680b      	ldr	r3, [r1, #0]
 80047ce:	4680      	mov	r8, r0
 80047d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80047d4:	f84b 3b1c 	str.w	r3, [fp], #28
 80047d8:	460c      	mov	r4, r1
 80047da:	465e      	mov	r6, fp
 80047dc:	46aa      	mov	sl, r5
 80047de:	46a9      	mov	r9, r5
 80047e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80047e4:	9501      	str	r5, [sp, #4]
 80047e6:	68a2      	ldr	r2, [r4, #8]
 80047e8:	b152      	cbz	r2, 8004800 <_scanf_float+0x64>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b4e      	cmp	r3, #78	; 0x4e
 80047f0:	d864      	bhi.n	80048bc <_scanf_float+0x120>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d83c      	bhi.n	8004870 <_scanf_float+0xd4>
 80047f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047fa:	b2c8      	uxtb	r0, r1
 80047fc:	280e      	cmp	r0, #14
 80047fe:	d93a      	bls.n	8004876 <_scanf_float+0xda>
 8004800:	f1b9 0f00 	cmp.w	r9, #0
 8004804:	d003      	beq.n	800480e <_scanf_float+0x72>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004812:	f1ba 0f01 	cmp.w	sl, #1
 8004816:	f200 8113 	bhi.w	8004a40 <_scanf_float+0x2a4>
 800481a:	455e      	cmp	r6, fp
 800481c:	f200 8105 	bhi.w	8004a2a <_scanf_float+0x28e>
 8004820:	2501      	movs	r5, #1
 8004822:	4628      	mov	r0, r5
 8004824:	b007      	add	sp, #28
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800482e:	2a0d      	cmp	r2, #13
 8004830:	d8e6      	bhi.n	8004800 <_scanf_float+0x64>
 8004832:	a101      	add	r1, pc, #4	; (adr r1, 8004838 <_scanf_float+0x9c>)
 8004834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004838:	08004977 	.word	0x08004977
 800483c:	08004801 	.word	0x08004801
 8004840:	08004801 	.word	0x08004801
 8004844:	08004801 	.word	0x08004801
 8004848:	080049d7 	.word	0x080049d7
 800484c:	080049af 	.word	0x080049af
 8004850:	08004801 	.word	0x08004801
 8004854:	08004801 	.word	0x08004801
 8004858:	08004985 	.word	0x08004985
 800485c:	08004801 	.word	0x08004801
 8004860:	08004801 	.word	0x08004801
 8004864:	08004801 	.word	0x08004801
 8004868:	08004801 	.word	0x08004801
 800486c:	0800493d 	.word	0x0800493d
 8004870:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004874:	e7db      	b.n	800482e <_scanf_float+0x92>
 8004876:	290e      	cmp	r1, #14
 8004878:	d8c2      	bhi.n	8004800 <_scanf_float+0x64>
 800487a:	a001      	add	r0, pc, #4	; (adr r0, 8004880 <_scanf_float+0xe4>)
 800487c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004880:	0800492f 	.word	0x0800492f
 8004884:	08004801 	.word	0x08004801
 8004888:	0800492f 	.word	0x0800492f
 800488c:	080049c3 	.word	0x080049c3
 8004890:	08004801 	.word	0x08004801
 8004894:	080048dd 	.word	0x080048dd
 8004898:	08004919 	.word	0x08004919
 800489c:	08004919 	.word	0x08004919
 80048a0:	08004919 	.word	0x08004919
 80048a4:	08004919 	.word	0x08004919
 80048a8:	08004919 	.word	0x08004919
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004919 	.word	0x08004919
 80048bc:	2b6e      	cmp	r3, #110	; 0x6e
 80048be:	d809      	bhi.n	80048d4 <_scanf_float+0x138>
 80048c0:	2b60      	cmp	r3, #96	; 0x60
 80048c2:	d8b2      	bhi.n	800482a <_scanf_float+0x8e>
 80048c4:	2b54      	cmp	r3, #84	; 0x54
 80048c6:	d077      	beq.n	80049b8 <_scanf_float+0x21c>
 80048c8:	2b59      	cmp	r3, #89	; 0x59
 80048ca:	d199      	bne.n	8004800 <_scanf_float+0x64>
 80048cc:	2d07      	cmp	r5, #7
 80048ce:	d197      	bne.n	8004800 <_scanf_float+0x64>
 80048d0:	2508      	movs	r5, #8
 80048d2:	e029      	b.n	8004928 <_scanf_float+0x18c>
 80048d4:	2b74      	cmp	r3, #116	; 0x74
 80048d6:	d06f      	beq.n	80049b8 <_scanf_float+0x21c>
 80048d8:	2b79      	cmp	r3, #121	; 0x79
 80048da:	e7f6      	b.n	80048ca <_scanf_float+0x12e>
 80048dc:	6821      	ldr	r1, [r4, #0]
 80048de:	05c8      	lsls	r0, r1, #23
 80048e0:	d51a      	bpl.n	8004918 <_scanf_float+0x17c>
 80048e2:	9b02      	ldr	r3, [sp, #8]
 80048e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80048e8:	6021      	str	r1, [r4, #0]
 80048ea:	f109 0901 	add.w	r9, r9, #1
 80048ee:	b11b      	cbz	r3, 80048f8 <_scanf_float+0x15c>
 80048f0:	3b01      	subs	r3, #1
 80048f2:	3201      	adds	r2, #1
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	60a2      	str	r2, [r4, #8]
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	3301      	adds	r3, #1
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	f340 8084 	ble.w	8004a18 <_scanf_float+0x27c>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	e766      	b.n	80047e6 <_scanf_float+0x4a>
 8004918:	eb1a 0f05 	cmn.w	sl, r5
 800491c:	f47f af70 	bne.w	8004800 <_scanf_float+0x64>
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	f806 3b01 	strb.w	r3, [r6], #1
 800492c:	e7e4      	b.n	80048f8 <_scanf_float+0x15c>
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	0610      	lsls	r0, r2, #24
 8004932:	f57f af65 	bpl.w	8004800 <_scanf_float+0x64>
 8004936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800493a:	e7f4      	b.n	8004926 <_scanf_float+0x18a>
 800493c:	f1ba 0f00 	cmp.w	sl, #0
 8004940:	d10e      	bne.n	8004960 <_scanf_float+0x1c4>
 8004942:	f1b9 0f00 	cmp.w	r9, #0
 8004946:	d10e      	bne.n	8004966 <_scanf_float+0x1ca>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800494e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004952:	d108      	bne.n	8004966 <_scanf_float+0x1ca>
 8004954:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004958:	f04f 0a01 	mov.w	sl, #1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	e7e3      	b.n	8004928 <_scanf_float+0x18c>
 8004960:	f1ba 0f02 	cmp.w	sl, #2
 8004964:	d055      	beq.n	8004a12 <_scanf_float+0x276>
 8004966:	2d01      	cmp	r5, #1
 8004968:	d002      	beq.n	8004970 <_scanf_float+0x1d4>
 800496a:	2d04      	cmp	r5, #4
 800496c:	f47f af48 	bne.w	8004800 <_scanf_float+0x64>
 8004970:	3501      	adds	r5, #1
 8004972:	b2ed      	uxtb	r5, r5
 8004974:	e7d8      	b.n	8004928 <_scanf_float+0x18c>
 8004976:	f1ba 0f01 	cmp.w	sl, #1
 800497a:	f47f af41 	bne.w	8004800 <_scanf_float+0x64>
 800497e:	f04f 0a02 	mov.w	sl, #2
 8004982:	e7d1      	b.n	8004928 <_scanf_float+0x18c>
 8004984:	b97d      	cbnz	r5, 80049a6 <_scanf_float+0x20a>
 8004986:	f1b9 0f00 	cmp.w	r9, #0
 800498a:	f47f af3c 	bne.w	8004806 <_scanf_float+0x6a>
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004994:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004998:	f47f af39 	bne.w	800480e <_scanf_float+0x72>
 800499c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049a0:	2501      	movs	r5, #1
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	e7c0      	b.n	8004928 <_scanf_float+0x18c>
 80049a6:	2d03      	cmp	r5, #3
 80049a8:	d0e2      	beq.n	8004970 <_scanf_float+0x1d4>
 80049aa:	2d05      	cmp	r5, #5
 80049ac:	e7de      	b.n	800496c <_scanf_float+0x1d0>
 80049ae:	2d02      	cmp	r5, #2
 80049b0:	f47f af26 	bne.w	8004800 <_scanf_float+0x64>
 80049b4:	2503      	movs	r5, #3
 80049b6:	e7b7      	b.n	8004928 <_scanf_float+0x18c>
 80049b8:	2d06      	cmp	r5, #6
 80049ba:	f47f af21 	bne.w	8004800 <_scanf_float+0x64>
 80049be:	2507      	movs	r5, #7
 80049c0:	e7b2      	b.n	8004928 <_scanf_float+0x18c>
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	0591      	lsls	r1, r2, #22
 80049c6:	f57f af1b 	bpl.w	8004800 <_scanf_float+0x64>
 80049ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80049ce:	6022      	str	r2, [r4, #0]
 80049d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80049d4:	e7a8      	b.n	8004928 <_scanf_float+0x18c>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80049dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049e0:	d006      	beq.n	80049f0 <_scanf_float+0x254>
 80049e2:	0550      	lsls	r0, r2, #21
 80049e4:	f57f af0c 	bpl.w	8004800 <_scanf_float+0x64>
 80049e8:	f1b9 0f00 	cmp.w	r9, #0
 80049ec:	f43f af0f 	beq.w	800480e <_scanf_float+0x72>
 80049f0:	0591      	lsls	r1, r2, #22
 80049f2:	bf58      	it	pl
 80049f4:	9901      	ldrpl	r1, [sp, #4]
 80049f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049fa:	bf58      	it	pl
 80049fc:	eba9 0101 	subpl.w	r1, r9, r1
 8004a00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a04:	f04f 0900 	mov.w	r9, #0
 8004a08:	bf58      	it	pl
 8004a0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	e78a      	b.n	8004928 <_scanf_float+0x18c>
 8004a12:	f04f 0a03 	mov.w	sl, #3
 8004a16:	e787      	b.n	8004928 <_scanf_float+0x18c>
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a20:	4798      	blx	r3
 8004a22:	2800      	cmp	r0, #0
 8004a24:	f43f aedf 	beq.w	80047e6 <_scanf_float+0x4a>
 8004a28:	e6ea      	b.n	8004800 <_scanf_float+0x64>
 8004a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a2e:	463a      	mov	r2, r7
 8004a30:	4640      	mov	r0, r8
 8004a32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a36:	4798      	blx	r3
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	e6ec      	b.n	800481a <_scanf_float+0x7e>
 8004a40:	1e6b      	subs	r3, r5, #1
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d825      	bhi.n	8004a92 <_scanf_float+0x2f6>
 8004a46:	2d02      	cmp	r5, #2
 8004a48:	d836      	bhi.n	8004ab8 <_scanf_float+0x31c>
 8004a4a:	455e      	cmp	r6, fp
 8004a4c:	f67f aee8 	bls.w	8004820 <_scanf_float+0x84>
 8004a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a54:	463a      	mov	r2, r7
 8004a56:	4640      	mov	r0, r8
 8004a58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a5c:	4798      	blx	r3
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	e7f1      	b.n	8004a4a <_scanf_float+0x2ae>
 8004a66:	9802      	ldr	r0, [sp, #8]
 8004a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a70:	463a      	mov	r2, r7
 8004a72:	9002      	str	r0, [sp, #8]
 8004a74:	4640      	mov	r0, r8
 8004a76:	4798      	blx	r3
 8004a78:	6923      	ldr	r3, [r4, #16]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a82:	fa5f fa8a 	uxtb.w	sl, sl
 8004a86:	f1ba 0f02 	cmp.w	sl, #2
 8004a8a:	d1ec      	bne.n	8004a66 <_scanf_float+0x2ca>
 8004a8c:	3d03      	subs	r5, #3
 8004a8e:	b2ed      	uxtb	r5, r5
 8004a90:	1b76      	subs	r6, r6, r5
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	05da      	lsls	r2, r3, #23
 8004a96:	d52f      	bpl.n	8004af8 <_scanf_float+0x35c>
 8004a98:	055b      	lsls	r3, r3, #21
 8004a9a:	d510      	bpl.n	8004abe <_scanf_float+0x322>
 8004a9c:	455e      	cmp	r6, fp
 8004a9e:	f67f aebf 	bls.w	8004820 <_scanf_float+0x84>
 8004aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa6:	463a      	mov	r2, r7
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aae:	4798      	blx	r3
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	e7f1      	b.n	8004a9c <_scanf_float+0x300>
 8004ab8:	46aa      	mov	sl, r5
 8004aba:	9602      	str	r6, [sp, #8]
 8004abc:	e7df      	b.n	8004a7e <_scanf_float+0x2e2>
 8004abe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	2965      	cmp	r1, #101	; 0x65
 8004ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aca:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	d00c      	beq.n	8004aec <_scanf_float+0x350>
 8004ad2:	2945      	cmp	r1, #69	; 0x45
 8004ad4:	d00a      	beq.n	8004aec <_scanf_float+0x350>
 8004ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ada:	463a      	mov	r2, r7
 8004adc:	4640      	mov	r0, r8
 8004ade:	4798      	blx	r3
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	1eb5      	subs	r5, r6, #2
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	463a      	mov	r2, r7
 8004aee:	4640      	mov	r0, r8
 8004af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004af4:	4798      	blx	r3
 8004af6:	462e      	mov	r6, r5
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	f015 0510 	ands.w	r5, r5, #16
 8004afe:	d155      	bne.n	8004bac <_scanf_float+0x410>
 8004b00:	7035      	strb	r5, [r6, #0]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d11b      	bne.n	8004b46 <_scanf_float+0x3aa>
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	454b      	cmp	r3, r9
 8004b12:	eba3 0209 	sub.w	r2, r3, r9
 8004b16:	d123      	bne.n	8004b60 <_scanf_float+0x3c4>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	f000 fefb 	bl	8005918 <_strtod_r>
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	9b03      	ldr	r3, [sp, #12]
 8004b26:	f012 0f02 	tst.w	r2, #2
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	460f      	mov	r7, r1
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	d021      	beq.n	8004b76 <_scanf_float+0x3da>
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	9903      	ldr	r1, [sp, #12]
 8004b36:	600a      	str	r2, [r1, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	e9c3 6700 	strd	r6, r7, [r3]
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60e3      	str	r3, [r4, #12]
 8004b44:	e66d      	b.n	8004822 <_scanf_float+0x86>
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0e5      	beq.n	8004b18 <_scanf_float+0x37c>
 8004b4c:	9905      	ldr	r1, [sp, #20]
 8004b4e:	230a      	movs	r3, #10
 8004b50:	462a      	mov	r2, r5
 8004b52:	4640      	mov	r0, r8
 8004b54:	3101      	adds	r1, #1
 8004b56:	f000 ff61 	bl	8005a1c <_strtol_r>
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	9e05      	ldr	r6, [sp, #20]
 8004b5e:	1ac2      	subs	r2, r0, r3
 8004b60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b64:	429e      	cmp	r6, r3
 8004b66:	bf28      	it	cs
 8004b68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	4910      	ldr	r1, [pc, #64]	; (8004bb0 <_scanf_float+0x414>)
 8004b70:	f000 f826 	bl	8004bc0 <siprintf>
 8004b74:	e7d0      	b.n	8004b18 <_scanf_float+0x37c>
 8004b76:	f012 0f04 	tst.w	r2, #4
 8004b7a:	f103 0204 	add.w	r2, r3, #4
 8004b7e:	d1d9      	bne.n	8004b34 <_scanf_float+0x398>
 8004b80:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004b84:	f8cc 2000 	str.w	r2, [ip]
 8004b88:	f8d3 8000 	ldr.w	r8, [r3]
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	f7fb ff46 	bl	8000a20 <__aeabi_dcmpun>
 8004b94:	b128      	cbz	r0, 8004ba2 <_scanf_float+0x406>
 8004b96:	4807      	ldr	r0, [pc, #28]	; (8004bb4 <_scanf_float+0x418>)
 8004b98:	f000 f80e 	bl	8004bb8 <nanf>
 8004b9c:	f8c8 0000 	str.w	r0, [r8]
 8004ba0:	e7cd      	b.n	8004b3e <_scanf_float+0x3a2>
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb ff71 	bl	8000a8c <__aeabi_d2f>
 8004baa:	e7f7      	b.n	8004b9c <_scanf_float+0x400>
 8004bac:	2500      	movs	r5, #0
 8004bae:	e638      	b.n	8004822 <_scanf_float+0x86>
 8004bb0:	08008840 	.word	0x08008840
 8004bb4:	08008c2d 	.word	0x08008c2d

08004bb8 <nanf>:
 8004bb8:	4800      	ldr	r0, [pc, #0]	; (8004bbc <nanf+0x4>)
 8004bba:	4770      	bx	lr
 8004bbc:	7fc00000 	.word	0x7fc00000

08004bc0 <siprintf>:
 8004bc0:	b40e      	push	{r1, r2, r3}
 8004bc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc6:	b500      	push	{lr}
 8004bc8:	b09c      	sub	sp, #112	; 0x70
 8004bca:	ab1d      	add	r3, sp, #116	; 0x74
 8004bcc:	9002      	str	r0, [sp, #8]
 8004bce:	9006      	str	r0, [sp, #24]
 8004bd0:	9107      	str	r1, [sp, #28]
 8004bd2:	9104      	str	r1, [sp, #16]
 8004bd4:	4808      	ldr	r0, [pc, #32]	; (8004bf8 <siprintf+0x38>)
 8004bd6:	4909      	ldr	r1, [pc, #36]	; (8004bfc <siprintf+0x3c>)
 8004bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	6800      	ldr	r0, [r0, #0]
 8004be0:	a902      	add	r1, sp, #8
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	f002 f884 	bl	8006cf0 <_svfiprintf_r>
 8004be8:	2200      	movs	r2, #0
 8004bea:	9b02      	ldr	r3, [sp, #8]
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	b01c      	add	sp, #112	; 0x70
 8004bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf4:	b003      	add	sp, #12
 8004bf6:	4770      	bx	lr
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	ffff0208 	.word	0xffff0208

08004c00 <siscanf>:
 8004c00:	b40e      	push	{r1, r2, r3}
 8004c02:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004c06:	b530      	push	{r4, r5, lr}
 8004c08:	b09c      	sub	sp, #112	; 0x70
 8004c0a:	ac1f      	add	r4, sp, #124	; 0x7c
 8004c0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004c10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004c14:	9002      	str	r0, [sp, #8]
 8004c16:	9006      	str	r0, [sp, #24]
 8004c18:	f7fb faa4 	bl	8000164 <strlen>
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <siscanf+0x4c>)
 8004c1e:	9003      	str	r0, [sp, #12]
 8004c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c22:	2300      	movs	r3, #0
 8004c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c26:	9314      	str	r3, [sp, #80]	; 0x50
 8004c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c2c:	9007      	str	r0, [sp, #28]
 8004c2e:	4808      	ldr	r0, [pc, #32]	; (8004c50 <siscanf+0x50>)
 8004c30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c34:	462a      	mov	r2, r5
 8004c36:	4623      	mov	r3, r4
 8004c38:	a902      	add	r1, sp, #8
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	9401      	str	r4, [sp, #4]
 8004c3e:	f002 f9b1 	bl	8006fa4 <__ssvfiscanf_r>
 8004c42:	b01c      	add	sp, #112	; 0x70
 8004c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c48:	b003      	add	sp, #12
 8004c4a:	4770      	bx	lr
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	2000000c 	.word	0x2000000c

08004c54 <__sread>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	460c      	mov	r4, r1
 8004c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5c:	f002 fe04 	bl	8007868 <_read_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	bfab      	itete	ge
 8004c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c66:	89a3      	ldrhlt	r3, [r4, #12]
 8004c68:	181b      	addge	r3, r3, r0
 8004c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c6e:	bfac      	ite	ge
 8004c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c72:	81a3      	strhlt	r3, [r4, #12]
 8004c74:	bd10      	pop	{r4, pc}

08004c76 <__seofread>:
 8004c76:	2000      	movs	r0, #0
 8004c78:	4770      	bx	lr

08004c7a <__swrite>:
 8004c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7e:	461f      	mov	r7, r3
 8004c80:	898b      	ldrh	r3, [r1, #12]
 8004c82:	4605      	mov	r5, r0
 8004c84:	05db      	lsls	r3, r3, #23
 8004c86:	460c      	mov	r4, r1
 8004c88:	4616      	mov	r6, r2
 8004c8a:	d505      	bpl.n	8004c98 <__swrite+0x1e>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	f001 fa4c 	bl	8006130 <_lseek_r>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cae:	f000 beb7 	b.w	8005a20 <_write_r>

08004cb2 <__sseek>:
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cba:	f001 fa39 	bl	8006130 <_lseek_r>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	bf15      	itete	ne
 8004cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cce:	81a3      	strheq	r3, [r4, #12]
 8004cd0:	bf18      	it	ne
 8004cd2:	81a3      	strhne	r3, [r4, #12]
 8004cd4:	bd10      	pop	{r4, pc}

08004cd6 <__sclose>:
 8004cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cda:	f000 beb3 	b.w	8005a44 <_close_r>

08004cde <strncmp>:
 8004cde:	4603      	mov	r3, r0
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	b172      	cbz	r2, 8004d02 <strncmp+0x24>
 8004ce4:	3901      	subs	r1, #1
 8004ce6:	1884      	adds	r4, r0, r2
 8004ce8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004cec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004cf0:	4290      	cmp	r0, r2
 8004cf2:	d101      	bne.n	8004cf8 <strncmp+0x1a>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d101      	bne.n	8004cfc <strncmp+0x1e>
 8004cf8:	1a80      	subs	r0, r0, r2
 8004cfa:	bd10      	pop	{r4, pc}
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d1f3      	bne.n	8004ce8 <strncmp+0xa>
 8004d00:	e7fa      	b.n	8004cf8 <strncmp+0x1a>
 8004d02:	4610      	mov	r0, r2
 8004d04:	e7f9      	b.n	8004cfa <strncmp+0x1c>

08004d06 <sulp>:
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	f001 fda3 	bl	8006858 <__ulp>
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	d011      	beq.n	8004d40 <sulp+0x3a>
 8004d1c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004d20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd0b      	ble.n	8004d40 <sulp+0x3a>
 8004d28:	2400      	movs	r4, #0
 8004d2a:	051b      	lsls	r3, r3, #20
 8004d2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004d30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d34:	4622      	mov	r2, r4
 8004d36:	462b      	mov	r3, r5
 8004d38:	f7fb fbd8 	bl	80004ec <__aeabi_dmul>
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	4620      	mov	r0, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d48 <_strtod_l>:
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	469b      	mov	fp, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	b09f      	sub	sp, #124	; 0x7c
 8004d52:	931a      	str	r3, [sp, #104]	; 0x68
 8004d54:	4b9e      	ldr	r3, [pc, #632]	; (8004fd0 <_strtod_l+0x288>)
 8004d56:	4682      	mov	sl, r0
 8004d58:	681f      	ldr	r7, [r3, #0]
 8004d5a:	460e      	mov	r6, r1
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	9215      	str	r2, [sp, #84]	; 0x54
 8004d60:	f7fb fa00 	bl	8000164 <strlen>
 8004d64:	f04f 0800 	mov.w	r8, #0
 8004d68:	4604      	mov	r4, r0
 8004d6a:	f04f 0900 	mov.w	r9, #0
 8004d6e:	9619      	str	r6, [sp, #100]	; 0x64
 8004d70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	2a2b      	cmp	r2, #43	; 0x2b
 8004d76:	d04c      	beq.n	8004e12 <_strtod_l+0xca>
 8004d78:	d83a      	bhi.n	8004df0 <_strtod_l+0xa8>
 8004d7a:	2a0d      	cmp	r2, #13
 8004d7c:	d833      	bhi.n	8004de6 <_strtod_l+0x9e>
 8004d7e:	2a08      	cmp	r2, #8
 8004d80:	d833      	bhi.n	8004dea <_strtod_l+0xa2>
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	d03d      	beq.n	8004e02 <_strtod_l+0xba>
 8004d86:	2300      	movs	r3, #0
 8004d88:	930a      	str	r3, [sp, #40]	; 0x28
 8004d8a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004d8c:	782b      	ldrb	r3, [r5, #0]
 8004d8e:	2b30      	cmp	r3, #48	; 0x30
 8004d90:	f040 80aa 	bne.w	8004ee8 <_strtod_l+0x1a0>
 8004d94:	786b      	ldrb	r3, [r5, #1]
 8004d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d9a:	2b58      	cmp	r3, #88	; 0x58
 8004d9c:	d166      	bne.n	8004e6c <_strtod_l+0x124>
 8004d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da0:	4650      	mov	r0, sl
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	ab1a      	add	r3, sp, #104	; 0x68
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4a8a      	ldr	r2, [pc, #552]	; (8004fd4 <_strtod_l+0x28c>)
 8004daa:	f8cd b008 	str.w	fp, [sp, #8]
 8004dae:	ab1b      	add	r3, sp, #108	; 0x6c
 8004db0:	a919      	add	r1, sp, #100	; 0x64
 8004db2:	f000 febf 	bl	8005b34 <__gethex>
 8004db6:	f010 0607 	ands.w	r6, r0, #7
 8004dba:	4604      	mov	r4, r0
 8004dbc:	d005      	beq.n	8004dca <_strtod_l+0x82>
 8004dbe:	2e06      	cmp	r6, #6
 8004dc0:	d129      	bne.n	8004e16 <_strtod_l+0xce>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	9519      	str	r5, [sp, #100]	; 0x64
 8004dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8004dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 858a 	bne.w	80058e6 <_strtod_l+0xb9e>
 8004dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd4:	b1d3      	cbz	r3, 8004e0c <_strtod_l+0xc4>
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	b01f      	add	sp, #124	; 0x7c
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	2a20      	cmp	r2, #32
 8004de8:	d1cd      	bne.n	8004d86 <_strtod_l+0x3e>
 8004dea:	3301      	adds	r3, #1
 8004dec:	9319      	str	r3, [sp, #100]	; 0x64
 8004dee:	e7bf      	b.n	8004d70 <_strtod_l+0x28>
 8004df0:	2a2d      	cmp	r2, #45	; 0x2d
 8004df2:	d1c8      	bne.n	8004d86 <_strtod_l+0x3e>
 8004df4:	2201      	movs	r2, #1
 8004df6:	920a      	str	r2, [sp, #40]	; 0x28
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	9219      	str	r2, [sp, #100]	; 0x64
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1c3      	bne.n	8004d8a <_strtod_l+0x42>
 8004e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e04:	9619      	str	r6, [sp, #100]	; 0x64
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 856b 	bne.w	80058e2 <_strtod_l+0xb9a>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	e7e4      	b.n	8004ddc <_strtod_l+0x94>
 8004e12:	2200      	movs	r2, #0
 8004e14:	e7ef      	b.n	8004df6 <_strtod_l+0xae>
 8004e16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e18:	b13a      	cbz	r2, 8004e2a <_strtod_l+0xe2>
 8004e1a:	2135      	movs	r1, #53	; 0x35
 8004e1c:	a81c      	add	r0, sp, #112	; 0x70
 8004e1e:	f001 fe1f 	bl	8006a60 <__copybits>
 8004e22:	4650      	mov	r0, sl
 8004e24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e26:	f001 f9e7 	bl	80061f8 <_Bfree>
 8004e2a:	3e01      	subs	r6, #1
 8004e2c:	2e04      	cmp	r6, #4
 8004e2e:	d806      	bhi.n	8004e3e <_strtod_l+0xf6>
 8004e30:	e8df f006 	tbb	[pc, r6]
 8004e34:	1714030a 	.word	0x1714030a
 8004e38:	0a          	.byte	0x0a
 8004e39:	00          	.byte	0x00
 8004e3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004e3e:	0721      	lsls	r1, r4, #28
 8004e40:	d5c3      	bpl.n	8004dca <_strtod_l+0x82>
 8004e42:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004e46:	e7c0      	b.n	8004dca <_strtod_l+0x82>
 8004e48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e4a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004e4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004e5a:	e7f0      	b.n	8004e3e <_strtod_l+0xf6>
 8004e5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004fd8 <_strtod_l+0x290>
 8004e60:	e7ed      	b.n	8004e3e <_strtod_l+0xf6>
 8004e62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004e66:	f04f 38ff 	mov.w	r8, #4294967295
 8004e6a:	e7e8      	b.n	8004e3e <_strtod_l+0xf6>
 8004e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	9219      	str	r2, [sp, #100]	; 0x64
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d0f9      	beq.n	8004e6c <_strtod_l+0x124>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0a6      	beq.n	8004dca <_strtod_l+0x82>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e82:	220a      	movs	r2, #10
 8004e84:	9308      	str	r3, [sp, #32]
 8004e86:	2300      	movs	r3, #0
 8004e88:	469b      	mov	fp, r3
 8004e8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004e8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004e90:	7805      	ldrb	r5, [r0, #0]
 8004e92:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004e96:	b2d9      	uxtb	r1, r3
 8004e98:	2909      	cmp	r1, #9
 8004e9a:	d927      	bls.n	8004eec <_strtod_l+0x1a4>
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	f7ff ff1d 	bl	8004cde <strncmp>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d033      	beq.n	8004f10 <_strtod_l+0x1c8>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	462a      	mov	r2, r5
 8004eac:	465c      	mov	r4, fp
 8004eae:	4603      	mov	r3, r0
 8004eb0:	9004      	str	r0, [sp, #16]
 8004eb2:	2a65      	cmp	r2, #101	; 0x65
 8004eb4:	d001      	beq.n	8004eba <_strtod_l+0x172>
 8004eb6:	2a45      	cmp	r2, #69	; 0x45
 8004eb8:	d114      	bne.n	8004ee4 <_strtod_l+0x19c>
 8004eba:	b91c      	cbnz	r4, 8004ec4 <_strtod_l+0x17c>
 8004ebc:	9a07      	ldr	r2, [sp, #28]
 8004ebe:	4302      	orrs	r2, r0
 8004ec0:	d09f      	beq.n	8004e02 <_strtod_l+0xba>
 8004ec2:	2400      	movs	r4, #0
 8004ec4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004ec6:	1c72      	adds	r2, r6, #1
 8004ec8:	9219      	str	r2, [sp, #100]	; 0x64
 8004eca:	7872      	ldrb	r2, [r6, #1]
 8004ecc:	2a2b      	cmp	r2, #43	; 0x2b
 8004ece:	d079      	beq.n	8004fc4 <_strtod_l+0x27c>
 8004ed0:	2a2d      	cmp	r2, #45	; 0x2d
 8004ed2:	f000 8083 	beq.w	8004fdc <_strtod_l+0x294>
 8004ed6:	2700      	movs	r7, #0
 8004ed8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004edc:	2909      	cmp	r1, #9
 8004ede:	f240 8083 	bls.w	8004fe8 <_strtod_l+0x2a0>
 8004ee2:	9619      	str	r6, [sp, #100]	; 0x64
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	e09f      	b.n	8005028 <_strtod_l+0x2e0>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e7c8      	b.n	8004e7e <_strtod_l+0x136>
 8004eec:	f1bb 0f08 	cmp.w	fp, #8
 8004ef0:	bfd5      	itete	le
 8004ef2:	9906      	ldrle	r1, [sp, #24]
 8004ef4:	9905      	ldrgt	r1, [sp, #20]
 8004ef6:	fb02 3301 	mlale	r3, r2, r1, r3
 8004efa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004efe:	f100 0001 	add.w	r0, r0, #1
 8004f02:	bfd4      	ite	le
 8004f04:	9306      	strle	r3, [sp, #24]
 8004f06:	9305      	strgt	r3, [sp, #20]
 8004f08:	f10b 0b01 	add.w	fp, fp, #1
 8004f0c:	9019      	str	r0, [sp, #100]	; 0x64
 8004f0e:	e7be      	b.n	8004e8e <_strtod_l+0x146>
 8004f10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f12:	191a      	adds	r2, r3, r4
 8004f14:	9219      	str	r2, [sp, #100]	; 0x64
 8004f16:	5d1a      	ldrb	r2, [r3, r4]
 8004f18:	f1bb 0f00 	cmp.w	fp, #0
 8004f1c:	d036      	beq.n	8004f8c <_strtod_l+0x244>
 8004f1e:	465c      	mov	r4, fp
 8004f20:	9004      	str	r0, [sp, #16]
 8004f22:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f26:	2b09      	cmp	r3, #9
 8004f28:	d912      	bls.n	8004f50 <_strtod_l+0x208>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7c1      	b.n	8004eb2 <_strtod_l+0x16a>
 8004f2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f30:	3001      	adds	r0, #1
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	9219      	str	r2, [sp, #100]	; 0x64
 8004f36:	785a      	ldrb	r2, [r3, #1]
 8004f38:	2a30      	cmp	r2, #48	; 0x30
 8004f3a:	d0f8      	beq.n	8004f2e <_strtod_l+0x1e6>
 8004f3c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	f200 84d5 	bhi.w	80058f0 <_strtod_l+0xba8>
 8004f46:	9004      	str	r0, [sp, #16]
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f4e:	9308      	str	r3, [sp, #32]
 8004f50:	3a30      	subs	r2, #48	; 0x30
 8004f52:	f100 0301 	add.w	r3, r0, #1
 8004f56:	d013      	beq.n	8004f80 <_strtod_l+0x238>
 8004f58:	9904      	ldr	r1, [sp, #16]
 8004f5a:	1905      	adds	r5, r0, r4
 8004f5c:	4419      	add	r1, r3
 8004f5e:	9104      	str	r1, [sp, #16]
 8004f60:	4623      	mov	r3, r4
 8004f62:	210a      	movs	r1, #10
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	d113      	bne.n	8004f90 <_strtod_l+0x248>
 8004f68:	1823      	adds	r3, r4, r0
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	f104 0401 	add.w	r4, r4, #1
 8004f70:	4404      	add	r4, r0
 8004f72:	dc1b      	bgt.n	8004fac <_strtod_l+0x264>
 8004f74:	230a      	movs	r3, #10
 8004f76:	9906      	ldr	r1, [sp, #24]
 8004f78:	fb03 2301 	mla	r3, r3, r1, r2
 8004f7c:	9306      	str	r3, [sp, #24]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f82:	4618      	mov	r0, r3
 8004f84:	1c51      	adds	r1, r2, #1
 8004f86:	9119      	str	r1, [sp, #100]	; 0x64
 8004f88:	7852      	ldrb	r2, [r2, #1]
 8004f8a:	e7ca      	b.n	8004f22 <_strtod_l+0x1da>
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	e7d3      	b.n	8004f38 <_strtod_l+0x1f0>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	dc04      	bgt.n	8004f9e <_strtod_l+0x256>
 8004f94:	9f06      	ldr	r7, [sp, #24]
 8004f96:	434f      	muls	r7, r1
 8004f98:	9706      	str	r7, [sp, #24]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	e7e2      	b.n	8004f64 <_strtod_l+0x21c>
 8004f9e:	1c5f      	adds	r7, r3, #1
 8004fa0:	2f10      	cmp	r7, #16
 8004fa2:	bfde      	ittt	le
 8004fa4:	9f05      	ldrle	r7, [sp, #20]
 8004fa6:	434f      	mulle	r7, r1
 8004fa8:	9705      	strle	r7, [sp, #20]
 8004faa:	e7f6      	b.n	8004f9a <_strtod_l+0x252>
 8004fac:	2c10      	cmp	r4, #16
 8004fae:	bfdf      	itttt	le
 8004fb0:	230a      	movle	r3, #10
 8004fb2:	9905      	ldrle	r1, [sp, #20]
 8004fb4:	fb03 2301 	mlale	r3, r3, r1, r2
 8004fb8:	9305      	strle	r3, [sp, #20]
 8004fba:	e7e0      	b.n	8004f7e <_strtod_l+0x236>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9304      	str	r3, [sp, #16]
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e77b      	b.n	8004ebc <_strtod_l+0x174>
 8004fc4:	2700      	movs	r7, #0
 8004fc6:	1cb2      	adds	r2, r6, #2
 8004fc8:	9219      	str	r2, [sp, #100]	; 0x64
 8004fca:	78b2      	ldrb	r2, [r6, #2]
 8004fcc:	e784      	b.n	8004ed8 <_strtod_l+0x190>
 8004fce:	bf00      	nop
 8004fd0:	08008a20 	.word	0x08008a20
 8004fd4:	08008854 	.word	0x08008854
 8004fd8:	7ff00000 	.word	0x7ff00000
 8004fdc:	2701      	movs	r7, #1
 8004fde:	e7f2      	b.n	8004fc6 <_strtod_l+0x27e>
 8004fe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004fe2:	1c51      	adds	r1, r2, #1
 8004fe4:	9119      	str	r1, [sp, #100]	; 0x64
 8004fe6:	7852      	ldrb	r2, [r2, #1]
 8004fe8:	2a30      	cmp	r2, #48	; 0x30
 8004fea:	d0f9      	beq.n	8004fe0 <_strtod_l+0x298>
 8004fec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ff0:	2908      	cmp	r1, #8
 8004ff2:	f63f af77 	bhi.w	8004ee4 <_strtod_l+0x19c>
 8004ff6:	f04f 0e0a 	mov.w	lr, #10
 8004ffa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004ffe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005000:	9209      	str	r2, [sp, #36]	; 0x24
 8005002:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005004:	1c51      	adds	r1, r2, #1
 8005006:	9119      	str	r1, [sp, #100]	; 0x64
 8005008:	7852      	ldrb	r2, [r2, #1]
 800500a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800500e:	2d09      	cmp	r5, #9
 8005010:	d935      	bls.n	800507e <_strtod_l+0x336>
 8005012:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005014:	1b49      	subs	r1, r1, r5
 8005016:	2908      	cmp	r1, #8
 8005018:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800501c:	dc02      	bgt.n	8005024 <_strtod_l+0x2dc>
 800501e:	4565      	cmp	r5, ip
 8005020:	bfa8      	it	ge
 8005022:	4665      	movge	r5, ip
 8005024:	b107      	cbz	r7, 8005028 <_strtod_l+0x2e0>
 8005026:	426d      	negs	r5, r5
 8005028:	2c00      	cmp	r4, #0
 800502a:	d14c      	bne.n	80050c6 <_strtod_l+0x37e>
 800502c:	9907      	ldr	r1, [sp, #28]
 800502e:	4301      	orrs	r1, r0
 8005030:	f47f aecb 	bne.w	8004dca <_strtod_l+0x82>
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f aee4 	bne.w	8004e02 <_strtod_l+0xba>
 800503a:	2a69      	cmp	r2, #105	; 0x69
 800503c:	d026      	beq.n	800508c <_strtod_l+0x344>
 800503e:	dc23      	bgt.n	8005088 <_strtod_l+0x340>
 8005040:	2a49      	cmp	r2, #73	; 0x49
 8005042:	d023      	beq.n	800508c <_strtod_l+0x344>
 8005044:	2a4e      	cmp	r2, #78	; 0x4e
 8005046:	f47f aedc 	bne.w	8004e02 <_strtod_l+0xba>
 800504a:	499d      	ldr	r1, [pc, #628]	; (80052c0 <_strtod_l+0x578>)
 800504c:	a819      	add	r0, sp, #100	; 0x64
 800504e:	f000 ffbf 	bl	8005fd0 <__match>
 8005052:	2800      	cmp	r0, #0
 8005054:	f43f aed5 	beq.w	8004e02 <_strtod_l+0xba>
 8005058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	d12c      	bne.n	80050ba <_strtod_l+0x372>
 8005060:	4998      	ldr	r1, [pc, #608]	; (80052c4 <_strtod_l+0x57c>)
 8005062:	aa1c      	add	r2, sp, #112	; 0x70
 8005064:	a819      	add	r0, sp, #100	; 0x64
 8005066:	f000 ffc7 	bl	8005ff8 <__hexnan>
 800506a:	2805      	cmp	r0, #5
 800506c:	d125      	bne.n	80050ba <_strtod_l+0x372>
 800506e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005070:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005074:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005078:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800507c:	e6a5      	b.n	8004dca <_strtod_l+0x82>
 800507e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005082:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005086:	e7bc      	b.n	8005002 <_strtod_l+0x2ba>
 8005088:	2a6e      	cmp	r2, #110	; 0x6e
 800508a:	e7dc      	b.n	8005046 <_strtod_l+0x2fe>
 800508c:	498e      	ldr	r1, [pc, #568]	; (80052c8 <_strtod_l+0x580>)
 800508e:	a819      	add	r0, sp, #100	; 0x64
 8005090:	f000 ff9e 	bl	8005fd0 <__match>
 8005094:	2800      	cmp	r0, #0
 8005096:	f43f aeb4 	beq.w	8004e02 <_strtod_l+0xba>
 800509a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800509c:	498b      	ldr	r1, [pc, #556]	; (80052cc <_strtod_l+0x584>)
 800509e:	3b01      	subs	r3, #1
 80050a0:	a819      	add	r0, sp, #100	; 0x64
 80050a2:	9319      	str	r3, [sp, #100]	; 0x64
 80050a4:	f000 ff94 	bl	8005fd0 <__match>
 80050a8:	b910      	cbnz	r0, 80050b0 <_strtod_l+0x368>
 80050aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050ac:	3301      	adds	r3, #1
 80050ae:	9319      	str	r3, [sp, #100]	; 0x64
 80050b0:	f04f 0800 	mov.w	r8, #0
 80050b4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80052d0 <_strtod_l+0x588>
 80050b8:	e687      	b.n	8004dca <_strtod_l+0x82>
 80050ba:	4886      	ldr	r0, [pc, #536]	; (80052d4 <_strtod_l+0x58c>)
 80050bc:	f002 fbe6 	bl	800788c <nan>
 80050c0:	4680      	mov	r8, r0
 80050c2:	4689      	mov	r9, r1
 80050c4:	e681      	b.n	8004dca <_strtod_l+0x82>
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	f1bb 0f00 	cmp.w	fp, #0
 80050cc:	bf08      	it	eq
 80050ce:	46a3      	moveq	fp, r4
 80050d0:	1aeb      	subs	r3, r5, r3
 80050d2:	2c10      	cmp	r4, #16
 80050d4:	9806      	ldr	r0, [sp, #24]
 80050d6:	4626      	mov	r6, r4
 80050d8:	9307      	str	r3, [sp, #28]
 80050da:	bfa8      	it	ge
 80050dc:	2610      	movge	r6, #16
 80050de:	f7fb f98b 	bl	80003f8 <__aeabi_ui2d>
 80050e2:	2c09      	cmp	r4, #9
 80050e4:	4680      	mov	r8, r0
 80050e6:	4689      	mov	r9, r1
 80050e8:	dd13      	ble.n	8005112 <_strtod_l+0x3ca>
 80050ea:	4b7b      	ldr	r3, [pc, #492]	; (80052d8 <_strtod_l+0x590>)
 80050ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80050f4:	f7fb f9fa 	bl	80004ec <__aeabi_dmul>
 80050f8:	4680      	mov	r8, r0
 80050fa:	9805      	ldr	r0, [sp, #20]
 80050fc:	4689      	mov	r9, r1
 80050fe:	f7fb f97b 	bl	80003f8 <__aeabi_ui2d>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f7fb f839 	bl	8000180 <__adddf3>
 800510e:	4680      	mov	r8, r0
 8005110:	4689      	mov	r9, r1
 8005112:	2c0f      	cmp	r4, #15
 8005114:	dc36      	bgt.n	8005184 <_strtod_l+0x43c>
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f43f ae56 	beq.w	8004dca <_strtod_l+0x82>
 800511e:	dd22      	ble.n	8005166 <_strtod_l+0x41e>
 8005120:	2b16      	cmp	r3, #22
 8005122:	dc09      	bgt.n	8005138 <_strtod_l+0x3f0>
 8005124:	496c      	ldr	r1, [pc, #432]	; (80052d8 <_strtod_l+0x590>)
 8005126:	4642      	mov	r2, r8
 8005128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800512c:	464b      	mov	r3, r9
 800512e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005132:	f7fb f9db 	bl	80004ec <__aeabi_dmul>
 8005136:	e7c3      	b.n	80050c0 <_strtod_l+0x378>
 8005138:	9a07      	ldr	r2, [sp, #28]
 800513a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800513e:	4293      	cmp	r3, r2
 8005140:	db20      	blt.n	8005184 <_strtod_l+0x43c>
 8005142:	4d65      	ldr	r5, [pc, #404]	; (80052d8 <_strtod_l+0x590>)
 8005144:	f1c4 040f 	rsb	r4, r4, #15
 8005148:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800514c:	4642      	mov	r2, r8
 800514e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005152:	464b      	mov	r3, r9
 8005154:	f7fb f9ca 	bl	80004ec <__aeabi_dmul>
 8005158:	9b07      	ldr	r3, [sp, #28]
 800515a:	1b1c      	subs	r4, r3, r4
 800515c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005160:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005164:	e7e5      	b.n	8005132 <_strtod_l+0x3ea>
 8005166:	9b07      	ldr	r3, [sp, #28]
 8005168:	3316      	adds	r3, #22
 800516a:	db0b      	blt.n	8005184 <_strtod_l+0x43c>
 800516c:	9b04      	ldr	r3, [sp, #16]
 800516e:	4640      	mov	r0, r8
 8005170:	1b5d      	subs	r5, r3, r5
 8005172:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <_strtod_l+0x590>)
 8005174:	4649      	mov	r1, r9
 8005176:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800517a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800517e:	f7fb fadf 	bl	8000740 <__aeabi_ddiv>
 8005182:	e79d      	b.n	80050c0 <_strtod_l+0x378>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	1ba6      	subs	r6, r4, r6
 8005188:	441e      	add	r6, r3
 800518a:	2e00      	cmp	r6, #0
 800518c:	dd74      	ble.n	8005278 <_strtod_l+0x530>
 800518e:	f016 030f 	ands.w	r3, r6, #15
 8005192:	d00a      	beq.n	80051aa <_strtod_l+0x462>
 8005194:	4950      	ldr	r1, [pc, #320]	; (80052d8 <_strtod_l+0x590>)
 8005196:	4642      	mov	r2, r8
 8005198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800519c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a0:	464b      	mov	r3, r9
 80051a2:	f7fb f9a3 	bl	80004ec <__aeabi_dmul>
 80051a6:	4680      	mov	r8, r0
 80051a8:	4689      	mov	r9, r1
 80051aa:	f036 060f 	bics.w	r6, r6, #15
 80051ae:	d052      	beq.n	8005256 <_strtod_l+0x50e>
 80051b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80051b4:	dd27      	ble.n	8005206 <_strtod_l+0x4be>
 80051b6:	f04f 0b00 	mov.w	fp, #0
 80051ba:	f8cd b010 	str.w	fp, [sp, #16]
 80051be:	f8cd b020 	str.w	fp, [sp, #32]
 80051c2:	f8cd b018 	str.w	fp, [sp, #24]
 80051c6:	2322      	movs	r3, #34	; 0x22
 80051c8:	f04f 0800 	mov.w	r8, #0
 80051cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80052d0 <_strtod_l+0x588>
 80051d0:	f8ca 3000 	str.w	r3, [sl]
 80051d4:	9b08      	ldr	r3, [sp, #32]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f43f adf7 	beq.w	8004dca <_strtod_l+0x82>
 80051dc:	4650      	mov	r0, sl
 80051de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051e0:	f001 f80a 	bl	80061f8 <_Bfree>
 80051e4:	4650      	mov	r0, sl
 80051e6:	9906      	ldr	r1, [sp, #24]
 80051e8:	f001 f806 	bl	80061f8 <_Bfree>
 80051ec:	4650      	mov	r0, sl
 80051ee:	9904      	ldr	r1, [sp, #16]
 80051f0:	f001 f802 	bl	80061f8 <_Bfree>
 80051f4:	4650      	mov	r0, sl
 80051f6:	9908      	ldr	r1, [sp, #32]
 80051f8:	f000 fffe 	bl	80061f8 <_Bfree>
 80051fc:	4659      	mov	r1, fp
 80051fe:	4650      	mov	r0, sl
 8005200:	f000 fffa 	bl	80061f8 <_Bfree>
 8005204:	e5e1      	b.n	8004dca <_strtod_l+0x82>
 8005206:	4b35      	ldr	r3, [pc, #212]	; (80052dc <_strtod_l+0x594>)
 8005208:	4640      	mov	r0, r8
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	2300      	movs	r3, #0
 800520e:	4649      	mov	r1, r9
 8005210:	461f      	mov	r7, r3
 8005212:	1136      	asrs	r6, r6, #4
 8005214:	2e01      	cmp	r6, #1
 8005216:	dc21      	bgt.n	800525c <_strtod_l+0x514>
 8005218:	b10b      	cbz	r3, 800521e <_strtod_l+0x4d6>
 800521a:	4680      	mov	r8, r0
 800521c:	4689      	mov	r9, r1
 800521e:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <_strtod_l+0x594>)
 8005220:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005224:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005228:	4642      	mov	r2, r8
 800522a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800522e:	464b      	mov	r3, r9
 8005230:	f7fb f95c 	bl	80004ec <__aeabi_dmul>
 8005234:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <_strtod_l+0x588>)
 8005236:	460a      	mov	r2, r1
 8005238:	400b      	ands	r3, r1
 800523a:	4929      	ldr	r1, [pc, #164]	; (80052e0 <_strtod_l+0x598>)
 800523c:	4680      	mov	r8, r0
 800523e:	428b      	cmp	r3, r1
 8005240:	d8b9      	bhi.n	80051b6 <_strtod_l+0x46e>
 8005242:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005246:	428b      	cmp	r3, r1
 8005248:	bf86      	itte	hi
 800524a:	f04f 38ff 	movhi.w	r8, #4294967295
 800524e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80052e4 <_strtod_l+0x59c>
 8005252:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005256:	2300      	movs	r3, #0
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	e07f      	b.n	800535c <_strtod_l+0x614>
 800525c:	07f2      	lsls	r2, r6, #31
 800525e:	d505      	bpl.n	800526c <_strtod_l+0x524>
 8005260:	9b05      	ldr	r3, [sp, #20]
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f941 	bl	80004ec <__aeabi_dmul>
 800526a:	2301      	movs	r3, #1
 800526c:	9a05      	ldr	r2, [sp, #20]
 800526e:	3701      	adds	r7, #1
 8005270:	3208      	adds	r2, #8
 8005272:	1076      	asrs	r6, r6, #1
 8005274:	9205      	str	r2, [sp, #20]
 8005276:	e7cd      	b.n	8005214 <_strtod_l+0x4cc>
 8005278:	d0ed      	beq.n	8005256 <_strtod_l+0x50e>
 800527a:	4276      	negs	r6, r6
 800527c:	f016 020f 	ands.w	r2, r6, #15
 8005280:	d00a      	beq.n	8005298 <_strtod_l+0x550>
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <_strtod_l+0x590>)
 8005284:	4640      	mov	r0, r8
 8005286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800528a:	4649      	mov	r1, r9
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb fa56 	bl	8000740 <__aeabi_ddiv>
 8005294:	4680      	mov	r8, r0
 8005296:	4689      	mov	r9, r1
 8005298:	1136      	asrs	r6, r6, #4
 800529a:	d0dc      	beq.n	8005256 <_strtod_l+0x50e>
 800529c:	2e1f      	cmp	r6, #31
 800529e:	dd23      	ble.n	80052e8 <_strtod_l+0x5a0>
 80052a0:	f04f 0b00 	mov.w	fp, #0
 80052a4:	f8cd b010 	str.w	fp, [sp, #16]
 80052a8:	f8cd b020 	str.w	fp, [sp, #32]
 80052ac:	f8cd b018 	str.w	fp, [sp, #24]
 80052b0:	2322      	movs	r3, #34	; 0x22
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	f04f 0900 	mov.w	r9, #0
 80052ba:	f8ca 3000 	str.w	r3, [sl]
 80052be:	e789      	b.n	80051d4 <_strtod_l+0x48c>
 80052c0:	0800884e 	.word	0x0800884e
 80052c4:	08008868 	.word	0x08008868
 80052c8:	08008845 	.word	0x08008845
 80052cc:	08008848 	.word	0x08008848
 80052d0:	7ff00000 	.word	0x7ff00000
 80052d4:	08008c2d 	.word	0x08008c2d
 80052d8:	08008ad0 	.word	0x08008ad0
 80052dc:	08008aa8 	.word	0x08008aa8
 80052e0:	7ca00000 	.word	0x7ca00000
 80052e4:	7fefffff 	.word	0x7fefffff
 80052e8:	f016 0310 	ands.w	r3, r6, #16
 80052ec:	bf18      	it	ne
 80052ee:	236a      	movne	r3, #106	; 0x6a
 80052f0:	4640      	mov	r0, r8
 80052f2:	9305      	str	r3, [sp, #20]
 80052f4:	4649      	mov	r1, r9
 80052f6:	2300      	movs	r3, #0
 80052f8:	4fb0      	ldr	r7, [pc, #704]	; (80055bc <_strtod_l+0x874>)
 80052fa:	07f2      	lsls	r2, r6, #31
 80052fc:	d504      	bpl.n	8005308 <_strtod_l+0x5c0>
 80052fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005302:	f7fb f8f3 	bl	80004ec <__aeabi_dmul>
 8005306:	2301      	movs	r3, #1
 8005308:	1076      	asrs	r6, r6, #1
 800530a:	f107 0708 	add.w	r7, r7, #8
 800530e:	d1f4      	bne.n	80052fa <_strtod_l+0x5b2>
 8005310:	b10b      	cbz	r3, 8005316 <_strtod_l+0x5ce>
 8005312:	4680      	mov	r8, r0
 8005314:	4689      	mov	r9, r1
 8005316:	9b05      	ldr	r3, [sp, #20]
 8005318:	b1c3      	cbz	r3, 800534c <_strtod_l+0x604>
 800531a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800531e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005322:	2b00      	cmp	r3, #0
 8005324:	4649      	mov	r1, r9
 8005326:	dd11      	ble.n	800534c <_strtod_l+0x604>
 8005328:	2b1f      	cmp	r3, #31
 800532a:	f340 8127 	ble.w	800557c <_strtod_l+0x834>
 800532e:	2b34      	cmp	r3, #52	; 0x34
 8005330:	bfd8      	it	le
 8005332:	f04f 33ff 	movle.w	r3, #4294967295
 8005336:	f04f 0800 	mov.w	r8, #0
 800533a:	bfcf      	iteee	gt
 800533c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005340:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005344:	fa03 f202 	lslle.w	r2, r3, r2
 8005348:	ea02 0901 	andle.w	r9, r2, r1
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4640      	mov	r0, r8
 8005352:	4649      	mov	r1, r9
 8005354:	f7fb fb32 	bl	80009bc <__aeabi_dcmpeq>
 8005358:	2800      	cmp	r0, #0
 800535a:	d1a1      	bne.n	80052a0 <_strtod_l+0x558>
 800535c:	9b06      	ldr	r3, [sp, #24]
 800535e:	465a      	mov	r2, fp
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4650      	mov	r0, sl
 8005364:	4623      	mov	r3, r4
 8005366:	9908      	ldr	r1, [sp, #32]
 8005368:	f000 ffae 	bl	80062c8 <__s2b>
 800536c:	9008      	str	r0, [sp, #32]
 800536e:	2800      	cmp	r0, #0
 8005370:	f43f af21 	beq.w	80051b6 <_strtod_l+0x46e>
 8005374:	9b04      	ldr	r3, [sp, #16]
 8005376:	f04f 0b00 	mov.w	fp, #0
 800537a:	1b5d      	subs	r5, r3, r5
 800537c:	9b07      	ldr	r3, [sp, #28]
 800537e:	f8cd b010 	str.w	fp, [sp, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfb4      	ite	lt
 8005386:	462b      	movlt	r3, r5
 8005388:	2300      	movge	r3, #0
 800538a:	930e      	str	r3, [sp, #56]	; 0x38
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005392:	9314      	str	r3, [sp, #80]	; 0x50
 8005394:	9b08      	ldr	r3, [sp, #32]
 8005396:	4650      	mov	r0, sl
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	f000 feed 	bl	8006178 <_Balloc>
 800539e:	9006      	str	r0, [sp, #24]
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f43f af10 	beq.w	80051c6 <_strtod_l+0x47e>
 80053a6:	9b08      	ldr	r3, [sp, #32]
 80053a8:	300c      	adds	r0, #12
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	f103 010c 	add.w	r1, r3, #12
 80053b0:	3202      	adds	r2, #2
 80053b2:	0092      	lsls	r2, r2, #2
 80053b4:	f7ff f9dc 	bl	8004770 <memcpy>
 80053b8:	ab1c      	add	r3, sp, #112	; 0x70
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	4650      	mov	r0, sl
 80053c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80053ca:	f001 fabf 	bl	800694c <__d2b>
 80053ce:	901a      	str	r0, [sp, #104]	; 0x68
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f43f aef8 	beq.w	80051c6 <_strtod_l+0x47e>
 80053d6:	2101      	movs	r1, #1
 80053d8:	4650      	mov	r0, sl
 80053da:	f001 f80d 	bl	80063f8 <__i2b>
 80053de:	4603      	mov	r3, r0
 80053e0:	9004      	str	r0, [sp, #16]
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f43f aeef 	beq.w	80051c6 <_strtod_l+0x47e>
 80053e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	bfab      	itete	ge
 80053f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80053f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80053f4:	18ee      	addge	r6, r5, r3
 80053f6:	1b5c      	sublt	r4, r3, r5
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	bfa8      	it	ge
 80053fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80053fe:	eba5 0503 	sub.w	r5, r5, r3
 8005402:	4415      	add	r5, r2
 8005404:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <_strtod_l+0x878>)
 8005406:	f105 35ff 	add.w	r5, r5, #4294967295
 800540a:	bfb8      	it	lt
 800540c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800540e:	429d      	cmp	r5, r3
 8005410:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005414:	f280 80c4 	bge.w	80055a0 <_strtod_l+0x858>
 8005418:	1b5b      	subs	r3, r3, r5
 800541a:	2b1f      	cmp	r3, #31
 800541c:	f04f 0701 	mov.w	r7, #1
 8005420:	eba2 0203 	sub.w	r2, r2, r3
 8005424:	f300 80b1 	bgt.w	800558a <_strtod_l+0x842>
 8005428:	2500      	movs	r5, #0
 800542a:	fa07 f303 	lsl.w	r3, r7, r3
 800542e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005430:	18b7      	adds	r7, r6, r2
 8005432:	9b05      	ldr	r3, [sp, #20]
 8005434:	42be      	cmp	r6, r7
 8005436:	4414      	add	r4, r2
 8005438:	441c      	add	r4, r3
 800543a:	4633      	mov	r3, r6
 800543c:	bfa8      	it	ge
 800543e:	463b      	movge	r3, r7
 8005440:	42a3      	cmp	r3, r4
 8005442:	bfa8      	it	ge
 8005444:	4623      	movge	r3, r4
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfc2      	ittt	gt
 800544a:	1aff      	subgt	r7, r7, r3
 800544c:	1ae4      	subgt	r4, r4, r3
 800544e:	1af6      	subgt	r6, r6, r3
 8005450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	dd17      	ble.n	8005486 <_strtod_l+0x73e>
 8005456:	461a      	mov	r2, r3
 8005458:	4650      	mov	r0, sl
 800545a:	9904      	ldr	r1, [sp, #16]
 800545c:	f001 f88a 	bl	8006574 <__pow5mult>
 8005460:	9004      	str	r0, [sp, #16]
 8005462:	2800      	cmp	r0, #0
 8005464:	f43f aeaf 	beq.w	80051c6 <_strtod_l+0x47e>
 8005468:	4601      	mov	r1, r0
 800546a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800546c:	4650      	mov	r0, sl
 800546e:	f000 ffd9 	bl	8006424 <__multiply>
 8005472:	9009      	str	r0, [sp, #36]	; 0x24
 8005474:	2800      	cmp	r0, #0
 8005476:	f43f aea6 	beq.w	80051c6 <_strtod_l+0x47e>
 800547a:	4650      	mov	r0, sl
 800547c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800547e:	f000 febb 	bl	80061f8 <_Bfree>
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	931a      	str	r3, [sp, #104]	; 0x68
 8005486:	2f00      	cmp	r7, #0
 8005488:	f300 808e 	bgt.w	80055a8 <_strtod_l+0x860>
 800548c:	9b07      	ldr	r3, [sp, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd08      	ble.n	80054a4 <_strtod_l+0x75c>
 8005492:	4650      	mov	r0, sl
 8005494:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005496:	9906      	ldr	r1, [sp, #24]
 8005498:	f001 f86c 	bl	8006574 <__pow5mult>
 800549c:	9006      	str	r0, [sp, #24]
 800549e:	2800      	cmp	r0, #0
 80054a0:	f43f ae91 	beq.w	80051c6 <_strtod_l+0x47e>
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	dd08      	ble.n	80054ba <_strtod_l+0x772>
 80054a8:	4622      	mov	r2, r4
 80054aa:	4650      	mov	r0, sl
 80054ac:	9906      	ldr	r1, [sp, #24]
 80054ae:	f001 f8bb 	bl	8006628 <__lshift>
 80054b2:	9006      	str	r0, [sp, #24]
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f43f ae86 	beq.w	80051c6 <_strtod_l+0x47e>
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	dd08      	ble.n	80054d0 <_strtod_l+0x788>
 80054be:	4632      	mov	r2, r6
 80054c0:	4650      	mov	r0, sl
 80054c2:	9904      	ldr	r1, [sp, #16]
 80054c4:	f001 f8b0 	bl	8006628 <__lshift>
 80054c8:	9004      	str	r0, [sp, #16]
 80054ca:	2800      	cmp	r0, #0
 80054cc:	f43f ae7b 	beq.w	80051c6 <_strtod_l+0x47e>
 80054d0:	4650      	mov	r0, sl
 80054d2:	9a06      	ldr	r2, [sp, #24]
 80054d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054d6:	f001 f933 	bl	8006740 <__mdiff>
 80054da:	4683      	mov	fp, r0
 80054dc:	2800      	cmp	r0, #0
 80054de:	f43f ae72 	beq.w	80051c6 <_strtod_l+0x47e>
 80054e2:	2400      	movs	r4, #0
 80054e4:	68c3      	ldr	r3, [r0, #12]
 80054e6:	9904      	ldr	r1, [sp, #16]
 80054e8:	60c4      	str	r4, [r0, #12]
 80054ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ec:	f001 f90c 	bl	8006708 <__mcmp>
 80054f0:	42a0      	cmp	r0, r4
 80054f2:	da6b      	bge.n	80055cc <_strtod_l+0x884>
 80054f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f6:	ea53 0308 	orrs.w	r3, r3, r8
 80054fa:	f040 8091 	bne.w	8005620 <_strtod_l+0x8d8>
 80054fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 808c 	bne.w	8005620 <_strtod_l+0x8d8>
 8005508:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800550c:	0d1b      	lsrs	r3, r3, #20
 800550e:	051b      	lsls	r3, r3, #20
 8005510:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005514:	f240 8084 	bls.w	8005620 <_strtod_l+0x8d8>
 8005518:	f8db 3014 	ldr.w	r3, [fp, #20]
 800551c:	b91b      	cbnz	r3, 8005526 <_strtod_l+0x7de>
 800551e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005522:	2b01      	cmp	r3, #1
 8005524:	dd7c      	ble.n	8005620 <_strtod_l+0x8d8>
 8005526:	4659      	mov	r1, fp
 8005528:	2201      	movs	r2, #1
 800552a:	4650      	mov	r0, sl
 800552c:	f001 f87c 	bl	8006628 <__lshift>
 8005530:	9904      	ldr	r1, [sp, #16]
 8005532:	4683      	mov	fp, r0
 8005534:	f001 f8e8 	bl	8006708 <__mcmp>
 8005538:	2800      	cmp	r0, #0
 800553a:	dd71      	ble.n	8005620 <_strtod_l+0x8d8>
 800553c:	9905      	ldr	r1, [sp, #20]
 800553e:	464b      	mov	r3, r9
 8005540:	4a20      	ldr	r2, [pc, #128]	; (80055c4 <_strtod_l+0x87c>)
 8005542:	2900      	cmp	r1, #0
 8005544:	f000 808c 	beq.w	8005660 <_strtod_l+0x918>
 8005548:	ea02 0109 	and.w	r1, r2, r9
 800554c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005550:	f300 8086 	bgt.w	8005660 <_strtod_l+0x918>
 8005554:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005558:	f77f aeaa 	ble.w	80052b0 <_strtod_l+0x568>
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <_strtod_l+0x880>)
 8005562:	2200      	movs	r2, #0
 8005564:	f7fa ffc2 	bl	80004ec <__aeabi_dmul>
 8005568:	460b      	mov	r3, r1
 800556a:	4303      	orrs	r3, r0
 800556c:	bf08      	it	eq
 800556e:	2322      	moveq	r3, #34	; 0x22
 8005570:	4680      	mov	r8, r0
 8005572:	4689      	mov	r9, r1
 8005574:	bf08      	it	eq
 8005576:	f8ca 3000 	streq.w	r3, [sl]
 800557a:	e62f      	b.n	80051dc <_strtod_l+0x494>
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	ea03 0808 	and.w	r8, r3, r8
 8005588:	e6e0      	b.n	800534c <_strtod_l+0x604>
 800558a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800558e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005592:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005596:	35e2      	adds	r5, #226	; 0xe2
 8005598:	fa07 f505 	lsl.w	r5, r7, r5
 800559c:	970f      	str	r7, [sp, #60]	; 0x3c
 800559e:	e747      	b.n	8005430 <_strtod_l+0x6e8>
 80055a0:	2301      	movs	r3, #1
 80055a2:	2500      	movs	r5, #0
 80055a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055a6:	e743      	b.n	8005430 <_strtod_l+0x6e8>
 80055a8:	463a      	mov	r2, r7
 80055aa:	4650      	mov	r0, sl
 80055ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055ae:	f001 f83b 	bl	8006628 <__lshift>
 80055b2:	901a      	str	r0, [sp, #104]	; 0x68
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f47f af69 	bne.w	800548c <_strtod_l+0x744>
 80055ba:	e604      	b.n	80051c6 <_strtod_l+0x47e>
 80055bc:	08008880 	.word	0x08008880
 80055c0:	fffffc02 	.word	0xfffffc02
 80055c4:	7ff00000 	.word	0x7ff00000
 80055c8:	39500000 	.word	0x39500000
 80055cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80055d0:	d165      	bne.n	800569e <_strtod_l+0x956>
 80055d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055d8:	b35a      	cbz	r2, 8005632 <_strtod_l+0x8ea>
 80055da:	4a99      	ldr	r2, [pc, #612]	; (8005840 <_strtod_l+0xaf8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d12b      	bne.n	8005638 <_strtod_l+0x8f0>
 80055e0:	9b05      	ldr	r3, [sp, #20]
 80055e2:	4641      	mov	r1, r8
 80055e4:	b303      	cbz	r3, 8005628 <_strtod_l+0x8e0>
 80055e6:	464a      	mov	r2, r9
 80055e8:	4b96      	ldr	r3, [pc, #600]	; (8005844 <_strtod_l+0xafc>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	d81b      	bhi.n	800562e <_strtod_l+0x8e6>
 80055f6:	0d1b      	lsrs	r3, r3, #20
 80055f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	4299      	cmp	r1, r3
 8005602:	d119      	bne.n	8005638 <_strtod_l+0x8f0>
 8005604:	4b90      	ldr	r3, [pc, #576]	; (8005848 <_strtod_l+0xb00>)
 8005606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005608:	429a      	cmp	r2, r3
 800560a:	d102      	bne.n	8005612 <_strtod_l+0x8ca>
 800560c:	3101      	adds	r1, #1
 800560e:	f43f adda 	beq.w	80051c6 <_strtod_l+0x47e>
 8005612:	f04f 0800 	mov.w	r8, #0
 8005616:	4b8b      	ldr	r3, [pc, #556]	; (8005844 <_strtod_l+0xafc>)
 8005618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800561a:	401a      	ands	r2, r3
 800561c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005620:	9b05      	ldr	r3, [sp, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d19a      	bne.n	800555c <_strtod_l+0x814>
 8005626:	e5d9      	b.n	80051dc <_strtod_l+0x494>
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	e7e8      	b.n	8005600 <_strtod_l+0x8b8>
 800562e:	4613      	mov	r3, r2
 8005630:	e7e6      	b.n	8005600 <_strtod_l+0x8b8>
 8005632:	ea53 0308 	orrs.w	r3, r3, r8
 8005636:	d081      	beq.n	800553c <_strtod_l+0x7f4>
 8005638:	b1e5      	cbz	r5, 8005674 <_strtod_l+0x92c>
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	421d      	tst	r5, r3
 800563e:	d0ef      	beq.n	8005620 <_strtod_l+0x8d8>
 8005640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005642:	4640      	mov	r0, r8
 8005644:	4649      	mov	r1, r9
 8005646:	9a05      	ldr	r2, [sp, #20]
 8005648:	b1c3      	cbz	r3, 800567c <_strtod_l+0x934>
 800564a:	f7ff fb5c 	bl	8004d06 <sulp>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005656:	f7fa fd93 	bl	8000180 <__adddf3>
 800565a:	4680      	mov	r8, r0
 800565c:	4689      	mov	r9, r1
 800565e:	e7df      	b.n	8005620 <_strtod_l+0x8d8>
 8005660:	4013      	ands	r3, r2
 8005662:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005666:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800566a:	f04f 38ff 	mov.w	r8, #4294967295
 800566e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005672:	e7d5      	b.n	8005620 <_strtod_l+0x8d8>
 8005674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005676:	ea13 0f08 	tst.w	r3, r8
 800567a:	e7e0      	b.n	800563e <_strtod_l+0x8f6>
 800567c:	f7ff fb43 	bl	8004d06 <sulp>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005688:	f7fa fd78 	bl	800017c <__aeabi_dsub>
 800568c:	2200      	movs	r2, #0
 800568e:	2300      	movs	r3, #0
 8005690:	4680      	mov	r8, r0
 8005692:	4689      	mov	r9, r1
 8005694:	f7fb f992 	bl	80009bc <__aeabi_dcmpeq>
 8005698:	2800      	cmp	r0, #0
 800569a:	d0c1      	beq.n	8005620 <_strtod_l+0x8d8>
 800569c:	e608      	b.n	80052b0 <_strtod_l+0x568>
 800569e:	4658      	mov	r0, fp
 80056a0:	9904      	ldr	r1, [sp, #16]
 80056a2:	f001 f9af 	bl	8006a04 <__ratio>
 80056a6:	2200      	movs	r2, #0
 80056a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ac:	4606      	mov	r6, r0
 80056ae:	460f      	mov	r7, r1
 80056b0:	f7fb f998 	bl	80009e4 <__aeabi_dcmple>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d070      	beq.n	800579a <_strtod_l+0xa52>
 80056b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d042      	beq.n	8005744 <_strtod_l+0x9fc>
 80056be:	2600      	movs	r6, #0
 80056c0:	4f62      	ldr	r7, [pc, #392]	; (800584c <_strtod_l+0xb04>)
 80056c2:	4d62      	ldr	r5, [pc, #392]	; (800584c <_strtod_l+0xb04>)
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	0d1b      	lsrs	r3, r3, #20
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80056d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056d2:	4b5f      	ldr	r3, [pc, #380]	; (8005850 <_strtod_l+0xb08>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	f040 80c3 	bne.w	8005860 <_strtod_l+0xb18>
 80056da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056dc:	4640      	mov	r0, r8
 80056de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80056e2:	4649      	mov	r1, r9
 80056e4:	f001 f8b8 	bl	8006858 <__ulp>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4630      	mov	r0, r6
 80056ee:	4639      	mov	r1, r7
 80056f0:	f7fa fefc 	bl	80004ec <__aeabi_dmul>
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	f7fa fd42 	bl	8000180 <__adddf3>
 80056fc:	460b      	mov	r3, r1
 80056fe:	4951      	ldr	r1, [pc, #324]	; (8005844 <_strtod_l+0xafc>)
 8005700:	4a54      	ldr	r2, [pc, #336]	; (8005854 <_strtod_l+0xb0c>)
 8005702:	4019      	ands	r1, r3
 8005704:	4291      	cmp	r1, r2
 8005706:	4680      	mov	r8, r0
 8005708:	d95d      	bls.n	80057c6 <_strtod_l+0xa7e>
 800570a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800570c:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <_strtod_l+0xb00>)
 800570e:	429a      	cmp	r2, r3
 8005710:	d103      	bne.n	800571a <_strtod_l+0x9d2>
 8005712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005714:	3301      	adds	r3, #1
 8005716:	f43f ad56 	beq.w	80051c6 <_strtod_l+0x47e>
 800571a:	f04f 38ff 	mov.w	r8, #4294967295
 800571e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005848 <_strtod_l+0xb00>
 8005722:	4650      	mov	r0, sl
 8005724:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005726:	f000 fd67 	bl	80061f8 <_Bfree>
 800572a:	4650      	mov	r0, sl
 800572c:	9906      	ldr	r1, [sp, #24]
 800572e:	f000 fd63 	bl	80061f8 <_Bfree>
 8005732:	4650      	mov	r0, sl
 8005734:	9904      	ldr	r1, [sp, #16]
 8005736:	f000 fd5f 	bl	80061f8 <_Bfree>
 800573a:	4659      	mov	r1, fp
 800573c:	4650      	mov	r0, sl
 800573e:	f000 fd5b 	bl	80061f8 <_Bfree>
 8005742:	e627      	b.n	8005394 <_strtod_l+0x64c>
 8005744:	f1b8 0f00 	cmp.w	r8, #0
 8005748:	d119      	bne.n	800577e <_strtod_l+0xa36>
 800574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005750:	b9e3      	cbnz	r3, 800578c <_strtod_l+0xa44>
 8005752:	2200      	movs	r2, #0
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	4b3c      	ldr	r3, [pc, #240]	; (800584c <_strtod_l+0xb04>)
 800575a:	f7fb f939 	bl	80009d0 <__aeabi_dcmplt>
 800575e:	b9c8      	cbnz	r0, 8005794 <_strtod_l+0xa4c>
 8005760:	2200      	movs	r2, #0
 8005762:	4630      	mov	r0, r6
 8005764:	4639      	mov	r1, r7
 8005766:	4b3c      	ldr	r3, [pc, #240]	; (8005858 <_strtod_l+0xb10>)
 8005768:	f7fa fec0 	bl	80004ec <__aeabi_dmul>
 800576c:	4604      	mov	r4, r0
 800576e:	460d      	mov	r5, r1
 8005770:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005774:	9416      	str	r4, [sp, #88]	; 0x58
 8005776:	9317      	str	r3, [sp, #92]	; 0x5c
 8005778:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800577c:	e7a2      	b.n	80056c4 <_strtod_l+0x97c>
 800577e:	f1b8 0f01 	cmp.w	r8, #1
 8005782:	d103      	bne.n	800578c <_strtod_l+0xa44>
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	f43f ad92 	beq.w	80052b0 <_strtod_l+0x568>
 800578c:	2600      	movs	r6, #0
 800578e:	2400      	movs	r4, #0
 8005790:	4f32      	ldr	r7, [pc, #200]	; (800585c <_strtod_l+0xb14>)
 8005792:	e796      	b.n	80056c2 <_strtod_l+0x97a>
 8005794:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005796:	4d30      	ldr	r5, [pc, #192]	; (8005858 <_strtod_l+0xb10>)
 8005798:	e7ea      	b.n	8005770 <_strtod_l+0xa28>
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <_strtod_l+0xb10>)
 800579c:	2200      	movs	r2, #0
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fa fea3 	bl	80004ec <__aeabi_dmul>
 80057a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	b933      	cbnz	r3, 80057bc <_strtod_l+0xa74>
 80057ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057b2:	9010      	str	r0, [sp, #64]	; 0x40
 80057b4:	9311      	str	r3, [sp, #68]	; 0x44
 80057b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057ba:	e783      	b.n	80056c4 <_strtod_l+0x97c>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80057c4:	e7f7      	b.n	80057b6 <_strtod_l+0xa6e>
 80057c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80057ca:	9b05      	ldr	r3, [sp, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1a8      	bne.n	8005722 <_strtod_l+0x9da>
 80057d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057d6:	0d1b      	lsrs	r3, r3, #20
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	429a      	cmp	r2, r3
 80057dc:	d1a1      	bne.n	8005722 <_strtod_l+0x9da>
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb fc47 	bl	8001074 <__aeabi_d2lz>
 80057e6:	f7fa fe53 	bl	8000490 <__aeabi_l2d>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4620      	mov	r0, r4
 80057f0:	4629      	mov	r1, r5
 80057f2:	f7fa fcc3 	bl	800017c <__aeabi_dsub>
 80057f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057fc:	ea43 0308 	orr.w	r3, r3, r8
 8005800:	4313      	orrs	r3, r2
 8005802:	4604      	mov	r4, r0
 8005804:	460d      	mov	r5, r1
 8005806:	d066      	beq.n	80058d6 <_strtod_l+0xb8e>
 8005808:	a309      	add	r3, pc, #36	; (adr r3, 8005830 <_strtod_l+0xae8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fb f8df 	bl	80009d0 <__aeabi_dcmplt>
 8005812:	2800      	cmp	r0, #0
 8005814:	f47f ace2 	bne.w	80051dc <_strtod_l+0x494>
 8005818:	a307      	add	r3, pc, #28	; (adr r3, 8005838 <_strtod_l+0xaf0>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f7fb f8f3 	bl	8000a0c <__aeabi_dcmpgt>
 8005826:	2800      	cmp	r0, #0
 8005828:	f43f af7b 	beq.w	8005722 <_strtod_l+0x9da>
 800582c:	e4d6      	b.n	80051dc <_strtod_l+0x494>
 800582e:	bf00      	nop
 8005830:	94a03595 	.word	0x94a03595
 8005834:	3fdfffff 	.word	0x3fdfffff
 8005838:	35afe535 	.word	0x35afe535
 800583c:	3fe00000 	.word	0x3fe00000
 8005840:	000fffff 	.word	0x000fffff
 8005844:	7ff00000 	.word	0x7ff00000
 8005848:	7fefffff 	.word	0x7fefffff
 800584c:	3ff00000 	.word	0x3ff00000
 8005850:	7fe00000 	.word	0x7fe00000
 8005854:	7c9fffff 	.word	0x7c9fffff
 8005858:	3fe00000 	.word	0x3fe00000
 800585c:	bff00000 	.word	0xbff00000
 8005860:	9b05      	ldr	r3, [sp, #20]
 8005862:	b313      	cbz	r3, 80058aa <_strtod_l+0xb62>
 8005864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800586a:	d81e      	bhi.n	80058aa <_strtod_l+0xb62>
 800586c:	a326      	add	r3, pc, #152	; (adr r3, 8005908 <_strtod_l+0xbc0>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	4620      	mov	r0, r4
 8005874:	4629      	mov	r1, r5
 8005876:	f7fb f8b5 	bl	80009e4 <__aeabi_dcmple>
 800587a:	b190      	cbz	r0, 80058a2 <_strtod_l+0xb5a>
 800587c:	4629      	mov	r1, r5
 800587e:	4620      	mov	r0, r4
 8005880:	f7fb f8e4 	bl	8000a4c <__aeabi_d2uiz>
 8005884:	2801      	cmp	r0, #1
 8005886:	bf38      	it	cc
 8005888:	2001      	movcc	r0, #1
 800588a:	f7fa fdb5 	bl	80003f8 <__aeabi_ui2d>
 800588e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005890:	4604      	mov	r4, r0
 8005892:	460d      	mov	r5, r1
 8005894:	b9d3      	cbnz	r3, 80058cc <_strtod_l+0xb84>
 8005896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800589a:	9012      	str	r0, [sp, #72]	; 0x48
 800589c:	9313      	str	r3, [sp, #76]	; 0x4c
 800589e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80058a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80058a8:	1a9f      	subs	r7, r3, r2
 80058aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ae:	f000 ffd3 	bl	8006858 <__ulp>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fa fe17 	bl	80004ec <__aeabi_dmul>
 80058be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058c2:	f7fa fc5d 	bl	8000180 <__adddf3>
 80058c6:	4680      	mov	r8, r0
 80058c8:	4689      	mov	r9, r1
 80058ca:	e77e      	b.n	80057ca <_strtod_l+0xa82>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80058d4:	e7e3      	b.n	800589e <_strtod_l+0xb56>
 80058d6:	a30e      	add	r3, pc, #56	; (adr r3, 8005910 <_strtod_l+0xbc8>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fb f878 	bl	80009d0 <__aeabi_dcmplt>
 80058e0:	e7a1      	b.n	8005826 <_strtod_l+0xade>
 80058e2:	2300      	movs	r3, #0
 80058e4:	930a      	str	r3, [sp, #40]	; 0x28
 80058e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	f7ff ba71 	b.w	8004dd2 <_strtod_l+0x8a>
 80058f0:	2a65      	cmp	r2, #101	; 0x65
 80058f2:	f43f ab63 	beq.w	8004fbc <_strtod_l+0x274>
 80058f6:	2a45      	cmp	r2, #69	; 0x45
 80058f8:	f43f ab60 	beq.w	8004fbc <_strtod_l+0x274>
 80058fc:	2301      	movs	r3, #1
 80058fe:	f7ff bb95 	b.w	800502c <_strtod_l+0x2e4>
 8005902:	bf00      	nop
 8005904:	f3af 8000 	nop.w
 8005908:	ffc00000 	.word	0xffc00000
 800590c:	41dfffff 	.word	0x41dfffff
 8005910:	94a03595 	.word	0x94a03595
 8005914:	3fcfffff 	.word	0x3fcfffff

08005918 <_strtod_r>:
 8005918:	4b01      	ldr	r3, [pc, #4]	; (8005920 <_strtod_r+0x8>)
 800591a:	f7ff ba15 	b.w	8004d48 <_strtod_l>
 800591e:	bf00      	nop
 8005920:	20000074 	.word	0x20000074

08005924 <_strtol_l.constprop.0>:
 8005924:	2b01      	cmp	r3, #1
 8005926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592a:	4680      	mov	r8, r0
 800592c:	d001      	beq.n	8005932 <_strtol_l.constprop.0+0xe>
 800592e:	2b24      	cmp	r3, #36	; 0x24
 8005930:	d906      	bls.n	8005940 <_strtol_l.constprop.0+0x1c>
 8005932:	f7fe fef3 	bl	800471c <__errno>
 8005936:	2316      	movs	r3, #22
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	2000      	movs	r0, #0
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	460d      	mov	r5, r1
 8005942:	4f35      	ldr	r7, [pc, #212]	; (8005a18 <_strtol_l.constprop.0+0xf4>)
 8005944:	4628      	mov	r0, r5
 8005946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800594a:	5de6      	ldrb	r6, [r4, r7]
 800594c:	f016 0608 	ands.w	r6, r6, #8
 8005950:	d1f8      	bne.n	8005944 <_strtol_l.constprop.0+0x20>
 8005952:	2c2d      	cmp	r4, #45	; 0x2d
 8005954:	d12f      	bne.n	80059b6 <_strtol_l.constprop.0+0x92>
 8005956:	2601      	movs	r6, #1
 8005958:	782c      	ldrb	r4, [r5, #0]
 800595a:	1c85      	adds	r5, r0, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d057      	beq.n	8005a10 <_strtol_l.constprop.0+0xec>
 8005960:	2b10      	cmp	r3, #16
 8005962:	d109      	bne.n	8005978 <_strtol_l.constprop.0+0x54>
 8005964:	2c30      	cmp	r4, #48	; 0x30
 8005966:	d107      	bne.n	8005978 <_strtol_l.constprop.0+0x54>
 8005968:	7828      	ldrb	r0, [r5, #0]
 800596a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800596e:	2858      	cmp	r0, #88	; 0x58
 8005970:	d149      	bne.n	8005a06 <_strtol_l.constprop.0+0xe2>
 8005972:	2310      	movs	r3, #16
 8005974:	786c      	ldrb	r4, [r5, #1]
 8005976:	3502      	adds	r5, #2
 8005978:	2700      	movs	r7, #0
 800597a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800597e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005982:	fbbe f9f3 	udiv	r9, lr, r3
 8005986:	4638      	mov	r0, r7
 8005988:	fb03 ea19 	mls	sl, r3, r9, lr
 800598c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005990:	f1bc 0f09 	cmp.w	ip, #9
 8005994:	d814      	bhi.n	80059c0 <_strtol_l.constprop.0+0x9c>
 8005996:	4664      	mov	r4, ip
 8005998:	42a3      	cmp	r3, r4
 800599a:	dd22      	ble.n	80059e2 <_strtol_l.constprop.0+0xbe>
 800599c:	2f00      	cmp	r7, #0
 800599e:	db1d      	blt.n	80059dc <_strtol_l.constprop.0+0xb8>
 80059a0:	4581      	cmp	r9, r0
 80059a2:	d31b      	bcc.n	80059dc <_strtol_l.constprop.0+0xb8>
 80059a4:	d101      	bne.n	80059aa <_strtol_l.constprop.0+0x86>
 80059a6:	45a2      	cmp	sl, r4
 80059a8:	db18      	blt.n	80059dc <_strtol_l.constprop.0+0xb8>
 80059aa:	2701      	movs	r7, #1
 80059ac:	fb00 4003 	mla	r0, r0, r3, r4
 80059b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059b4:	e7ea      	b.n	800598c <_strtol_l.constprop.0+0x68>
 80059b6:	2c2b      	cmp	r4, #43	; 0x2b
 80059b8:	bf04      	itt	eq
 80059ba:	782c      	ldrbeq	r4, [r5, #0]
 80059bc:	1c85      	addeq	r5, r0, #2
 80059be:	e7cd      	b.n	800595c <_strtol_l.constprop.0+0x38>
 80059c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80059c4:	f1bc 0f19 	cmp.w	ip, #25
 80059c8:	d801      	bhi.n	80059ce <_strtol_l.constprop.0+0xaa>
 80059ca:	3c37      	subs	r4, #55	; 0x37
 80059cc:	e7e4      	b.n	8005998 <_strtol_l.constprop.0+0x74>
 80059ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80059d2:	f1bc 0f19 	cmp.w	ip, #25
 80059d6:	d804      	bhi.n	80059e2 <_strtol_l.constprop.0+0xbe>
 80059d8:	3c57      	subs	r4, #87	; 0x57
 80059da:	e7dd      	b.n	8005998 <_strtol_l.constprop.0+0x74>
 80059dc:	f04f 37ff 	mov.w	r7, #4294967295
 80059e0:	e7e6      	b.n	80059b0 <_strtol_l.constprop.0+0x8c>
 80059e2:	2f00      	cmp	r7, #0
 80059e4:	da07      	bge.n	80059f6 <_strtol_l.constprop.0+0xd2>
 80059e6:	2322      	movs	r3, #34	; 0x22
 80059e8:	4670      	mov	r0, lr
 80059ea:	f8c8 3000 	str.w	r3, [r8]
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	d0a4      	beq.n	800593c <_strtol_l.constprop.0+0x18>
 80059f2:	1e69      	subs	r1, r5, #1
 80059f4:	e005      	b.n	8005a02 <_strtol_l.constprop.0+0xde>
 80059f6:	b106      	cbz	r6, 80059fa <_strtol_l.constprop.0+0xd6>
 80059f8:	4240      	negs	r0, r0
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d09e      	beq.n	800593c <_strtol_l.constprop.0+0x18>
 80059fe:	2f00      	cmp	r7, #0
 8005a00:	d1f7      	bne.n	80059f2 <_strtol_l.constprop.0+0xce>
 8005a02:	6011      	str	r1, [r2, #0]
 8005a04:	e79a      	b.n	800593c <_strtol_l.constprop.0+0x18>
 8005a06:	2430      	movs	r4, #48	; 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1b5      	bne.n	8005978 <_strtol_l.constprop.0+0x54>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	e7b3      	b.n	8005978 <_strtol_l.constprop.0+0x54>
 8005a10:	2c30      	cmp	r4, #48	; 0x30
 8005a12:	d0a9      	beq.n	8005968 <_strtol_l.constprop.0+0x44>
 8005a14:	230a      	movs	r3, #10
 8005a16:	e7af      	b.n	8005978 <_strtol_l.constprop.0+0x54>
 8005a18:	080088a9 	.word	0x080088a9

08005a1c <_strtol_r>:
 8005a1c:	f7ff bf82 	b.w	8005924 <_strtol_l.constprop.0>

08005a20 <_write_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4d05      	ldr	r5, [pc, #20]	; (8005a40 <_write_r+0x20>)
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb fc7a 	bl	8001328 <_write>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_write_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_write_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	200003e0 	.word	0x200003e0

08005a44 <_close_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	2300      	movs	r3, #0
 8005a48:	4d05      	ldr	r5, [pc, #20]	; (8005a60 <_close_r+0x1c>)
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fb fc86 	bl	8001360 <_close>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_close_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_close_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200003e0 	.word	0x200003e0

08005a64 <rshift>:
 8005a64:	6903      	ldr	r3, [r0, #16]
 8005a66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005a6e:	f100 0414 	add.w	r4, r0, #20
 8005a72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005a76:	dd46      	ble.n	8005b06 <rshift+0xa2>
 8005a78:	f011 011f 	ands.w	r1, r1, #31
 8005a7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005a80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005a84:	d10c      	bne.n	8005aa0 <rshift+0x3c>
 8005a86:	4629      	mov	r1, r5
 8005a88:	f100 0710 	add.w	r7, r0, #16
 8005a8c:	42b1      	cmp	r1, r6
 8005a8e:	d335      	bcc.n	8005afc <rshift+0x98>
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	1eea      	subs	r2, r5, #3
 8005a96:	4296      	cmp	r6, r2
 8005a98:	bf38      	it	cc
 8005a9a:	2300      	movcc	r3, #0
 8005a9c:	4423      	add	r3, r4
 8005a9e:	e015      	b.n	8005acc <rshift+0x68>
 8005aa0:	46a1      	mov	r9, r4
 8005aa2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005aa6:	f1c1 0820 	rsb	r8, r1, #32
 8005aaa:	40cf      	lsrs	r7, r1
 8005aac:	f105 0e04 	add.w	lr, r5, #4
 8005ab0:	4576      	cmp	r6, lr
 8005ab2:	46f4      	mov	ip, lr
 8005ab4:	d816      	bhi.n	8005ae4 <rshift+0x80>
 8005ab6:	1a9a      	subs	r2, r3, r2
 8005ab8:	0092      	lsls	r2, r2, #2
 8005aba:	3a04      	subs	r2, #4
 8005abc:	3501      	adds	r5, #1
 8005abe:	42ae      	cmp	r6, r5
 8005ac0:	bf38      	it	cc
 8005ac2:	2200      	movcc	r2, #0
 8005ac4:	18a3      	adds	r3, r4, r2
 8005ac6:	50a7      	str	r7, [r4, r2]
 8005ac8:	b107      	cbz	r7, 8005acc <rshift+0x68>
 8005aca:	3304      	adds	r3, #4
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	eba3 0204 	sub.w	r2, r3, r4
 8005ad2:	bf08      	it	eq
 8005ad4:	2300      	moveq	r3, #0
 8005ad6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005ada:	6102      	str	r2, [r0, #16]
 8005adc:	bf08      	it	eq
 8005ade:	6143      	streq	r3, [r0, #20]
 8005ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae4:	f8dc c000 	ldr.w	ip, [ip]
 8005ae8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005aec:	ea4c 0707 	orr.w	r7, ip, r7
 8005af0:	f849 7b04 	str.w	r7, [r9], #4
 8005af4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005af8:	40cf      	lsrs	r7, r1
 8005afa:	e7d9      	b.n	8005ab0 <rshift+0x4c>
 8005afc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005b00:	f847 cf04 	str.w	ip, [r7, #4]!
 8005b04:	e7c2      	b.n	8005a8c <rshift+0x28>
 8005b06:	4623      	mov	r3, r4
 8005b08:	e7e0      	b.n	8005acc <rshift+0x68>

08005b0a <__hexdig_fun>:
 8005b0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005b0e:	2b09      	cmp	r3, #9
 8005b10:	d802      	bhi.n	8005b18 <__hexdig_fun+0xe>
 8005b12:	3820      	subs	r0, #32
 8005b14:	b2c0      	uxtb	r0, r0
 8005b16:	4770      	bx	lr
 8005b18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d801      	bhi.n	8005b24 <__hexdig_fun+0x1a>
 8005b20:	3847      	subs	r0, #71	; 0x47
 8005b22:	e7f7      	b.n	8005b14 <__hexdig_fun+0xa>
 8005b24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d801      	bhi.n	8005b30 <__hexdig_fun+0x26>
 8005b2c:	3827      	subs	r0, #39	; 0x27
 8005b2e:	e7f1      	b.n	8005b14 <__hexdig_fun+0xa>
 8005b30:	2000      	movs	r0, #0
 8005b32:	4770      	bx	lr

08005b34 <__gethex>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	b08b      	sub	sp, #44	; 0x2c
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	4bb2      	ldr	r3, [pc, #712]	; (8005e08 <__gethex+0x2d4>)
 8005b3e:	9002      	str	r0, [sp, #8]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	468b      	mov	fp, r1
 8005b44:	4618      	mov	r0, r3
 8005b46:	4690      	mov	r8, r2
 8005b48:	9303      	str	r3, [sp, #12]
 8005b4a:	f7fa fb0b 	bl	8000164 <strlen>
 8005b4e:	4682      	mov	sl, r0
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	f8db 2000 	ldr.w	r2, [fp]
 8005b56:	4403      	add	r3, r0
 8005b58:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005b5c:	9306      	str	r3, [sp, #24]
 8005b5e:	1c93      	adds	r3, r2, #2
 8005b60:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005b64:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005b68:	32fe      	adds	r2, #254	; 0xfe
 8005b6a:	18d1      	adds	r1, r2, r3
 8005b6c:	461f      	mov	r7, r3
 8005b6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b72:	9101      	str	r1, [sp, #4]
 8005b74:	2830      	cmp	r0, #48	; 0x30
 8005b76:	d0f8      	beq.n	8005b6a <__gethex+0x36>
 8005b78:	f7ff ffc7 	bl	8005b0a <__hexdig_fun>
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d13a      	bne.n	8005bf8 <__gethex+0xc4>
 8005b82:	4652      	mov	r2, sl
 8005b84:	4638      	mov	r0, r7
 8005b86:	9903      	ldr	r1, [sp, #12]
 8005b88:	f7ff f8a9 	bl	8004cde <strncmp>
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d166      	bne.n	8005c60 <__gethex+0x12c>
 8005b92:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005b96:	eb07 060a 	add.w	r6, r7, sl
 8005b9a:	f7ff ffb6 	bl	8005b0a <__hexdig_fun>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d060      	beq.n	8005c64 <__gethex+0x130>
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	7818      	ldrb	r0, [r3, #0]
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	2830      	cmp	r0, #48	; 0x30
 8005baa:	f103 0301 	add.w	r3, r3, #1
 8005bae:	d0f9      	beq.n	8005ba4 <__gethex+0x70>
 8005bb0:	f7ff ffab 	bl	8005b0a <__hexdig_fun>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	fab0 f480 	clz	r4, r0
 8005bba:	4635      	mov	r5, r6
 8005bbc:	0964      	lsrs	r4, r4, #5
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	4616      	mov	r6, r2
 8005bc4:	7830      	ldrb	r0, [r6, #0]
 8005bc6:	3201      	adds	r2, #1
 8005bc8:	f7ff ff9f 	bl	8005b0a <__hexdig_fun>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1f8      	bne.n	8005bc2 <__gethex+0x8e>
 8005bd0:	4652      	mov	r2, sl
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	f7ff f882 	bl	8004cde <strncmp>
 8005bda:	b980      	cbnz	r0, 8005bfe <__gethex+0xca>
 8005bdc:	b94d      	cbnz	r5, 8005bf2 <__gethex+0xbe>
 8005bde:	eb06 050a 	add.w	r5, r6, sl
 8005be2:	462a      	mov	r2, r5
 8005be4:	4616      	mov	r6, r2
 8005be6:	7830      	ldrb	r0, [r6, #0]
 8005be8:	3201      	adds	r2, #1
 8005bea:	f7ff ff8e 	bl	8005b0a <__hexdig_fun>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d1f8      	bne.n	8005be4 <__gethex+0xb0>
 8005bf2:	1bad      	subs	r5, r5, r6
 8005bf4:	00ad      	lsls	r5, r5, #2
 8005bf6:	e004      	b.n	8005c02 <__gethex+0xce>
 8005bf8:	2400      	movs	r4, #0
 8005bfa:	4625      	mov	r5, r4
 8005bfc:	e7e0      	b.n	8005bc0 <__gethex+0x8c>
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	d1f7      	bne.n	8005bf2 <__gethex+0xbe>
 8005c02:	7833      	ldrb	r3, [r6, #0]
 8005c04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d139      	bne.n	8005c80 <__gethex+0x14c>
 8005c0c:	7873      	ldrb	r3, [r6, #1]
 8005c0e:	2b2b      	cmp	r3, #43	; 0x2b
 8005c10:	d02a      	beq.n	8005c68 <__gethex+0x134>
 8005c12:	2b2d      	cmp	r3, #45	; 0x2d
 8005c14:	d02c      	beq.n	8005c70 <__gethex+0x13c>
 8005c16:	f04f 0900 	mov.w	r9, #0
 8005c1a:	1c71      	adds	r1, r6, #1
 8005c1c:	7808      	ldrb	r0, [r1, #0]
 8005c1e:	f7ff ff74 	bl	8005b0a <__hexdig_fun>
 8005c22:	1e43      	subs	r3, r0, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b18      	cmp	r3, #24
 8005c28:	d82a      	bhi.n	8005c80 <__gethex+0x14c>
 8005c2a:	f1a0 0210 	sub.w	r2, r0, #16
 8005c2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005c32:	f7ff ff6a 	bl	8005b0a <__hexdig_fun>
 8005c36:	1e43      	subs	r3, r0, #1
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b18      	cmp	r3, #24
 8005c3c:	d91b      	bls.n	8005c76 <__gethex+0x142>
 8005c3e:	f1b9 0f00 	cmp.w	r9, #0
 8005c42:	d000      	beq.n	8005c46 <__gethex+0x112>
 8005c44:	4252      	negs	r2, r2
 8005c46:	4415      	add	r5, r2
 8005c48:	f8cb 1000 	str.w	r1, [fp]
 8005c4c:	b1d4      	cbz	r4, 8005c84 <__gethex+0x150>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2700      	movne	r7, #0
 8005c56:	2706      	moveq	r7, #6
 8005c58:	4638      	mov	r0, r7
 8005c5a:	b00b      	add	sp, #44	; 0x2c
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c60:	463e      	mov	r6, r7
 8005c62:	4625      	mov	r5, r4
 8005c64:	2401      	movs	r4, #1
 8005c66:	e7cc      	b.n	8005c02 <__gethex+0xce>
 8005c68:	f04f 0900 	mov.w	r9, #0
 8005c6c:	1cb1      	adds	r1, r6, #2
 8005c6e:	e7d5      	b.n	8005c1c <__gethex+0xe8>
 8005c70:	f04f 0901 	mov.w	r9, #1
 8005c74:	e7fa      	b.n	8005c6c <__gethex+0x138>
 8005c76:	230a      	movs	r3, #10
 8005c78:	fb03 0202 	mla	r2, r3, r2, r0
 8005c7c:	3a10      	subs	r2, #16
 8005c7e:	e7d6      	b.n	8005c2e <__gethex+0xfa>
 8005c80:	4631      	mov	r1, r6
 8005c82:	e7e1      	b.n	8005c48 <__gethex+0x114>
 8005c84:	4621      	mov	r1, r4
 8005c86:	1bf3      	subs	r3, r6, r7
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	2b07      	cmp	r3, #7
 8005c8c:	dc0a      	bgt.n	8005ca4 <__gethex+0x170>
 8005c8e:	9802      	ldr	r0, [sp, #8]
 8005c90:	f000 fa72 	bl	8006178 <_Balloc>
 8005c94:	4604      	mov	r4, r0
 8005c96:	b940      	cbnz	r0, 8005caa <__gethex+0x176>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	21de      	movs	r1, #222	; 0xde
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <__gethex+0x2d8>)
 8005c9e:	485c      	ldr	r0, [pc, #368]	; (8005e10 <__gethex+0x2dc>)
 8005ca0:	f001 fefc 	bl	8007a9c <__assert_func>
 8005ca4:	3101      	adds	r1, #1
 8005ca6:	105b      	asrs	r3, r3, #1
 8005ca8:	e7ef      	b.n	8005c8a <__gethex+0x156>
 8005caa:	f04f 0b00 	mov.w	fp, #0
 8005cae:	f100 0914 	add.w	r9, r0, #20
 8005cb2:	f1ca 0301 	rsb	r3, sl, #1
 8005cb6:	f8cd 9010 	str.w	r9, [sp, #16]
 8005cba:	f8cd b004 	str.w	fp, [sp, #4]
 8005cbe:	9308      	str	r3, [sp, #32]
 8005cc0:	42b7      	cmp	r7, r6
 8005cc2:	d33f      	bcc.n	8005d44 <__gethex+0x210>
 8005cc4:	9f04      	ldr	r7, [sp, #16]
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	f847 3b04 	str.w	r3, [r7], #4
 8005ccc:	eba7 0709 	sub.w	r7, r7, r9
 8005cd0:	10bf      	asrs	r7, r7, #2
 8005cd2:	6127      	str	r7, [r4, #16]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fb41 	bl	800635c <__hi0bits>
 8005cda:	017f      	lsls	r7, r7, #5
 8005cdc:	f8d8 6000 	ldr.w	r6, [r8]
 8005ce0:	1a3f      	subs	r7, r7, r0
 8005ce2:	42b7      	cmp	r7, r6
 8005ce4:	dd62      	ble.n	8005dac <__gethex+0x278>
 8005ce6:	1bbf      	subs	r7, r7, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 fedb 	bl	8006aa6 <__any_on>
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	b1a8      	cbz	r0, 8005d20 <__gethex+0x1ec>
 8005cf4:	f04f 0a01 	mov.w	sl, #1
 8005cf8:	1e7b      	subs	r3, r7, #1
 8005cfa:	1159      	asrs	r1, r3, #5
 8005cfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005d00:	f003 021f 	and.w	r2, r3, #31
 8005d04:	fa0a f202 	lsl.w	r2, sl, r2
 8005d08:	420a      	tst	r2, r1
 8005d0a:	d009      	beq.n	8005d20 <__gethex+0x1ec>
 8005d0c:	4553      	cmp	r3, sl
 8005d0e:	dd05      	ble.n	8005d1c <__gethex+0x1e8>
 8005d10:	4620      	mov	r0, r4
 8005d12:	1eb9      	subs	r1, r7, #2
 8005d14:	f000 fec7 	bl	8006aa6 <__any_on>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d144      	bne.n	8005da6 <__gethex+0x272>
 8005d1c:	f04f 0a02 	mov.w	sl, #2
 8005d20:	4639      	mov	r1, r7
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7ff fe9e 	bl	8005a64 <rshift>
 8005d28:	443d      	add	r5, r7
 8005d2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d2e:	42ab      	cmp	r3, r5
 8005d30:	da4a      	bge.n	8005dc8 <__gethex+0x294>
 8005d32:	4621      	mov	r1, r4
 8005d34:	9802      	ldr	r0, [sp, #8]
 8005d36:	f000 fa5f 	bl	80061f8 <_Bfree>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d3e:	27a3      	movs	r7, #163	; 0xa3
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e789      	b.n	8005c58 <__gethex+0x124>
 8005d44:	1e73      	subs	r3, r6, #1
 8005d46:	9a06      	ldr	r2, [sp, #24]
 8005d48:	9307      	str	r3, [sp, #28]
 8005d4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d019      	beq.n	8005d86 <__gethex+0x252>
 8005d52:	f1bb 0f20 	cmp.w	fp, #32
 8005d56:	d107      	bne.n	8005d68 <__gethex+0x234>
 8005d58:	9b04      	ldr	r3, [sp, #16]
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	f843 2b04 	str.w	r2, [r3], #4
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	2300      	movs	r3, #0
 8005d64:	469b      	mov	fp, r3
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005d6c:	f7ff fecd 	bl	8005b0a <__hexdig_fun>
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	f000 000f 	and.w	r0, r0, #15
 8005d76:	fa00 f00b 	lsl.w	r0, r0, fp
 8005d7a:	4303      	orrs	r3, r0
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	f10b 0b04 	add.w	fp, fp, #4
 8005d82:	9b07      	ldr	r3, [sp, #28]
 8005d84:	e00d      	b.n	8005da2 <__gethex+0x26e>
 8005d86:	9a08      	ldr	r2, [sp, #32]
 8005d88:	1e73      	subs	r3, r6, #1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	42bb      	cmp	r3, r7
 8005d8e:	d3e0      	bcc.n	8005d52 <__gethex+0x21e>
 8005d90:	4618      	mov	r0, r3
 8005d92:	4652      	mov	r2, sl
 8005d94:	9903      	ldr	r1, [sp, #12]
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	f7fe ffa1 	bl	8004cde <strncmp>
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1d7      	bne.n	8005d52 <__gethex+0x21e>
 8005da2:	461e      	mov	r6, r3
 8005da4:	e78c      	b.n	8005cc0 <__gethex+0x18c>
 8005da6:	f04f 0a03 	mov.w	sl, #3
 8005daa:	e7b9      	b.n	8005d20 <__gethex+0x1ec>
 8005dac:	da09      	bge.n	8005dc2 <__gethex+0x28e>
 8005dae:	1bf7      	subs	r7, r6, r7
 8005db0:	4621      	mov	r1, r4
 8005db2:	463a      	mov	r2, r7
 8005db4:	9802      	ldr	r0, [sp, #8]
 8005db6:	f000 fc37 	bl	8006628 <__lshift>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	1bed      	subs	r5, r5, r7
 8005dbe:	f100 0914 	add.w	r9, r0, #20
 8005dc2:	f04f 0a00 	mov.w	sl, #0
 8005dc6:	e7b0      	b.n	8005d2a <__gethex+0x1f6>
 8005dc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005dcc:	42a8      	cmp	r0, r5
 8005dce:	dd72      	ble.n	8005eb6 <__gethex+0x382>
 8005dd0:	1b45      	subs	r5, r0, r5
 8005dd2:	42ae      	cmp	r6, r5
 8005dd4:	dc35      	bgt.n	8005e42 <__gethex+0x30e>
 8005dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d029      	beq.n	8005e32 <__gethex+0x2fe>
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d02b      	beq.n	8005e3a <__gethex+0x306>
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d11c      	bne.n	8005e20 <__gethex+0x2ec>
 8005de6:	42ae      	cmp	r6, r5
 8005de8:	d11a      	bne.n	8005e20 <__gethex+0x2ec>
 8005dea:	2e01      	cmp	r6, #1
 8005dec:	d112      	bne.n	8005e14 <__gethex+0x2e0>
 8005dee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005df2:	9a05      	ldr	r2, [sp, #20]
 8005df4:	2762      	movs	r7, #98	; 0x62
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	f8c9 3000 	str.w	r3, [r9]
 8005e00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e02:	601c      	str	r4, [r3, #0]
 8005e04:	e728      	b.n	8005c58 <__gethex+0x124>
 8005e06:	bf00      	nop
 8005e08:	08008a20 	.word	0x08008a20
 8005e0c:	080089a9 	.word	0x080089a9
 8005e10:	080089ba 	.word	0x080089ba
 8005e14:	4620      	mov	r0, r4
 8005e16:	1e71      	subs	r1, r6, #1
 8005e18:	f000 fe45 	bl	8006aa6 <__any_on>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d1e6      	bne.n	8005dee <__gethex+0x2ba>
 8005e20:	4621      	mov	r1, r4
 8005e22:	9802      	ldr	r0, [sp, #8]
 8005e24:	f000 f9e8 	bl	80061f8 <_Bfree>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e2c:	2750      	movs	r7, #80	; 0x50
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e712      	b.n	8005c58 <__gethex+0x124>
 8005e32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f3      	bne.n	8005e20 <__gethex+0x2ec>
 8005e38:	e7d9      	b.n	8005dee <__gethex+0x2ba>
 8005e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1d6      	bne.n	8005dee <__gethex+0x2ba>
 8005e40:	e7ee      	b.n	8005e20 <__gethex+0x2ec>
 8005e42:	1e6f      	subs	r7, r5, #1
 8005e44:	f1ba 0f00 	cmp.w	sl, #0
 8005e48:	d132      	bne.n	8005eb0 <__gethex+0x37c>
 8005e4a:	b127      	cbz	r7, 8005e56 <__gethex+0x322>
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 fe29 	bl	8006aa6 <__any_on>
 8005e54:	4682      	mov	sl, r0
 8005e56:	2101      	movs	r1, #1
 8005e58:	117b      	asrs	r3, r7, #5
 8005e5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005e5e:	f007 071f 	and.w	r7, r7, #31
 8005e62:	fa01 f707 	lsl.w	r7, r1, r7
 8005e66:	421f      	tst	r7, r3
 8005e68:	f04f 0702 	mov.w	r7, #2
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4620      	mov	r0, r4
 8005e70:	bf18      	it	ne
 8005e72:	f04a 0a02 	orrne.w	sl, sl, #2
 8005e76:	1b76      	subs	r6, r6, r5
 8005e78:	f7ff fdf4 	bl	8005a64 <rshift>
 8005e7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	d048      	beq.n	8005f18 <__gethex+0x3e4>
 8005e86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d015      	beq.n	8005eba <__gethex+0x386>
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d017      	beq.n	8005ec2 <__gethex+0x38e>
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d109      	bne.n	8005eaa <__gethex+0x376>
 8005e96:	f01a 0f02 	tst.w	sl, #2
 8005e9a:	d006      	beq.n	8005eaa <__gethex+0x376>
 8005e9c:	f8d9 0000 	ldr.w	r0, [r9]
 8005ea0:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ea4:	f01a 0f01 	tst.w	sl, #1
 8005ea8:	d10e      	bne.n	8005ec8 <__gethex+0x394>
 8005eaa:	f047 0710 	orr.w	r7, r7, #16
 8005eae:	e033      	b.n	8005f18 <__gethex+0x3e4>
 8005eb0:	f04f 0a01 	mov.w	sl, #1
 8005eb4:	e7cf      	b.n	8005e56 <__gethex+0x322>
 8005eb6:	2701      	movs	r7, #1
 8005eb8:	e7e2      	b.n	8005e80 <__gethex+0x34c>
 8005eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ebc:	f1c3 0301 	rsb	r3, r3, #1
 8005ec0:	9315      	str	r3, [sp, #84]	; 0x54
 8005ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <__gethex+0x376>
 8005ec8:	f04f 0c00 	mov.w	ip, #0
 8005ecc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005ed0:	f104 0314 	add.w	r3, r4, #20
 8005ed4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005ed8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ee6:	d01c      	beq.n	8005f22 <__gethex+0x3ee>
 8005ee8:	3201      	adds	r2, #1
 8005eea:	6002      	str	r2, [r0, #0]
 8005eec:	2f02      	cmp	r7, #2
 8005eee:	f104 0314 	add.w	r3, r4, #20
 8005ef2:	d13d      	bne.n	8005f70 <__gethex+0x43c>
 8005ef4:	f8d8 2000 	ldr.w	r2, [r8]
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	42b2      	cmp	r2, r6
 8005efc:	d10a      	bne.n	8005f14 <__gethex+0x3e0>
 8005efe:	2201      	movs	r2, #1
 8005f00:	1171      	asrs	r1, r6, #5
 8005f02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f06:	f006 061f 	and.w	r6, r6, #31
 8005f0a:	fa02 f606 	lsl.w	r6, r2, r6
 8005f0e:	421e      	tst	r6, r3
 8005f10:	bf18      	it	ne
 8005f12:	4617      	movne	r7, r2
 8005f14:	f047 0720 	orr.w	r7, r7, #32
 8005f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f1a:	601c      	str	r4, [r3, #0]
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	601d      	str	r5, [r3, #0]
 8005f20:	e69a      	b.n	8005c58 <__gethex+0x124>
 8005f22:	4299      	cmp	r1, r3
 8005f24:	f843 cc04 	str.w	ip, [r3, #-4]
 8005f28:	d8d8      	bhi.n	8005edc <__gethex+0x3a8>
 8005f2a:	68a3      	ldr	r3, [r4, #8]
 8005f2c:	459b      	cmp	fp, r3
 8005f2e:	db17      	blt.n	8005f60 <__gethex+0x42c>
 8005f30:	6861      	ldr	r1, [r4, #4]
 8005f32:	9802      	ldr	r0, [sp, #8]
 8005f34:	3101      	adds	r1, #1
 8005f36:	f000 f91f 	bl	8006178 <_Balloc>
 8005f3a:	4681      	mov	r9, r0
 8005f3c:	b918      	cbnz	r0, 8005f46 <__gethex+0x412>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	2184      	movs	r1, #132	; 0x84
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <__gethex+0x474>)
 8005f44:	e6ab      	b.n	8005c9e <__gethex+0x16a>
 8005f46:	6922      	ldr	r2, [r4, #16]
 8005f48:	f104 010c 	add.w	r1, r4, #12
 8005f4c:	3202      	adds	r2, #2
 8005f4e:	0092      	lsls	r2, r2, #2
 8005f50:	300c      	adds	r0, #12
 8005f52:	f7fe fc0d 	bl	8004770 <memcpy>
 8005f56:	4621      	mov	r1, r4
 8005f58:	9802      	ldr	r0, [sp, #8]
 8005f5a:	f000 f94d 	bl	80061f8 <_Bfree>
 8005f5e:	464c      	mov	r4, r9
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	6122      	str	r2, [r4, #16]
 8005f66:	2201      	movs	r2, #1
 8005f68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f6c:	615a      	str	r2, [r3, #20]
 8005f6e:	e7bd      	b.n	8005eec <__gethex+0x3b8>
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	455a      	cmp	r2, fp
 8005f74:	dd0b      	ble.n	8005f8e <__gethex+0x45a>
 8005f76:	2101      	movs	r1, #1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fd73 	bl	8005a64 <rshift>
 8005f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f82:	3501      	adds	r5, #1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	f6ff aed4 	blt.w	8005d32 <__gethex+0x1fe>
 8005f8a:	2701      	movs	r7, #1
 8005f8c:	e7c2      	b.n	8005f14 <__gethex+0x3e0>
 8005f8e:	f016 061f 	ands.w	r6, r6, #31
 8005f92:	d0fa      	beq.n	8005f8a <__gethex+0x456>
 8005f94:	4453      	add	r3, sl
 8005f96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005f9a:	f000 f9df 	bl	800635c <__hi0bits>
 8005f9e:	f1c6 0620 	rsb	r6, r6, #32
 8005fa2:	42b0      	cmp	r0, r6
 8005fa4:	dbe7      	blt.n	8005f76 <__gethex+0x442>
 8005fa6:	e7f0      	b.n	8005f8a <__gethex+0x456>
 8005fa8:	080089a9 	.word	0x080089a9

08005fac <L_shift>:
 8005fac:	f1c2 0208 	rsb	r2, r2, #8
 8005fb0:	0092      	lsls	r2, r2, #2
 8005fb2:	b570      	push	{r4, r5, r6, lr}
 8005fb4:	f1c2 0620 	rsb	r6, r2, #32
 8005fb8:	6843      	ldr	r3, [r0, #4]
 8005fba:	6804      	ldr	r4, [r0, #0]
 8005fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8005fc0:	432c      	orrs	r4, r5
 8005fc2:	40d3      	lsrs	r3, r2
 8005fc4:	6004      	str	r4, [r0, #0]
 8005fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005fca:	4288      	cmp	r0, r1
 8005fcc:	d3f4      	bcc.n	8005fb8 <L_shift+0xc>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}

08005fd0 <__match>:
 8005fd0:	b530      	push	{r4, r5, lr}
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fda:	b914      	cbnz	r4, 8005fe2 <__match+0x12>
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	2001      	movs	r0, #1
 8005fe0:	bd30      	pop	{r4, r5, pc}
 8005fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005fea:	2d19      	cmp	r5, #25
 8005fec:	bf98      	it	ls
 8005fee:	3220      	addls	r2, #32
 8005ff0:	42a2      	cmp	r2, r4
 8005ff2:	d0f0      	beq.n	8005fd6 <__match+0x6>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e7f3      	b.n	8005fe0 <__match+0x10>

08005ff8 <__hexnan>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	2500      	movs	r5, #0
 8005ffe:	680b      	ldr	r3, [r1, #0]
 8006000:	4682      	mov	sl, r0
 8006002:	115e      	asrs	r6, r3, #5
 8006004:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006008:	f013 031f 	ands.w	r3, r3, #31
 800600c:	bf18      	it	ne
 800600e:	3604      	addne	r6, #4
 8006010:	1f37      	subs	r7, r6, #4
 8006012:	46b9      	mov	r9, r7
 8006014:	463c      	mov	r4, r7
 8006016:	46ab      	mov	fp, r5
 8006018:	b087      	sub	sp, #28
 800601a:	4690      	mov	r8, r2
 800601c:	6802      	ldr	r2, [r0, #0]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	f846 5c04 	str.w	r5, [r6, #-4]
 8006024:	9502      	str	r5, [sp, #8]
 8006026:	7851      	ldrb	r1, [r2, #1]
 8006028:	1c53      	adds	r3, r2, #1
 800602a:	9303      	str	r3, [sp, #12]
 800602c:	b341      	cbz	r1, 8006080 <__hexnan+0x88>
 800602e:	4608      	mov	r0, r1
 8006030:	9205      	str	r2, [sp, #20]
 8006032:	9104      	str	r1, [sp, #16]
 8006034:	f7ff fd69 	bl	8005b0a <__hexdig_fun>
 8006038:	2800      	cmp	r0, #0
 800603a:	d14f      	bne.n	80060dc <__hexnan+0xe4>
 800603c:	9904      	ldr	r1, [sp, #16]
 800603e:	9a05      	ldr	r2, [sp, #20]
 8006040:	2920      	cmp	r1, #32
 8006042:	d818      	bhi.n	8006076 <__hexnan+0x7e>
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	459b      	cmp	fp, r3
 8006048:	dd13      	ble.n	8006072 <__hexnan+0x7a>
 800604a:	454c      	cmp	r4, r9
 800604c:	d206      	bcs.n	800605c <__hexnan+0x64>
 800604e:	2d07      	cmp	r5, #7
 8006050:	dc04      	bgt.n	800605c <__hexnan+0x64>
 8006052:	462a      	mov	r2, r5
 8006054:	4649      	mov	r1, r9
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff ffa8 	bl	8005fac <L_shift>
 800605c:	4544      	cmp	r4, r8
 800605e:	d950      	bls.n	8006102 <__hexnan+0x10a>
 8006060:	2300      	movs	r3, #0
 8006062:	f1a4 0904 	sub.w	r9, r4, #4
 8006066:	f844 3c04 	str.w	r3, [r4, #-4]
 800606a:	461d      	mov	r5, r3
 800606c:	464c      	mov	r4, r9
 800606e:	f8cd b008 	str.w	fp, [sp, #8]
 8006072:	9a03      	ldr	r2, [sp, #12]
 8006074:	e7d7      	b.n	8006026 <__hexnan+0x2e>
 8006076:	2929      	cmp	r1, #41	; 0x29
 8006078:	d156      	bne.n	8006128 <__hexnan+0x130>
 800607a:	3202      	adds	r2, #2
 800607c:	f8ca 2000 	str.w	r2, [sl]
 8006080:	f1bb 0f00 	cmp.w	fp, #0
 8006084:	d050      	beq.n	8006128 <__hexnan+0x130>
 8006086:	454c      	cmp	r4, r9
 8006088:	d206      	bcs.n	8006098 <__hexnan+0xa0>
 800608a:	2d07      	cmp	r5, #7
 800608c:	dc04      	bgt.n	8006098 <__hexnan+0xa0>
 800608e:	462a      	mov	r2, r5
 8006090:	4649      	mov	r1, r9
 8006092:	4620      	mov	r0, r4
 8006094:	f7ff ff8a 	bl	8005fac <L_shift>
 8006098:	4544      	cmp	r4, r8
 800609a:	d934      	bls.n	8006106 <__hexnan+0x10e>
 800609c:	4623      	mov	r3, r4
 800609e:	f1a8 0204 	sub.w	r2, r8, #4
 80060a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80060a6:	429f      	cmp	r7, r3
 80060a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80060ac:	d2f9      	bcs.n	80060a2 <__hexnan+0xaa>
 80060ae:	1b3b      	subs	r3, r7, r4
 80060b0:	f023 0303 	bic.w	r3, r3, #3
 80060b4:	3304      	adds	r3, #4
 80060b6:	3401      	adds	r4, #1
 80060b8:	3e03      	subs	r6, #3
 80060ba:	42b4      	cmp	r4, r6
 80060bc:	bf88      	it	hi
 80060be:	2304      	movhi	r3, #4
 80060c0:	2200      	movs	r2, #0
 80060c2:	4443      	add	r3, r8
 80060c4:	f843 2b04 	str.w	r2, [r3], #4
 80060c8:	429f      	cmp	r7, r3
 80060ca:	d2fb      	bcs.n	80060c4 <__hexnan+0xcc>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	b91b      	cbnz	r3, 80060d8 <__hexnan+0xe0>
 80060d0:	4547      	cmp	r7, r8
 80060d2:	d127      	bne.n	8006124 <__hexnan+0x12c>
 80060d4:	2301      	movs	r3, #1
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	2005      	movs	r0, #5
 80060da:	e026      	b.n	800612a <__hexnan+0x132>
 80060dc:	3501      	adds	r5, #1
 80060de:	2d08      	cmp	r5, #8
 80060e0:	f10b 0b01 	add.w	fp, fp, #1
 80060e4:	dd06      	ble.n	80060f4 <__hexnan+0xfc>
 80060e6:	4544      	cmp	r4, r8
 80060e8:	d9c3      	bls.n	8006072 <__hexnan+0x7a>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2501      	movs	r5, #1
 80060ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80060f2:	3c04      	subs	r4, #4
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	f000 000f 	and.w	r0, r0, #15
 80060fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80060fe:	6022      	str	r2, [r4, #0]
 8006100:	e7b7      	b.n	8006072 <__hexnan+0x7a>
 8006102:	2508      	movs	r5, #8
 8006104:	e7b5      	b.n	8006072 <__hexnan+0x7a>
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0df      	beq.n	80060cc <__hexnan+0xd4>
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	f1c3 0320 	rsb	r3, r3, #32
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800611c:	401a      	ands	r2, r3
 800611e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006122:	e7d3      	b.n	80060cc <__hexnan+0xd4>
 8006124:	3f04      	subs	r7, #4
 8006126:	e7d1      	b.n	80060cc <__hexnan+0xd4>
 8006128:	2004      	movs	r0, #4
 800612a:	b007      	add	sp, #28
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006130 <_lseek_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	2200      	movs	r2, #0
 800613a:	4d05      	ldr	r5, [pc, #20]	; (8006150 <_lseek_r+0x20>)
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fb f932 	bl	80013a8 <_lseek>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_lseek_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_lseek_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	200003e0 	.word	0x200003e0

08006154 <__ascii_mbtowc>:
 8006154:	b082      	sub	sp, #8
 8006156:	b901      	cbnz	r1, 800615a <__ascii_mbtowc+0x6>
 8006158:	a901      	add	r1, sp, #4
 800615a:	b142      	cbz	r2, 800616e <__ascii_mbtowc+0x1a>
 800615c:	b14b      	cbz	r3, 8006172 <__ascii_mbtowc+0x1e>
 800615e:	7813      	ldrb	r3, [r2, #0]
 8006160:	600b      	str	r3, [r1, #0]
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	1e10      	subs	r0, r2, #0
 8006166:	bf18      	it	ne
 8006168:	2001      	movne	r0, #1
 800616a:	b002      	add	sp, #8
 800616c:	4770      	bx	lr
 800616e:	4610      	mov	r0, r2
 8006170:	e7fb      	b.n	800616a <__ascii_mbtowc+0x16>
 8006172:	f06f 0001 	mvn.w	r0, #1
 8006176:	e7f8      	b.n	800616a <__ascii_mbtowc+0x16>

08006178 <_Balloc>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	b976      	cbnz	r6, 80061a0 <_Balloc+0x28>
 8006182:	2010      	movs	r0, #16
 8006184:	f001 fe70 	bl	8007e68 <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	6260      	str	r0, [r4, #36]	; 0x24
 800618c:	b920      	cbnz	r0, 8006198 <_Balloc+0x20>
 800618e:	2166      	movs	r1, #102	; 0x66
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <_Balloc+0x78>)
 8006192:	4818      	ldr	r0, [pc, #96]	; (80061f4 <_Balloc+0x7c>)
 8006194:	f001 fc82 	bl	8007a9c <__assert_func>
 8006198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800619c:	6006      	str	r6, [r0, #0]
 800619e:	60c6      	str	r6, [r0, #12]
 80061a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061a2:	68f3      	ldr	r3, [r6, #12]
 80061a4:	b183      	cbz	r3, 80061c8 <_Balloc+0x50>
 80061a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ae:	b9b8      	cbnz	r0, 80061e0 <_Balloc+0x68>
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f605 	lsl.w	r6, r1, r5
 80061b6:	1d72      	adds	r2, r6, #5
 80061b8:	4620      	mov	r0, r4
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	f000 fc94 	bl	8006ae8 <_calloc_r>
 80061c0:	b160      	cbz	r0, 80061dc <_Balloc+0x64>
 80061c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061c6:	e00e      	b.n	80061e6 <_Balloc+0x6e>
 80061c8:	2221      	movs	r2, #33	; 0x21
 80061ca:	2104      	movs	r1, #4
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fc8b 	bl	8006ae8 <_calloc_r>
 80061d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d4:	60f0      	str	r0, [r6, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <_Balloc+0x2e>
 80061dc:	2000      	movs	r0, #0
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	6802      	ldr	r2, [r0, #0]
 80061e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061e6:	2300      	movs	r3, #0
 80061e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061ec:	e7f7      	b.n	80061de <_Balloc+0x66>
 80061ee:	bf00      	nop
 80061f0:	08008a34 	.word	0x08008a34
 80061f4:	08008a4b 	.word	0x08008a4b

080061f8 <_Bfree>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061fc:	4605      	mov	r5, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	b976      	cbnz	r6, 8006220 <_Bfree+0x28>
 8006202:	2010      	movs	r0, #16
 8006204:	f001 fe30 	bl	8007e68 <malloc>
 8006208:	4602      	mov	r2, r0
 800620a:	6268      	str	r0, [r5, #36]	; 0x24
 800620c:	b920      	cbnz	r0, 8006218 <_Bfree+0x20>
 800620e:	218a      	movs	r1, #138	; 0x8a
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <_Bfree+0x3c>)
 8006212:	4809      	ldr	r0, [pc, #36]	; (8006238 <_Bfree+0x40>)
 8006214:	f001 fc42 	bl	8007a9c <__assert_func>
 8006218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800621c:	6006      	str	r6, [r0, #0]
 800621e:	60c6      	str	r6, [r0, #12]
 8006220:	b13c      	cbz	r4, 8006232 <_Bfree+0x3a>
 8006222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800622c:	6021      	str	r1, [r4, #0]
 800622e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	08008a34 	.word	0x08008a34
 8006238:	08008a4b 	.word	0x08008a4b

0800623c <__multadd>:
 800623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	4607      	mov	r7, r0
 8006242:	460c      	mov	r4, r1
 8006244:	461e      	mov	r6, r3
 8006246:	2000      	movs	r0, #0
 8006248:	690d      	ldr	r5, [r1, #16]
 800624a:	f101 0c14 	add.w	ip, r1, #20
 800624e:	f8dc 3000 	ldr.w	r3, [ip]
 8006252:	3001      	adds	r0, #1
 8006254:	b299      	uxth	r1, r3
 8006256:	fb02 6101 	mla	r1, r2, r1, r6
 800625a:	0c1e      	lsrs	r6, r3, #16
 800625c:	0c0b      	lsrs	r3, r1, #16
 800625e:	fb02 3306 	mla	r3, r2, r6, r3
 8006262:	b289      	uxth	r1, r1
 8006264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006268:	4285      	cmp	r5, r0
 800626a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800626e:	f84c 1b04 	str.w	r1, [ip], #4
 8006272:	dcec      	bgt.n	800624e <__multadd+0x12>
 8006274:	b30e      	cbz	r6, 80062ba <__multadd+0x7e>
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	42ab      	cmp	r3, r5
 800627a:	dc19      	bgt.n	80062b0 <__multadd+0x74>
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4638      	mov	r0, r7
 8006280:	3101      	adds	r1, #1
 8006282:	f7ff ff79 	bl	8006178 <_Balloc>
 8006286:	4680      	mov	r8, r0
 8006288:	b928      	cbnz	r0, 8006296 <__multadd+0x5a>
 800628a:	4602      	mov	r2, r0
 800628c:	21b5      	movs	r1, #181	; 0xb5
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <__multadd+0x84>)
 8006290:	480c      	ldr	r0, [pc, #48]	; (80062c4 <__multadd+0x88>)
 8006292:	f001 fc03 	bl	8007a9c <__assert_func>
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	f104 010c 	add.w	r1, r4, #12
 800629c:	3202      	adds	r2, #2
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	300c      	adds	r0, #12
 80062a2:	f7fe fa65 	bl	8004770 <memcpy>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ffa5 	bl	80061f8 <_Bfree>
 80062ae:	4644      	mov	r4, r8
 80062b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062b4:	3501      	adds	r5, #1
 80062b6:	615e      	str	r6, [r3, #20]
 80062b8:	6125      	str	r5, [r4, #16]
 80062ba:	4620      	mov	r0, r4
 80062bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c0:	080089a9 	.word	0x080089a9
 80062c4:	08008a4b 	.word	0x08008a4b

080062c8 <__s2b>:
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	4615      	mov	r5, r2
 80062ce:	2209      	movs	r2, #9
 80062d0:	461f      	mov	r7, r3
 80062d2:	3308      	adds	r3, #8
 80062d4:	460c      	mov	r4, r1
 80062d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062da:	4606      	mov	r6, r0
 80062dc:	2201      	movs	r2, #1
 80062de:	2100      	movs	r1, #0
 80062e0:	429a      	cmp	r2, r3
 80062e2:	db09      	blt.n	80062f8 <__s2b+0x30>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ff47 	bl	8006178 <_Balloc>
 80062ea:	b940      	cbnz	r0, 80062fe <__s2b+0x36>
 80062ec:	4602      	mov	r2, r0
 80062ee:	21ce      	movs	r1, #206	; 0xce
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <__s2b+0x8c>)
 80062f2:	4819      	ldr	r0, [pc, #100]	; (8006358 <__s2b+0x90>)
 80062f4:	f001 fbd2 	bl	8007a9c <__assert_func>
 80062f8:	0052      	lsls	r2, r2, #1
 80062fa:	3101      	adds	r1, #1
 80062fc:	e7f0      	b.n	80062e0 <__s2b+0x18>
 80062fe:	9b08      	ldr	r3, [sp, #32]
 8006300:	2d09      	cmp	r5, #9
 8006302:	6143      	str	r3, [r0, #20]
 8006304:	f04f 0301 	mov.w	r3, #1
 8006308:	6103      	str	r3, [r0, #16]
 800630a:	dd16      	ble.n	800633a <__s2b+0x72>
 800630c:	f104 0909 	add.w	r9, r4, #9
 8006310:	46c8      	mov	r8, r9
 8006312:	442c      	add	r4, r5
 8006314:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006318:	4601      	mov	r1, r0
 800631a:	220a      	movs	r2, #10
 800631c:	4630      	mov	r0, r6
 800631e:	3b30      	subs	r3, #48	; 0x30
 8006320:	f7ff ff8c 	bl	800623c <__multadd>
 8006324:	45a0      	cmp	r8, r4
 8006326:	d1f5      	bne.n	8006314 <__s2b+0x4c>
 8006328:	f1a5 0408 	sub.w	r4, r5, #8
 800632c:	444c      	add	r4, r9
 800632e:	1b2d      	subs	r5, r5, r4
 8006330:	1963      	adds	r3, r4, r5
 8006332:	42bb      	cmp	r3, r7
 8006334:	db04      	blt.n	8006340 <__s2b+0x78>
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	2509      	movs	r5, #9
 800633c:	340a      	adds	r4, #10
 800633e:	e7f6      	b.n	800632e <__s2b+0x66>
 8006340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006344:	4601      	mov	r1, r0
 8006346:	220a      	movs	r2, #10
 8006348:	4630      	mov	r0, r6
 800634a:	3b30      	subs	r3, #48	; 0x30
 800634c:	f7ff ff76 	bl	800623c <__multadd>
 8006350:	e7ee      	b.n	8006330 <__s2b+0x68>
 8006352:	bf00      	nop
 8006354:	080089a9 	.word	0x080089a9
 8006358:	08008a4b 	.word	0x08008a4b

0800635c <__hi0bits>:
 800635c:	0c02      	lsrs	r2, r0, #16
 800635e:	0412      	lsls	r2, r2, #16
 8006360:	4603      	mov	r3, r0
 8006362:	b9ca      	cbnz	r2, 8006398 <__hi0bits+0x3c>
 8006364:	0403      	lsls	r3, r0, #16
 8006366:	2010      	movs	r0, #16
 8006368:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800636c:	bf04      	itt	eq
 800636e:	021b      	lsleq	r3, r3, #8
 8006370:	3008      	addeq	r0, #8
 8006372:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006376:	bf04      	itt	eq
 8006378:	011b      	lsleq	r3, r3, #4
 800637a:	3004      	addeq	r0, #4
 800637c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006380:	bf04      	itt	eq
 8006382:	009b      	lsleq	r3, r3, #2
 8006384:	3002      	addeq	r0, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	db05      	blt.n	8006396 <__hi0bits+0x3a>
 800638a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800638e:	f100 0001 	add.w	r0, r0, #1
 8006392:	bf08      	it	eq
 8006394:	2020      	moveq	r0, #32
 8006396:	4770      	bx	lr
 8006398:	2000      	movs	r0, #0
 800639a:	e7e5      	b.n	8006368 <__hi0bits+0xc>

0800639c <__lo0bits>:
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	4602      	mov	r2, r0
 80063a0:	f013 0007 	ands.w	r0, r3, #7
 80063a4:	d00b      	beq.n	80063be <__lo0bits+0x22>
 80063a6:	07d9      	lsls	r1, r3, #31
 80063a8:	d421      	bmi.n	80063ee <__lo0bits+0x52>
 80063aa:	0798      	lsls	r0, r3, #30
 80063ac:	bf49      	itett	mi
 80063ae:	085b      	lsrmi	r3, r3, #1
 80063b0:	089b      	lsrpl	r3, r3, #2
 80063b2:	2001      	movmi	r0, #1
 80063b4:	6013      	strmi	r3, [r2, #0]
 80063b6:	bf5c      	itt	pl
 80063b8:	2002      	movpl	r0, #2
 80063ba:	6013      	strpl	r3, [r2, #0]
 80063bc:	4770      	bx	lr
 80063be:	b299      	uxth	r1, r3
 80063c0:	b909      	cbnz	r1, 80063c6 <__lo0bits+0x2a>
 80063c2:	2010      	movs	r0, #16
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	b2d9      	uxtb	r1, r3
 80063c8:	b909      	cbnz	r1, 80063ce <__lo0bits+0x32>
 80063ca:	3008      	adds	r0, #8
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	0719      	lsls	r1, r3, #28
 80063d0:	bf04      	itt	eq
 80063d2:	091b      	lsreq	r3, r3, #4
 80063d4:	3004      	addeq	r0, #4
 80063d6:	0799      	lsls	r1, r3, #30
 80063d8:	bf04      	itt	eq
 80063da:	089b      	lsreq	r3, r3, #2
 80063dc:	3002      	addeq	r0, #2
 80063de:	07d9      	lsls	r1, r3, #31
 80063e0:	d403      	bmi.n	80063ea <__lo0bits+0x4e>
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f100 0001 	add.w	r0, r0, #1
 80063e8:	d003      	beq.n	80063f2 <__lo0bits+0x56>
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4770      	bx	lr
 80063ee:	2000      	movs	r0, #0
 80063f0:	4770      	bx	lr
 80063f2:	2020      	movs	r0, #32
 80063f4:	4770      	bx	lr
	...

080063f8 <__i2b>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	2101      	movs	r1, #1
 80063fe:	f7ff febb 	bl	8006178 <_Balloc>
 8006402:	4602      	mov	r2, r0
 8006404:	b928      	cbnz	r0, 8006412 <__i2b+0x1a>
 8006406:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800640a:	4b04      	ldr	r3, [pc, #16]	; (800641c <__i2b+0x24>)
 800640c:	4804      	ldr	r0, [pc, #16]	; (8006420 <__i2b+0x28>)
 800640e:	f001 fb45 	bl	8007a9c <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	6144      	str	r4, [r0, #20]
 8006416:	6103      	str	r3, [r0, #16]
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	080089a9 	.word	0x080089a9
 8006420:	08008a4b 	.word	0x08008a4b

08006424 <__multiply>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4691      	mov	r9, r2
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006430:	460c      	mov	r4, r1
 8006432:	429a      	cmp	r2, r3
 8006434:	bfbe      	ittt	lt
 8006436:	460b      	movlt	r3, r1
 8006438:	464c      	movlt	r4, r9
 800643a:	4699      	movlt	r9, r3
 800643c:	6927      	ldr	r7, [r4, #16]
 800643e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006442:	68a3      	ldr	r3, [r4, #8]
 8006444:	6861      	ldr	r1, [r4, #4]
 8006446:	eb07 060a 	add.w	r6, r7, sl
 800644a:	42b3      	cmp	r3, r6
 800644c:	b085      	sub	sp, #20
 800644e:	bfb8      	it	lt
 8006450:	3101      	addlt	r1, #1
 8006452:	f7ff fe91 	bl	8006178 <_Balloc>
 8006456:	b930      	cbnz	r0, 8006466 <__multiply+0x42>
 8006458:	4602      	mov	r2, r0
 800645a:	f240 115d 	movw	r1, #349	; 0x15d
 800645e:	4b43      	ldr	r3, [pc, #268]	; (800656c <__multiply+0x148>)
 8006460:	4843      	ldr	r0, [pc, #268]	; (8006570 <__multiply+0x14c>)
 8006462:	f001 fb1b 	bl	8007a9c <__assert_func>
 8006466:	f100 0514 	add.w	r5, r0, #20
 800646a:	462b      	mov	r3, r5
 800646c:	2200      	movs	r2, #0
 800646e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006472:	4543      	cmp	r3, r8
 8006474:	d321      	bcc.n	80064ba <__multiply+0x96>
 8006476:	f104 0314 	add.w	r3, r4, #20
 800647a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800647e:	f109 0314 	add.w	r3, r9, #20
 8006482:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006486:	9202      	str	r2, [sp, #8]
 8006488:	1b3a      	subs	r2, r7, r4
 800648a:	3a15      	subs	r2, #21
 800648c:	f022 0203 	bic.w	r2, r2, #3
 8006490:	3204      	adds	r2, #4
 8006492:	f104 0115 	add.w	r1, r4, #21
 8006496:	428f      	cmp	r7, r1
 8006498:	bf38      	it	cc
 800649a:	2204      	movcc	r2, #4
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	9a02      	ldr	r2, [sp, #8]
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d80c      	bhi.n	80064c0 <__multiply+0x9c>
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	dd03      	ble.n	80064b2 <__multiply+0x8e>
 80064aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d059      	beq.n	8006566 <__multiply+0x142>
 80064b2:	6106      	str	r6, [r0, #16]
 80064b4:	b005      	add	sp, #20
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	f843 2b04 	str.w	r2, [r3], #4
 80064be:	e7d8      	b.n	8006472 <__multiply+0x4e>
 80064c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80064c4:	f1ba 0f00 	cmp.w	sl, #0
 80064c8:	d023      	beq.n	8006512 <__multiply+0xee>
 80064ca:	46a9      	mov	r9, r5
 80064cc:	f04f 0c00 	mov.w	ip, #0
 80064d0:	f104 0e14 	add.w	lr, r4, #20
 80064d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064d8:	f8d9 1000 	ldr.w	r1, [r9]
 80064dc:	fa1f fb82 	uxth.w	fp, r2
 80064e0:	b289      	uxth	r1, r1
 80064e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80064e6:	4461      	add	r1, ip
 80064e8:	f8d9 c000 	ldr.w	ip, [r9]
 80064ec:	0c12      	lsrs	r2, r2, #16
 80064ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80064f2:	fb0a c202 	mla	r2, sl, r2, ip
 80064f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064fa:	b289      	uxth	r1, r1
 80064fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006500:	4577      	cmp	r7, lr
 8006502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006506:	f849 1b04 	str.w	r1, [r9], #4
 800650a:	d8e3      	bhi.n	80064d4 <__multiply+0xb0>
 800650c:	9a01      	ldr	r2, [sp, #4]
 800650e:	f845 c002 	str.w	ip, [r5, r2]
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	d020      	beq.n	8006562 <__multiply+0x13e>
 8006520:	46ae      	mov	lr, r5
 8006522:	f04f 0a00 	mov.w	sl, #0
 8006526:	6829      	ldr	r1, [r5, #0]
 8006528:	f104 0c14 	add.w	ip, r4, #20
 800652c:	f8bc b000 	ldrh.w	fp, [ip]
 8006530:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006534:	b289      	uxth	r1, r1
 8006536:	fb09 220b 	mla	r2, r9, fp, r2
 800653a:	4492      	add	sl, r2
 800653c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006540:	f84e 1b04 	str.w	r1, [lr], #4
 8006544:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006548:	f8be 1000 	ldrh.w	r1, [lr]
 800654c:	0c12      	lsrs	r2, r2, #16
 800654e:	fb09 1102 	mla	r1, r9, r2, r1
 8006552:	4567      	cmp	r7, ip
 8006554:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006558:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800655c:	d8e6      	bhi.n	800652c <__multiply+0x108>
 800655e:	9a01      	ldr	r2, [sp, #4]
 8006560:	50a9      	str	r1, [r5, r2]
 8006562:	3504      	adds	r5, #4
 8006564:	e79b      	b.n	800649e <__multiply+0x7a>
 8006566:	3e01      	subs	r6, #1
 8006568:	e79d      	b.n	80064a6 <__multiply+0x82>
 800656a:	bf00      	nop
 800656c:	080089a9 	.word	0x080089a9
 8006570:	08008a4b 	.word	0x08008a4b

08006574 <__pow5mult>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4615      	mov	r5, r2
 800657a:	f012 0203 	ands.w	r2, r2, #3
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	d007      	beq.n	8006594 <__pow5mult+0x20>
 8006584:	4c25      	ldr	r4, [pc, #148]	; (800661c <__pow5mult+0xa8>)
 8006586:	3a01      	subs	r2, #1
 8006588:	2300      	movs	r3, #0
 800658a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800658e:	f7ff fe55 	bl	800623c <__multadd>
 8006592:	4607      	mov	r7, r0
 8006594:	10ad      	asrs	r5, r5, #2
 8006596:	d03d      	beq.n	8006614 <__pow5mult+0xa0>
 8006598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659a:	b97c      	cbnz	r4, 80065bc <__pow5mult+0x48>
 800659c:	2010      	movs	r0, #16
 800659e:	f001 fc63 	bl	8007e68 <malloc>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6270      	str	r0, [r6, #36]	; 0x24
 80065a6:	b928      	cbnz	r0, 80065b4 <__pow5mult+0x40>
 80065a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065ac:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <__pow5mult+0xac>)
 80065ae:	481d      	ldr	r0, [pc, #116]	; (8006624 <__pow5mult+0xb0>)
 80065b0:	f001 fa74 	bl	8007a9c <__assert_func>
 80065b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065b8:	6004      	str	r4, [r0, #0]
 80065ba:	60c4      	str	r4, [r0, #12]
 80065bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065c4:	b94c      	cbnz	r4, 80065da <__pow5mult+0x66>
 80065c6:	f240 2171 	movw	r1, #625	; 0x271
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ff14 	bl	80063f8 <__i2b>
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80065d8:	6003      	str	r3, [r0, #0]
 80065da:	f04f 0900 	mov.w	r9, #0
 80065de:	07eb      	lsls	r3, r5, #31
 80065e0:	d50a      	bpl.n	80065f8 <__pow5mult+0x84>
 80065e2:	4639      	mov	r1, r7
 80065e4:	4622      	mov	r2, r4
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7ff ff1c 	bl	8006424 <__multiply>
 80065ec:	4680      	mov	r8, r0
 80065ee:	4639      	mov	r1, r7
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7ff fe01 	bl	80061f8 <_Bfree>
 80065f6:	4647      	mov	r7, r8
 80065f8:	106d      	asrs	r5, r5, #1
 80065fa:	d00b      	beq.n	8006614 <__pow5mult+0xa0>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	b938      	cbnz	r0, 8006610 <__pow5mult+0x9c>
 8006600:	4622      	mov	r2, r4
 8006602:	4621      	mov	r1, r4
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ff0d 	bl	8006424 <__multiply>
 800660a:	6020      	str	r0, [r4, #0]
 800660c:	f8c0 9000 	str.w	r9, [r0]
 8006610:	4604      	mov	r4, r0
 8006612:	e7e4      	b.n	80065de <__pow5mult+0x6a>
 8006614:	4638      	mov	r0, r7
 8006616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661a:	bf00      	nop
 800661c:	08008b98 	.word	0x08008b98
 8006620:	08008a34 	.word	0x08008a34
 8006624:	08008a4b 	.word	0x08008a4b

08006628 <__lshift>:
 8006628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800662c:	460c      	mov	r4, r1
 800662e:	4607      	mov	r7, r0
 8006630:	4691      	mov	r9, r2
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	6849      	ldr	r1, [r1, #4]
 8006636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006640:	f108 0601 	add.w	r6, r8, #1
 8006644:	42b3      	cmp	r3, r6
 8006646:	db0b      	blt.n	8006660 <__lshift+0x38>
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff fd95 	bl	8006178 <_Balloc>
 800664e:	4605      	mov	r5, r0
 8006650:	b948      	cbnz	r0, 8006666 <__lshift+0x3e>
 8006652:	4602      	mov	r2, r0
 8006654:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006658:	4b29      	ldr	r3, [pc, #164]	; (8006700 <__lshift+0xd8>)
 800665a:	482a      	ldr	r0, [pc, #168]	; (8006704 <__lshift+0xdc>)
 800665c:	f001 fa1e 	bl	8007a9c <__assert_func>
 8006660:	3101      	adds	r1, #1
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	e7ee      	b.n	8006644 <__lshift+0x1c>
 8006666:	2300      	movs	r3, #0
 8006668:	f100 0114 	add.w	r1, r0, #20
 800666c:	f100 0210 	add.w	r2, r0, #16
 8006670:	4618      	mov	r0, r3
 8006672:	4553      	cmp	r3, sl
 8006674:	db37      	blt.n	80066e6 <__lshift+0xbe>
 8006676:	6920      	ldr	r0, [r4, #16]
 8006678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800667c:	f104 0314 	add.w	r3, r4, #20
 8006680:	f019 091f 	ands.w	r9, r9, #31
 8006684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800668c:	d02f      	beq.n	80066ee <__lshift+0xc6>
 800668e:	468a      	mov	sl, r1
 8006690:	f04f 0c00 	mov.w	ip, #0
 8006694:	f1c9 0e20 	rsb	lr, r9, #32
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	fa02 f209 	lsl.w	r2, r2, r9
 800669e:	ea42 020c 	orr.w	r2, r2, ip
 80066a2:	f84a 2b04 	str.w	r2, [sl], #4
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	4298      	cmp	r0, r3
 80066ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b0:	d8f2      	bhi.n	8006698 <__lshift+0x70>
 80066b2:	1b03      	subs	r3, r0, r4
 80066b4:	3b15      	subs	r3, #21
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	3304      	adds	r3, #4
 80066bc:	f104 0215 	add.w	r2, r4, #21
 80066c0:	4290      	cmp	r0, r2
 80066c2:	bf38      	it	cc
 80066c4:	2304      	movcc	r3, #4
 80066c6:	f841 c003 	str.w	ip, [r1, r3]
 80066ca:	f1bc 0f00 	cmp.w	ip, #0
 80066ce:	d001      	beq.n	80066d4 <__lshift+0xac>
 80066d0:	f108 0602 	add.w	r6, r8, #2
 80066d4:	3e01      	subs	r6, #1
 80066d6:	4638      	mov	r0, r7
 80066d8:	4621      	mov	r1, r4
 80066da:	612e      	str	r6, [r5, #16]
 80066dc:	f7ff fd8c 	bl	80061f8 <_Bfree>
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80066ea:	3301      	adds	r3, #1
 80066ec:	e7c1      	b.n	8006672 <__lshift+0x4a>
 80066ee:	3904      	subs	r1, #4
 80066f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f4:	4298      	cmp	r0, r3
 80066f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80066fa:	d8f9      	bhi.n	80066f0 <__lshift+0xc8>
 80066fc:	e7ea      	b.n	80066d4 <__lshift+0xac>
 80066fe:	bf00      	nop
 8006700:	080089a9 	.word	0x080089a9
 8006704:	08008a4b 	.word	0x08008a4b

08006708 <__mcmp>:
 8006708:	4603      	mov	r3, r0
 800670a:	690a      	ldr	r2, [r1, #16]
 800670c:	6900      	ldr	r0, [r0, #16]
 800670e:	b530      	push	{r4, r5, lr}
 8006710:	1a80      	subs	r0, r0, r2
 8006712:	d10d      	bne.n	8006730 <__mcmp+0x28>
 8006714:	3314      	adds	r3, #20
 8006716:	3114      	adds	r1, #20
 8006718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800671c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006728:	4295      	cmp	r5, r2
 800672a:	d002      	beq.n	8006732 <__mcmp+0x2a>
 800672c:	d304      	bcc.n	8006738 <__mcmp+0x30>
 800672e:	2001      	movs	r0, #1
 8006730:	bd30      	pop	{r4, r5, pc}
 8006732:	42a3      	cmp	r3, r4
 8006734:	d3f4      	bcc.n	8006720 <__mcmp+0x18>
 8006736:	e7fb      	b.n	8006730 <__mcmp+0x28>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e7f8      	b.n	8006730 <__mcmp+0x28>
	...

08006740 <__mdiff>:
 8006740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	460d      	mov	r5, r1
 8006746:	4607      	mov	r7, r0
 8006748:	4611      	mov	r1, r2
 800674a:	4628      	mov	r0, r5
 800674c:	4614      	mov	r4, r2
 800674e:	f7ff ffdb 	bl	8006708 <__mcmp>
 8006752:	1e06      	subs	r6, r0, #0
 8006754:	d111      	bne.n	800677a <__mdiff+0x3a>
 8006756:	4631      	mov	r1, r6
 8006758:	4638      	mov	r0, r7
 800675a:	f7ff fd0d 	bl	8006178 <_Balloc>
 800675e:	4602      	mov	r2, r0
 8006760:	b928      	cbnz	r0, 800676e <__mdiff+0x2e>
 8006762:	f240 2132 	movw	r1, #562	; 0x232
 8006766:	4b3a      	ldr	r3, [pc, #232]	; (8006850 <__mdiff+0x110>)
 8006768:	483a      	ldr	r0, [pc, #232]	; (8006854 <__mdiff+0x114>)
 800676a:	f001 f997 	bl	8007a9c <__assert_func>
 800676e:	2301      	movs	r3, #1
 8006770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006774:	4610      	mov	r0, r2
 8006776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677a:	bfa4      	itt	ge
 800677c:	4623      	movge	r3, r4
 800677e:	462c      	movge	r4, r5
 8006780:	4638      	mov	r0, r7
 8006782:	6861      	ldr	r1, [r4, #4]
 8006784:	bfa6      	itte	ge
 8006786:	461d      	movge	r5, r3
 8006788:	2600      	movge	r6, #0
 800678a:	2601      	movlt	r6, #1
 800678c:	f7ff fcf4 	bl	8006178 <_Balloc>
 8006790:	4602      	mov	r2, r0
 8006792:	b918      	cbnz	r0, 800679c <__mdiff+0x5c>
 8006794:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006798:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <__mdiff+0x110>)
 800679a:	e7e5      	b.n	8006768 <__mdiff+0x28>
 800679c:	f102 0814 	add.w	r8, r2, #20
 80067a0:	46c2      	mov	sl, r8
 80067a2:	f04f 0c00 	mov.w	ip, #0
 80067a6:	6927      	ldr	r7, [r4, #16]
 80067a8:	60c6      	str	r6, [r0, #12]
 80067aa:	692e      	ldr	r6, [r5, #16]
 80067ac:	f104 0014 	add.w	r0, r4, #20
 80067b0:	f105 0914 	add.w	r9, r5, #20
 80067b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80067b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067bc:	3410      	adds	r4, #16
 80067be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80067c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80067c6:	fa1f f18b 	uxth.w	r1, fp
 80067ca:	448c      	add	ip, r1
 80067cc:	b299      	uxth	r1, r3
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	ebac 0101 	sub.w	r1, ip, r1
 80067d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067dc:	b289      	uxth	r1, r1
 80067de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80067e2:	454e      	cmp	r6, r9
 80067e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067e8:	f84a 3b04 	str.w	r3, [sl], #4
 80067ec:	d8e7      	bhi.n	80067be <__mdiff+0x7e>
 80067ee:	1b73      	subs	r3, r6, r5
 80067f0:	3b15      	subs	r3, #21
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	3515      	adds	r5, #21
 80067f8:	3304      	adds	r3, #4
 80067fa:	42ae      	cmp	r6, r5
 80067fc:	bf38      	it	cc
 80067fe:	2304      	movcc	r3, #4
 8006800:	4418      	add	r0, r3
 8006802:	4443      	add	r3, r8
 8006804:	461e      	mov	r6, r3
 8006806:	4605      	mov	r5, r0
 8006808:	4575      	cmp	r5, lr
 800680a:	d30e      	bcc.n	800682a <__mdiff+0xea>
 800680c:	f10e 0103 	add.w	r1, lr, #3
 8006810:	1a09      	subs	r1, r1, r0
 8006812:	f021 0103 	bic.w	r1, r1, #3
 8006816:	3803      	subs	r0, #3
 8006818:	4586      	cmp	lr, r0
 800681a:	bf38      	it	cc
 800681c:	2100      	movcc	r1, #0
 800681e:	4419      	add	r1, r3
 8006820:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006824:	b18b      	cbz	r3, 800684a <__mdiff+0x10a>
 8006826:	6117      	str	r7, [r2, #16]
 8006828:	e7a4      	b.n	8006774 <__mdiff+0x34>
 800682a:	f855 8b04 	ldr.w	r8, [r5], #4
 800682e:	fa1f f188 	uxth.w	r1, r8
 8006832:	4461      	add	r1, ip
 8006834:	140c      	asrs	r4, r1, #16
 8006836:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800683a:	b289      	uxth	r1, r1
 800683c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006840:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006844:	f846 1b04 	str.w	r1, [r6], #4
 8006848:	e7de      	b.n	8006808 <__mdiff+0xc8>
 800684a:	3f01      	subs	r7, #1
 800684c:	e7e8      	b.n	8006820 <__mdiff+0xe0>
 800684e:	bf00      	nop
 8006850:	080089a9 	.word	0x080089a9
 8006854:	08008a4b 	.word	0x08008a4b

08006858 <__ulp>:
 8006858:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <__ulp+0x48>)
 800685a:	400b      	ands	r3, r1
 800685c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006860:	2b00      	cmp	r3, #0
 8006862:	dd02      	ble.n	800686a <__ulp+0x12>
 8006864:	2000      	movs	r0, #0
 8006866:	4619      	mov	r1, r3
 8006868:	4770      	bx	lr
 800686a:	425b      	negs	r3, r3
 800686c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006870:	f04f 0000 	mov.w	r0, #0
 8006874:	f04f 0100 	mov.w	r1, #0
 8006878:	ea4f 5223 	mov.w	r2, r3, asr #20
 800687c:	da04      	bge.n	8006888 <__ulp+0x30>
 800687e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006882:	fa43 f102 	asr.w	r1, r3, r2
 8006886:	4770      	bx	lr
 8006888:	f1a2 0314 	sub.w	r3, r2, #20
 800688c:	2b1e      	cmp	r3, #30
 800688e:	bfd6      	itet	le
 8006890:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006894:	2301      	movgt	r3, #1
 8006896:	fa22 f303 	lsrle.w	r3, r2, r3
 800689a:	4618      	mov	r0, r3
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	7ff00000 	.word	0x7ff00000

080068a4 <__b2d>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	6907      	ldr	r7, [r0, #16]
 80068aa:	f100 0914 	add.w	r9, r0, #20
 80068ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80068b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80068b6:	f1a7 0804 	sub.w	r8, r7, #4
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff fd4e 	bl	800635c <__hi0bits>
 80068c0:	f1c0 0320 	rsb	r3, r0, #32
 80068c4:	280a      	cmp	r0, #10
 80068c6:	600b      	str	r3, [r1, #0]
 80068c8:	491f      	ldr	r1, [pc, #124]	; (8006948 <__b2d+0xa4>)
 80068ca:	dc17      	bgt.n	80068fc <__b2d+0x58>
 80068cc:	45c1      	cmp	r9, r8
 80068ce:	bf28      	it	cs
 80068d0:	2200      	movcs	r2, #0
 80068d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80068d6:	fa26 f30c 	lsr.w	r3, r6, ip
 80068da:	bf38      	it	cc
 80068dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80068e0:	ea43 0501 	orr.w	r5, r3, r1
 80068e4:	f100 0315 	add.w	r3, r0, #21
 80068e8:	fa06 f303 	lsl.w	r3, r6, r3
 80068ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80068f0:	ea43 0402 	orr.w	r4, r3, r2
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fc:	45c1      	cmp	r9, r8
 80068fe:	bf2e      	itee	cs
 8006900:	2200      	movcs	r2, #0
 8006902:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006906:	f1a7 0808 	subcc.w	r8, r7, #8
 800690a:	f1b0 030b 	subs.w	r3, r0, #11
 800690e:	d016      	beq.n	800693e <__b2d+0x9a>
 8006910:	f1c3 0720 	rsb	r7, r3, #32
 8006914:	fa22 f107 	lsr.w	r1, r2, r7
 8006918:	45c8      	cmp	r8, r9
 800691a:	fa06 f603 	lsl.w	r6, r6, r3
 800691e:	ea46 0601 	orr.w	r6, r6, r1
 8006922:	bf94      	ite	ls
 8006924:	2100      	movls	r1, #0
 8006926:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800692a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800692e:	fa02 f003 	lsl.w	r0, r2, r3
 8006932:	40f9      	lsrs	r1, r7
 8006934:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006938:	ea40 0401 	orr.w	r4, r0, r1
 800693c:	e7da      	b.n	80068f4 <__b2d+0x50>
 800693e:	4614      	mov	r4, r2
 8006940:	ea46 0501 	orr.w	r5, r6, r1
 8006944:	e7d6      	b.n	80068f4 <__b2d+0x50>
 8006946:	bf00      	nop
 8006948:	3ff00000 	.word	0x3ff00000

0800694c <__d2b>:
 800694c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006950:	2101      	movs	r1, #1
 8006952:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006956:	4690      	mov	r8, r2
 8006958:	461d      	mov	r5, r3
 800695a:	f7ff fc0d 	bl	8006178 <_Balloc>
 800695e:	4604      	mov	r4, r0
 8006960:	b930      	cbnz	r0, 8006970 <__d2b+0x24>
 8006962:	4602      	mov	r2, r0
 8006964:	f240 310a 	movw	r1, #778	; 0x30a
 8006968:	4b24      	ldr	r3, [pc, #144]	; (80069fc <__d2b+0xb0>)
 800696a:	4825      	ldr	r0, [pc, #148]	; (8006a00 <__d2b+0xb4>)
 800696c:	f001 f896 	bl	8007a9c <__assert_func>
 8006970:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006974:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006978:	bb2d      	cbnz	r5, 80069c6 <__d2b+0x7a>
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	f1b8 0300 	subs.w	r3, r8, #0
 8006980:	d026      	beq.n	80069d0 <__d2b+0x84>
 8006982:	4668      	mov	r0, sp
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	f7ff fd09 	bl	800639c <__lo0bits>
 800698a:	9900      	ldr	r1, [sp, #0]
 800698c:	b1f0      	cbz	r0, 80069cc <__d2b+0x80>
 800698e:	9a01      	ldr	r2, [sp, #4]
 8006990:	f1c0 0320 	rsb	r3, r0, #32
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	430b      	orrs	r3, r1
 800699a:	40c2      	lsrs	r2, r0
 800699c:	6163      	str	r3, [r4, #20]
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2102      	movne	r1, #2
 80069a8:	2101      	moveq	r1, #1
 80069aa:	61a3      	str	r3, [r4, #24]
 80069ac:	6121      	str	r1, [r4, #16]
 80069ae:	b1c5      	cbz	r5, 80069e2 <__d2b+0x96>
 80069b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069b4:	4405      	add	r5, r0
 80069b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069ba:	603d      	str	r5, [r7, #0]
 80069bc:	6030      	str	r0, [r6, #0]
 80069be:	4620      	mov	r0, r4
 80069c0:	b002      	add	sp, #8
 80069c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ca:	e7d6      	b.n	800697a <__d2b+0x2e>
 80069cc:	6161      	str	r1, [r4, #20]
 80069ce:	e7e7      	b.n	80069a0 <__d2b+0x54>
 80069d0:	a801      	add	r0, sp, #4
 80069d2:	f7ff fce3 	bl	800639c <__lo0bits>
 80069d6:	2101      	movs	r1, #1
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	6121      	str	r1, [r4, #16]
 80069dc:	6163      	str	r3, [r4, #20]
 80069de:	3020      	adds	r0, #32
 80069e0:	e7e5      	b.n	80069ae <__d2b+0x62>
 80069e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80069e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069ea:	6038      	str	r0, [r7, #0]
 80069ec:	6918      	ldr	r0, [r3, #16]
 80069ee:	f7ff fcb5 	bl	800635c <__hi0bits>
 80069f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80069f6:	6031      	str	r1, [r6, #0]
 80069f8:	e7e1      	b.n	80069be <__d2b+0x72>
 80069fa:	bf00      	nop
 80069fc:	080089a9 	.word	0x080089a9
 8006a00:	08008a4b 	.word	0x08008a4b

08006a04 <__ratio>:
 8006a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	4688      	mov	r8, r1
 8006a0a:	4669      	mov	r1, sp
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	f7ff ff49 	bl	80068a4 <__b2d>
 8006a12:	460f      	mov	r7, r1
 8006a14:	4604      	mov	r4, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	a901      	add	r1, sp, #4
 8006a1c:	f7ff ff42 	bl	80068a4 <__b2d>
 8006a20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a28:	468b      	mov	fp, r1
 8006a2a:	eba3 0c02 	sub.w	ip, r3, r2
 8006a2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfd5      	itete	le
 8006a3c:	460a      	movle	r2, r1
 8006a3e:	462a      	movgt	r2, r5
 8006a40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a48:	bfd8      	it	le
 8006a4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006a4e:	465b      	mov	r3, fp
 8006a50:	4602      	mov	r2, r0
 8006a52:	4639      	mov	r1, r7
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7f9 fe73 	bl	8000740 <__aeabi_ddiv>
 8006a5a:	b003      	add	sp, #12
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a60 <__copybits>:
 8006a60:	3901      	subs	r1, #1
 8006a62:	b570      	push	{r4, r5, r6, lr}
 8006a64:	1149      	asrs	r1, r1, #5
 8006a66:	6914      	ldr	r4, [r2, #16]
 8006a68:	3101      	adds	r1, #1
 8006a6a:	f102 0314 	add.w	r3, r2, #20
 8006a6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a76:	1f05      	subs	r5, r0, #4
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d30c      	bcc.n	8006a96 <__copybits+0x36>
 8006a7c:	1aa3      	subs	r3, r4, r2
 8006a7e:	3b11      	subs	r3, #17
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	3211      	adds	r2, #17
 8006a86:	42a2      	cmp	r2, r4
 8006a88:	bf88      	it	hi
 8006a8a:	2300      	movhi	r3, #0
 8006a8c:	4418      	add	r0, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4288      	cmp	r0, r1
 8006a92:	d305      	bcc.n	8006aa0 <__copybits+0x40>
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a9e:	e7eb      	b.n	8006a78 <__copybits+0x18>
 8006aa0:	f840 3b04 	str.w	r3, [r0], #4
 8006aa4:	e7f4      	b.n	8006a90 <__copybits+0x30>

08006aa6 <__any_on>:
 8006aa6:	f100 0214 	add.w	r2, r0, #20
 8006aaa:	6900      	ldr	r0, [r0, #16]
 8006aac:	114b      	asrs	r3, r1, #5
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	db11      	blt.n	8006ad8 <__any_on+0x32>
 8006ab4:	dd0a      	ble.n	8006acc <__any_on+0x26>
 8006ab6:	f011 011f 	ands.w	r1, r1, #31
 8006aba:	d007      	beq.n	8006acc <__any_on+0x26>
 8006abc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ac0:	fa24 f001 	lsr.w	r0, r4, r1
 8006ac4:	fa00 f101 	lsl.w	r1, r0, r1
 8006ac8:	428c      	cmp	r4, r1
 8006aca:	d10b      	bne.n	8006ae4 <__any_on+0x3e>
 8006acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d803      	bhi.n	8006adc <__any_on+0x36>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	4603      	mov	r3, r0
 8006ada:	e7f7      	b.n	8006acc <__any_on+0x26>
 8006adc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0f5      	beq.n	8006ad0 <__any_on+0x2a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7f6      	b.n	8006ad6 <__any_on+0x30>

08006ae8 <_calloc_r>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	fba1 5402 	umull	r5, r4, r1, r2
 8006aee:	b934      	cbnz	r4, 8006afe <_calloc_r+0x16>
 8006af0:	4629      	mov	r1, r5
 8006af2:	f000 f82d 	bl	8006b50 <_malloc_r>
 8006af6:	4606      	mov	r6, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <_calloc_r+0x1e>
 8006afa:	4630      	mov	r0, r6
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	220c      	movs	r2, #12
 8006b00:	2600      	movs	r6, #0
 8006b02:	6002      	str	r2, [r0, #0]
 8006b04:	e7f9      	b.n	8006afa <_calloc_r+0x12>
 8006b06:	462a      	mov	r2, r5
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7fd fe3f 	bl	800478c <memset>
 8006b0e:	e7f4      	b.n	8006afa <_calloc_r+0x12>

08006b10 <sbrk_aligned>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4e0e      	ldr	r6, [pc, #56]	; (8006b4c <sbrk_aligned+0x3c>)
 8006b14:	460c      	mov	r4, r1
 8006b16:	6831      	ldr	r1, [r6, #0]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b911      	cbnz	r1, 8006b22 <sbrk_aligned+0x12>
 8006b1c:	f000 febc 	bl	8007898 <_sbrk_r>
 8006b20:	6030      	str	r0, [r6, #0]
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 feb7 	bl	8007898 <_sbrk_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	d00a      	beq.n	8006b44 <sbrk_aligned+0x34>
 8006b2e:	1cc4      	adds	r4, r0, #3
 8006b30:	f024 0403 	bic.w	r4, r4, #3
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d007      	beq.n	8006b48 <sbrk_aligned+0x38>
 8006b38:	1a21      	subs	r1, r4, r0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 feac 	bl	8007898 <_sbrk_r>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d101      	bne.n	8006b48 <sbrk_aligned+0x38>
 8006b44:	f04f 34ff 	mov.w	r4, #4294967295
 8006b48:	4620      	mov	r0, r4
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	200003dc 	.word	0x200003dc

08006b50 <_malloc_r>:
 8006b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	1ccd      	adds	r5, r1, #3
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	4607      	mov	r7, r0
 8006b66:	db01      	blt.n	8006b6c <_malloc_r+0x1c>
 8006b68:	42a9      	cmp	r1, r5
 8006b6a:	d905      	bls.n	8006b78 <_malloc_r+0x28>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	2600      	movs	r6, #0
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4630      	mov	r0, r6
 8006b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b78:	4e2e      	ldr	r6, [pc, #184]	; (8006c34 <_malloc_r+0xe4>)
 8006b7a:	f001 f9a5 	bl	8007ec8 <__malloc_lock>
 8006b7e:	6833      	ldr	r3, [r6, #0]
 8006b80:	461c      	mov	r4, r3
 8006b82:	bb34      	cbnz	r4, 8006bd2 <_malloc_r+0x82>
 8006b84:	4629      	mov	r1, r5
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7ff ffc2 	bl	8006b10 <sbrk_aligned>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	4604      	mov	r4, r0
 8006b90:	d14d      	bne.n	8006c2e <_malloc_r+0xde>
 8006b92:	6834      	ldr	r4, [r6, #0]
 8006b94:	4626      	mov	r6, r4
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d140      	bne.n	8006c1c <_malloc_r+0xcc>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	eb04 0803 	add.w	r8, r4, r3
 8006ba4:	f000 fe78 	bl	8007898 <_sbrk_r>
 8006ba8:	4580      	cmp	r8, r0
 8006baa:	d13a      	bne.n	8006c22 <_malloc_r+0xd2>
 8006bac:	6821      	ldr	r1, [r4, #0]
 8006bae:	3503      	adds	r5, #3
 8006bb0:	1a6d      	subs	r5, r5, r1
 8006bb2:	f025 0503 	bic.w	r5, r5, #3
 8006bb6:	3508      	adds	r5, #8
 8006bb8:	2d0c      	cmp	r5, #12
 8006bba:	bf38      	it	cc
 8006bbc:	250c      	movcc	r5, #12
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7ff ffa5 	bl	8006b10 <sbrk_aligned>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d02b      	beq.n	8006c22 <_malloc_r+0xd2>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	442b      	add	r3, r5
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	e00e      	b.n	8006bf0 <_malloc_r+0xa0>
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	1b52      	subs	r2, r2, r5
 8006bd6:	d41e      	bmi.n	8006c16 <_malloc_r+0xc6>
 8006bd8:	2a0b      	cmp	r2, #11
 8006bda:	d916      	bls.n	8006c0a <_malloc_r+0xba>
 8006bdc:	1961      	adds	r1, r4, r5
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	6025      	str	r5, [r4, #0]
 8006be2:	bf18      	it	ne
 8006be4:	6059      	strne	r1, [r3, #4]
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	bf08      	it	eq
 8006bea:	6031      	streq	r1, [r6, #0]
 8006bec:	5162      	str	r2, [r4, r5]
 8006bee:	604b      	str	r3, [r1, #4]
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f104 060b 	add.w	r6, r4, #11
 8006bf6:	f001 f96d 	bl	8007ed4 <__malloc_unlock>
 8006bfa:	f026 0607 	bic.w	r6, r6, #7
 8006bfe:	1d23      	adds	r3, r4, #4
 8006c00:	1af2      	subs	r2, r6, r3
 8006c02:	d0b6      	beq.n	8006b72 <_malloc_r+0x22>
 8006c04:	1b9b      	subs	r3, r3, r6
 8006c06:	50a3      	str	r3, [r4, r2]
 8006c08:	e7b3      	b.n	8006b72 <_malloc_r+0x22>
 8006c0a:	6862      	ldr	r2, [r4, #4]
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	bf0c      	ite	eq
 8006c10:	6032      	streq	r2, [r6, #0]
 8006c12:	605a      	strne	r2, [r3, #4]
 8006c14:	e7ec      	b.n	8006bf0 <_malloc_r+0xa0>
 8006c16:	4623      	mov	r3, r4
 8006c18:	6864      	ldr	r4, [r4, #4]
 8006c1a:	e7b2      	b.n	8006b82 <_malloc_r+0x32>
 8006c1c:	4634      	mov	r4, r6
 8006c1e:	6876      	ldr	r6, [r6, #4]
 8006c20:	e7b9      	b.n	8006b96 <_malloc_r+0x46>
 8006c22:	230c      	movs	r3, #12
 8006c24:	4638      	mov	r0, r7
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	f001 f954 	bl	8007ed4 <__malloc_unlock>
 8006c2c:	e7a1      	b.n	8006b72 <_malloc_r+0x22>
 8006c2e:	6025      	str	r5, [r4, #0]
 8006c30:	e7de      	b.n	8006bf0 <_malloc_r+0xa0>
 8006c32:	bf00      	nop
 8006c34:	200003d8 	.word	0x200003d8

08006c38 <__ssputs_r>:
 8006c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	688e      	ldr	r6, [r1, #8]
 8006c3e:	4682      	mov	sl, r0
 8006c40:	429e      	cmp	r6, r3
 8006c42:	460c      	mov	r4, r1
 8006c44:	4690      	mov	r8, r2
 8006c46:	461f      	mov	r7, r3
 8006c48:	d838      	bhi.n	8006cbc <__ssputs_r+0x84>
 8006c4a:	898a      	ldrh	r2, [r1, #12]
 8006c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c50:	d032      	beq.n	8006cb8 <__ssputs_r+0x80>
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	6909      	ldr	r1, [r1, #16]
 8006c56:	3301      	adds	r3, #1
 8006c58:	eba5 0901 	sub.w	r9, r5, r1
 8006c5c:	6965      	ldr	r5, [r4, #20]
 8006c5e:	444b      	add	r3, r9
 8006c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c68:	106d      	asrs	r5, r5, #1
 8006c6a:	429d      	cmp	r5, r3
 8006c6c:	bf38      	it	cc
 8006c6e:	461d      	movcc	r5, r3
 8006c70:	0553      	lsls	r3, r2, #21
 8006c72:	d531      	bpl.n	8006cd8 <__ssputs_r+0xa0>
 8006c74:	4629      	mov	r1, r5
 8006c76:	f7ff ff6b 	bl	8006b50 <_malloc_r>
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	b950      	cbnz	r0, 8006c94 <__ssputs_r+0x5c>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	f8ca 3000 	str.w	r3, [sl]
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	464a      	mov	r2, r9
 8006c96:	6921      	ldr	r1, [r4, #16]
 8006c98:	f7fd fd6a 	bl	8004770 <memcpy>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	6126      	str	r6, [r4, #16]
 8006caa:	444e      	add	r6, r9
 8006cac:	6026      	str	r6, [r4, #0]
 8006cae:	463e      	mov	r6, r7
 8006cb0:	6165      	str	r5, [r4, #20]
 8006cb2:	eba5 0509 	sub.w	r5, r5, r9
 8006cb6:	60a5      	str	r5, [r4, #8]
 8006cb8:	42be      	cmp	r6, r7
 8006cba:	d900      	bls.n	8006cbe <__ssputs_r+0x86>
 8006cbc:	463e      	mov	r6, r7
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	6820      	ldr	r0, [r4, #0]
 8006cc4:	f001 f8e6 	bl	8007e94 <memmove>
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	1b9b      	subs	r3, r3, r6
 8006cce:	60a3      	str	r3, [r4, #8]
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	4433      	add	r3, r6
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	e7db      	b.n	8006c90 <__ssputs_r+0x58>
 8006cd8:	462a      	mov	r2, r5
 8006cda:	f001 f949 	bl	8007f70 <_realloc_r>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d1e1      	bne.n	8006ca8 <__ssputs_r+0x70>
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	6921      	ldr	r1, [r4, #16]
 8006ce8:	f001 f8fa 	bl	8007ee0 <_free_r>
 8006cec:	e7c7      	b.n	8006c7e <__ssputs_r+0x46>
	...

08006cf0 <_svfiprintf_r>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	898b      	ldrh	r3, [r1, #12]
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4614      	mov	r4, r2
 8006d00:	b09d      	sub	sp, #116	; 0x74
 8006d02:	d50e      	bpl.n	8006d22 <_svfiprintf_r+0x32>
 8006d04:	690b      	ldr	r3, [r1, #16]
 8006d06:	b963      	cbnz	r3, 8006d22 <_svfiprintf_r+0x32>
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	f7ff ff21 	bl	8006b50 <_malloc_r>
 8006d0e:	6028      	str	r0, [r5, #0]
 8006d10:	6128      	str	r0, [r5, #16]
 8006d12:	b920      	cbnz	r0, 8006d1e <_svfiprintf_r+0x2e>
 8006d14:	230c      	movs	r3, #12
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	e0d1      	b.n	8006ec2 <_svfiprintf_r+0x1d2>
 8006d1e:	2340      	movs	r3, #64	; 0x40
 8006d20:	616b      	str	r3, [r5, #20]
 8006d22:	2300      	movs	r3, #0
 8006d24:	9309      	str	r3, [sp, #36]	; 0x24
 8006d26:	2320      	movs	r3, #32
 8006d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d2c:	2330      	movs	r3, #48	; 0x30
 8006d2e:	f04f 0901 	mov.w	r9, #1
 8006d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006edc <_svfiprintf_r+0x1ec>
 8006d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3e:	4623      	mov	r3, r4
 8006d40:	469a      	mov	sl, r3
 8006d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d46:	b10a      	cbz	r2, 8006d4c <_svfiprintf_r+0x5c>
 8006d48:	2a25      	cmp	r2, #37	; 0x25
 8006d4a:	d1f9      	bne.n	8006d40 <_svfiprintf_r+0x50>
 8006d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d50:	d00b      	beq.n	8006d6a <_svfiprintf_r+0x7a>
 8006d52:	465b      	mov	r3, fp
 8006d54:	4622      	mov	r2, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ff6d 	bl	8006c38 <__ssputs_r>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f000 80aa 	beq.w	8006eb8 <_svfiprintf_r+0x1c8>
 8006d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d66:	445a      	add	r2, fp
 8006d68:	9209      	str	r2, [sp, #36]	; 0x24
 8006d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80a2 	beq.w	8006eb8 <_svfiprintf_r+0x1c8>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d7e:	f10a 0a01 	add.w	sl, sl, #1
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9307      	str	r3, [sp, #28]
 8006d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	4851      	ldr	r0, [pc, #324]	; (8006edc <_svfiprintf_r+0x1ec>)
 8006d96:	f001 f86f 	bl	8007e78 <memchr>
 8006d9a:	9a04      	ldr	r2, [sp, #16]
 8006d9c:	b9d8      	cbnz	r0, 8006dd6 <_svfiprintf_r+0xe6>
 8006d9e:	06d0      	lsls	r0, r2, #27
 8006da0:	bf44      	itt	mi
 8006da2:	2320      	movmi	r3, #32
 8006da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da8:	0711      	lsls	r1, r2, #28
 8006daa:	bf44      	itt	mi
 8006dac:	232b      	movmi	r3, #43	; 0x2b
 8006dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db2:	f89a 3000 	ldrb.w	r3, [sl]
 8006db6:	2b2a      	cmp	r3, #42	; 0x2a
 8006db8:	d015      	beq.n	8006de6 <_svfiprintf_r+0xf6>
 8006dba:	4654      	mov	r4, sl
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	f04f 0c0a 	mov.w	ip, #10
 8006dc2:	9a07      	ldr	r2, [sp, #28]
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dca:	3b30      	subs	r3, #48	; 0x30
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	d94e      	bls.n	8006e6e <_svfiprintf_r+0x17e>
 8006dd0:	b1b0      	cbz	r0, 8006e00 <_svfiprintf_r+0x110>
 8006dd2:	9207      	str	r2, [sp, #28]
 8006dd4:	e014      	b.n	8006e00 <_svfiprintf_r+0x110>
 8006dd6:	eba0 0308 	sub.w	r3, r0, r8
 8006dda:	fa09 f303 	lsl.w	r3, r9, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	46a2      	mov	sl, r4
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	e7d2      	b.n	8006d8c <_svfiprintf_r+0x9c>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	1d19      	adds	r1, r3, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	9103      	str	r1, [sp, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbb      	ittet	lt
 8006df2:	425b      	neglt	r3, r3
 8006df4:	f042 0202 	orrlt.w	r2, r2, #2
 8006df8:	9307      	strge	r3, [sp, #28]
 8006dfa:	9307      	strlt	r3, [sp, #28]
 8006dfc:	bfb8      	it	lt
 8006dfe:	9204      	strlt	r2, [sp, #16]
 8006e00:	7823      	ldrb	r3, [r4, #0]
 8006e02:	2b2e      	cmp	r3, #46	; 0x2e
 8006e04:	d10c      	bne.n	8006e20 <_svfiprintf_r+0x130>
 8006e06:	7863      	ldrb	r3, [r4, #1]
 8006e08:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0a:	d135      	bne.n	8006e78 <_svfiprintf_r+0x188>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	3402      	adds	r4, #2
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9203      	str	r2, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfb8      	it	lt
 8006e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006ee0 <_svfiprintf_r+0x1f0>
 8006e24:	2203      	movs	r2, #3
 8006e26:	4650      	mov	r0, sl
 8006e28:	7821      	ldrb	r1, [r4, #0]
 8006e2a:	f001 f825 	bl	8007e78 <memchr>
 8006e2e:	b140      	cbz	r0, 8006e42 <_svfiprintf_r+0x152>
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	eba0 000a 	sub.w	r0, r0, sl
 8006e36:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	3401      	adds	r4, #1
 8006e3e:	4303      	orrs	r3, r0
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e46:	2206      	movs	r2, #6
 8006e48:	4826      	ldr	r0, [pc, #152]	; (8006ee4 <_svfiprintf_r+0x1f4>)
 8006e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e4e:	f001 f813 	bl	8007e78 <memchr>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d038      	beq.n	8006ec8 <_svfiprintf_r+0x1d8>
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <_svfiprintf_r+0x1f8>)
 8006e58:	bb1b      	cbnz	r3, 8006ea2 <_svfiprintf_r+0x1b2>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	3308      	adds	r3, #8
 8006e64:	9303      	str	r3, [sp, #12]
 8006e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e68:	4433      	add	r3, r6
 8006e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6c:	e767      	b.n	8006d3e <_svfiprintf_r+0x4e>
 8006e6e:	460c      	mov	r4, r1
 8006e70:	2001      	movs	r0, #1
 8006e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e76:	e7a5      	b.n	8006dc4 <_svfiprintf_r+0xd4>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f04f 0c0a 	mov.w	ip, #10
 8006e7e:	4619      	mov	r1, r3
 8006e80:	3401      	adds	r4, #1
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	4620      	mov	r0, r4
 8006e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8a:	3a30      	subs	r2, #48	; 0x30
 8006e8c:	2a09      	cmp	r2, #9
 8006e8e:	d903      	bls.n	8006e98 <_svfiprintf_r+0x1a8>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0c5      	beq.n	8006e20 <_svfiprintf_r+0x130>
 8006e94:	9105      	str	r1, [sp, #20]
 8006e96:	e7c3      	b.n	8006e20 <_svfiprintf_r+0x130>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea0:	e7f0      	b.n	8006e84 <_svfiprintf_r+0x194>
 8006ea2:	ab03      	add	r3, sp, #12
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <_svfiprintf_r+0x1fc>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	f3af 8000 	nop.w
 8006eb2:	1c42      	adds	r2, r0, #1
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	d1d6      	bne.n	8006e66 <_svfiprintf_r+0x176>
 8006eb8:	89ab      	ldrh	r3, [r5, #12]
 8006eba:	065b      	lsls	r3, r3, #25
 8006ebc:	f53f af2c 	bmi.w	8006d18 <_svfiprintf_r+0x28>
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	b01d      	add	sp, #116	; 0x74
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4638      	mov	r0, r7
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <_svfiprintf_r+0x1fc>)
 8006ed2:	a904      	add	r1, sp, #16
 8006ed4:	f000 fa50 	bl	8007378 <_printf_i>
 8006ed8:	e7eb      	b.n	8006eb2 <_svfiprintf_r+0x1c2>
 8006eda:	bf00      	nop
 8006edc:	08008ba4 	.word	0x08008ba4
 8006ee0:	08008baa 	.word	0x08008baa
 8006ee4:	08008bae 	.word	0x08008bae
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	08006c39 	.word	0x08006c39

08006ef0 <_sungetc_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	1c4b      	adds	r3, r1, #1
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	d103      	bne.n	8006f00 <_sungetc_r+0x10>
 8006ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8006efc:	4628      	mov	r0, r5
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	8993      	ldrh	r3, [r2, #12]
 8006f02:	b2cd      	uxtb	r5, r1
 8006f04:	f023 0320 	bic.w	r3, r3, #32
 8006f08:	8193      	strh	r3, [r2, #12]
 8006f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	b18b      	cbz	r3, 8006f34 <_sungetc_r+0x44>
 8006f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f12:	4293      	cmp	r3, r2
 8006f14:	dd08      	ble.n	8006f28 <_sungetc_r+0x38>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	1e5a      	subs	r2, r3, #1
 8006f1a:	6022      	str	r2, [r4, #0]
 8006f1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	3301      	adds	r3, #1
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	e7e9      	b.n	8006efc <_sungetc_r+0xc>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f000 fd71 	bl	8007a10 <__submore>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d0f1      	beq.n	8006f16 <_sungetc_r+0x26>
 8006f32:	e7e1      	b.n	8006ef8 <_sungetc_r+0x8>
 8006f34:	6921      	ldr	r1, [r4, #16]
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	b151      	cbz	r1, 8006f50 <_sungetc_r+0x60>
 8006f3a:	4299      	cmp	r1, r3
 8006f3c:	d208      	bcs.n	8006f50 <_sungetc_r+0x60>
 8006f3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006f42:	42a9      	cmp	r1, r5
 8006f44:	d104      	bne.n	8006f50 <_sungetc_r+0x60>
 8006f46:	3b01      	subs	r3, #1
 8006f48:	3201      	adds	r2, #1
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	6062      	str	r2, [r4, #4]
 8006f4e:	e7d5      	b.n	8006efc <_sungetc_r+0xc>
 8006f50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f58:	6363      	str	r3, [r4, #52]	; 0x34
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f5e:	4623      	mov	r3, r4
 8006f60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	2301      	movs	r3, #1
 8006f68:	e7dc      	b.n	8006f24 <_sungetc_r+0x34>

08006f6a <__ssrefill_r>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006f70:	b169      	cbz	r1, 8006f8e <__ssrefill_r+0x24>
 8006f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d001      	beq.n	8006f7e <__ssrefill_r+0x14>
 8006f7a:	f000 ffb1 	bl	8007ee0 <_free_r>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f82:	6360      	str	r0, [r4, #52]	; 0x34
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	b113      	cbz	r3, 8006f8e <__ssrefill_r+0x24>
 8006f88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	2300      	movs	r3, #0
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0320 	orr.w	r3, r3, #32
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	e7f3      	b.n	8006f8c <__ssrefill_r+0x22>

08006fa4 <__ssvfiscanf_r>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	2100      	movs	r1, #0
 8006fac:	4606      	mov	r6, r0
 8006fae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006fb2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006fb6:	49a7      	ldr	r1, [pc, #668]	; (8007254 <__ssvfiscanf_r+0x2b0>)
 8006fb8:	f10d 0804 	add.w	r8, sp, #4
 8006fbc:	91a0      	str	r1, [sp, #640]	; 0x280
 8006fbe:	49a6      	ldr	r1, [pc, #664]	; (8007258 <__ssvfiscanf_r+0x2b4>)
 8006fc0:	4fa6      	ldr	r7, [pc, #664]	; (800725c <__ssvfiscanf_r+0x2b8>)
 8006fc2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8007260 <__ssvfiscanf_r+0x2bc>
 8006fc6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006fca:	91a1      	str	r1, [sp, #644]	; 0x284
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	7813      	ldrb	r3, [r2, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 815c 	beq.w	800728e <__ssvfiscanf_r+0x2ea>
 8006fd6:	5dd9      	ldrb	r1, [r3, r7]
 8006fd8:	1c55      	adds	r5, r2, #1
 8006fda:	f011 0108 	ands.w	r1, r1, #8
 8006fde:	d019      	beq.n	8007014 <__ssvfiscanf_r+0x70>
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd0f      	ble.n	8007006 <__ssvfiscanf_r+0x62>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	5cba      	ldrb	r2, [r7, r2]
 8006fec:	0712      	lsls	r2, r2, #28
 8006fee:	d401      	bmi.n	8006ff4 <__ssvfiscanf_r+0x50>
 8006ff0:	462a      	mov	r2, r5
 8006ff2:	e7ec      	b.n	8006fce <__ssvfiscanf_r+0x2a>
 8006ff4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	9245      	str	r2, [sp, #276]	; 0x114
 8006ffc:	6862      	ldr	r2, [r4, #4]
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	3a01      	subs	r2, #1
 8007002:	6062      	str	r2, [r4, #4]
 8007004:	e7ec      	b.n	8006fe0 <__ssvfiscanf_r+0x3c>
 8007006:	4621      	mov	r1, r4
 8007008:	4630      	mov	r0, r6
 800700a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800700c:	4798      	blx	r3
 800700e:	2800      	cmp	r0, #0
 8007010:	d0e9      	beq.n	8006fe6 <__ssvfiscanf_r+0x42>
 8007012:	e7ed      	b.n	8006ff0 <__ssvfiscanf_r+0x4c>
 8007014:	2b25      	cmp	r3, #37	; 0x25
 8007016:	d012      	beq.n	800703e <__ssvfiscanf_r+0x9a>
 8007018:	469a      	mov	sl, r3
 800701a:	6863      	ldr	r3, [r4, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f340 8094 	ble.w	800714a <__ssvfiscanf_r+0x1a6>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	7813      	ldrb	r3, [r2, #0]
 8007026:	4553      	cmp	r3, sl
 8007028:	f040 8131 	bne.w	800728e <__ssvfiscanf_r+0x2ea>
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	3201      	adds	r2, #1
 8007030:	3b01      	subs	r3, #1
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007036:	6022      	str	r2, [r4, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	9345      	str	r3, [sp, #276]	; 0x114
 800703c:	e7d8      	b.n	8006ff0 <__ssvfiscanf_r+0x4c>
 800703e:	9141      	str	r1, [sp, #260]	; 0x104
 8007040:	9143      	str	r1, [sp, #268]	; 0x10c
 8007042:	7853      	ldrb	r3, [r2, #1]
 8007044:	2b2a      	cmp	r3, #42	; 0x2a
 8007046:	bf04      	itt	eq
 8007048:	2310      	moveq	r3, #16
 800704a:	1c95      	addeq	r5, r2, #2
 800704c:	f04f 020a 	mov.w	r2, #10
 8007050:	bf08      	it	eq
 8007052:	9341      	streq	r3, [sp, #260]	; 0x104
 8007054:	46aa      	mov	sl, r5
 8007056:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800705a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800705e:	2b09      	cmp	r3, #9
 8007060:	d91d      	bls.n	800709e <__ssvfiscanf_r+0xfa>
 8007062:	2203      	movs	r2, #3
 8007064:	487e      	ldr	r0, [pc, #504]	; (8007260 <__ssvfiscanf_r+0x2bc>)
 8007066:	f000 ff07 	bl	8007e78 <memchr>
 800706a:	b140      	cbz	r0, 800707e <__ssvfiscanf_r+0xda>
 800706c:	2301      	movs	r3, #1
 800706e:	4655      	mov	r5, sl
 8007070:	eba0 0009 	sub.w	r0, r0, r9
 8007074:	fa03 f000 	lsl.w	r0, r3, r0
 8007078:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800707a:	4318      	orrs	r0, r3
 800707c:	9041      	str	r0, [sp, #260]	; 0x104
 800707e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007082:	2b78      	cmp	r3, #120	; 0x78
 8007084:	d806      	bhi.n	8007094 <__ssvfiscanf_r+0xf0>
 8007086:	2b57      	cmp	r3, #87	; 0x57
 8007088:	d810      	bhi.n	80070ac <__ssvfiscanf_r+0x108>
 800708a:	2b25      	cmp	r3, #37	; 0x25
 800708c:	d0c4      	beq.n	8007018 <__ssvfiscanf_r+0x74>
 800708e:	d857      	bhi.n	8007140 <__ssvfiscanf_r+0x19c>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d065      	beq.n	8007160 <__ssvfiscanf_r+0x1bc>
 8007094:	2303      	movs	r3, #3
 8007096:	9347      	str	r3, [sp, #284]	; 0x11c
 8007098:	230a      	movs	r3, #10
 800709a:	9342      	str	r3, [sp, #264]	; 0x108
 800709c:	e072      	b.n	8007184 <__ssvfiscanf_r+0x1e0>
 800709e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80070a0:	4655      	mov	r5, sl
 80070a2:	fb02 1103 	mla	r1, r2, r3, r1
 80070a6:	3930      	subs	r1, #48	; 0x30
 80070a8:	9143      	str	r1, [sp, #268]	; 0x10c
 80070aa:	e7d3      	b.n	8007054 <__ssvfiscanf_r+0xb0>
 80070ac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80070b0:	2a20      	cmp	r2, #32
 80070b2:	d8ef      	bhi.n	8007094 <__ssvfiscanf_r+0xf0>
 80070b4:	a101      	add	r1, pc, #4	; (adr r1, 80070bc <__ssvfiscanf_r+0x118>)
 80070b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	0800716f 	.word	0x0800716f
 80070c0:	08007095 	.word	0x08007095
 80070c4:	08007095 	.word	0x08007095
 80070c8:	080071cd 	.word	0x080071cd
 80070cc:	08007095 	.word	0x08007095
 80070d0:	08007095 	.word	0x08007095
 80070d4:	08007095 	.word	0x08007095
 80070d8:	08007095 	.word	0x08007095
 80070dc:	08007095 	.word	0x08007095
 80070e0:	08007095 	.word	0x08007095
 80070e4:	08007095 	.word	0x08007095
 80070e8:	080071e3 	.word	0x080071e3
 80070ec:	080071b9 	.word	0x080071b9
 80070f0:	08007147 	.word	0x08007147
 80070f4:	08007147 	.word	0x08007147
 80070f8:	08007147 	.word	0x08007147
 80070fc:	08007095 	.word	0x08007095
 8007100:	080071bd 	.word	0x080071bd
 8007104:	08007095 	.word	0x08007095
 8007108:	08007095 	.word	0x08007095
 800710c:	08007095 	.word	0x08007095
 8007110:	08007095 	.word	0x08007095
 8007114:	080071f3 	.word	0x080071f3
 8007118:	080071c5 	.word	0x080071c5
 800711c:	08007167 	.word	0x08007167
 8007120:	08007095 	.word	0x08007095
 8007124:	08007095 	.word	0x08007095
 8007128:	080071ef 	.word	0x080071ef
 800712c:	08007095 	.word	0x08007095
 8007130:	080071b9 	.word	0x080071b9
 8007134:	08007095 	.word	0x08007095
 8007138:	08007095 	.word	0x08007095
 800713c:	0800716f 	.word	0x0800716f
 8007140:	3b45      	subs	r3, #69	; 0x45
 8007142:	2b02      	cmp	r3, #2
 8007144:	d8a6      	bhi.n	8007094 <__ssvfiscanf_r+0xf0>
 8007146:	2305      	movs	r3, #5
 8007148:	e01b      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 800714a:	4621      	mov	r1, r4
 800714c:	4630      	mov	r0, r6
 800714e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007150:	4798      	blx	r3
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f af65 	beq.w	8007022 <__ssvfiscanf_r+0x7e>
 8007158:	9844      	ldr	r0, [sp, #272]	; 0x110
 800715a:	2800      	cmp	r0, #0
 800715c:	f040 808d 	bne.w	800727a <__ssvfiscanf_r+0x2d6>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	e08f      	b.n	8007286 <__ssvfiscanf_r+0x2e2>
 8007166:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007168:	f042 0220 	orr.w	r2, r2, #32
 800716c:	9241      	str	r2, [sp, #260]	; 0x104
 800716e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007174:	9241      	str	r2, [sp, #260]	; 0x104
 8007176:	2210      	movs	r2, #16
 8007178:	2b6f      	cmp	r3, #111	; 0x6f
 800717a:	bf34      	ite	cc
 800717c:	2303      	movcc	r3, #3
 800717e:	2304      	movcs	r3, #4
 8007180:	9242      	str	r2, [sp, #264]	; 0x108
 8007182:	9347      	str	r3, [sp, #284]	; 0x11c
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd42      	ble.n	8007210 <__ssvfiscanf_r+0x26c>
 800718a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800718c:	0659      	lsls	r1, r3, #25
 800718e:	d404      	bmi.n	800719a <__ssvfiscanf_r+0x1f6>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	5cba      	ldrb	r2, [r7, r2]
 8007196:	0712      	lsls	r2, r2, #28
 8007198:	d441      	bmi.n	800721e <__ssvfiscanf_r+0x27a>
 800719a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800719c:	2b02      	cmp	r3, #2
 800719e:	dc50      	bgt.n	8007242 <__ssvfiscanf_r+0x29e>
 80071a0:	466b      	mov	r3, sp
 80071a2:	4622      	mov	r2, r4
 80071a4:	4630      	mov	r0, r6
 80071a6:	a941      	add	r1, sp, #260	; 0x104
 80071a8:	f000 fa0c 	bl	80075c4 <_scanf_chars>
 80071ac:	2801      	cmp	r0, #1
 80071ae:	d06e      	beq.n	800728e <__ssvfiscanf_r+0x2ea>
 80071b0:	2802      	cmp	r0, #2
 80071b2:	f47f af1d 	bne.w	8006ff0 <__ssvfiscanf_r+0x4c>
 80071b6:	e7cf      	b.n	8007158 <__ssvfiscanf_r+0x1b4>
 80071b8:	220a      	movs	r2, #10
 80071ba:	e7dd      	b.n	8007178 <__ssvfiscanf_r+0x1d4>
 80071bc:	2300      	movs	r3, #0
 80071be:	9342      	str	r3, [sp, #264]	; 0x108
 80071c0:	2303      	movs	r3, #3
 80071c2:	e7de      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 80071c4:	2308      	movs	r3, #8
 80071c6:	9342      	str	r3, [sp, #264]	; 0x108
 80071c8:	2304      	movs	r3, #4
 80071ca:	e7da      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4640      	mov	r0, r8
 80071d0:	f000 fb72 	bl	80078b8 <__sccl>
 80071d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80071d6:	4605      	mov	r5, r0
 80071d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071dc:	9341      	str	r3, [sp, #260]	; 0x104
 80071de:	2301      	movs	r3, #1
 80071e0:	e7cf      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 80071e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	9341      	str	r3, [sp, #260]	; 0x104
 80071ea:	2300      	movs	r3, #0
 80071ec:	e7c9      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e7c7      	b.n	8007182 <__ssvfiscanf_r+0x1de>
 80071f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80071f4:	06c3      	lsls	r3, r0, #27
 80071f6:	f53f aefb 	bmi.w	8006ff0 <__ssvfiscanf_r+0x4c>
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80071fe:	1d19      	adds	r1, r3, #4
 8007200:	9100      	str	r1, [sp, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f010 0f01 	tst.w	r0, #1
 8007208:	bf14      	ite	ne
 800720a:	801a      	strhne	r2, [r3, #0]
 800720c:	601a      	streq	r2, [r3, #0]
 800720e:	e6ef      	b.n	8006ff0 <__ssvfiscanf_r+0x4c>
 8007210:	4621      	mov	r1, r4
 8007212:	4630      	mov	r0, r6
 8007214:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007216:	4798      	blx	r3
 8007218:	2800      	cmp	r0, #0
 800721a:	d0b6      	beq.n	800718a <__ssvfiscanf_r+0x1e6>
 800721c:	e79c      	b.n	8007158 <__ssvfiscanf_r+0x1b4>
 800721e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007220:	3201      	adds	r2, #1
 8007222:	9245      	str	r2, [sp, #276]	; 0x114
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	3a01      	subs	r2, #1
 8007228:	2a00      	cmp	r2, #0
 800722a:	6062      	str	r2, [r4, #4]
 800722c:	dd02      	ble.n	8007234 <__ssvfiscanf_r+0x290>
 800722e:	3301      	adds	r3, #1
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	e7ad      	b.n	8007190 <__ssvfiscanf_r+0x1ec>
 8007234:	4621      	mov	r1, r4
 8007236:	4630      	mov	r0, r6
 8007238:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800723a:	4798      	blx	r3
 800723c:	2800      	cmp	r0, #0
 800723e:	d0a7      	beq.n	8007190 <__ssvfiscanf_r+0x1ec>
 8007240:	e78a      	b.n	8007158 <__ssvfiscanf_r+0x1b4>
 8007242:	2b04      	cmp	r3, #4
 8007244:	dc0e      	bgt.n	8007264 <__ssvfiscanf_r+0x2c0>
 8007246:	466b      	mov	r3, sp
 8007248:	4622      	mov	r2, r4
 800724a:	4630      	mov	r0, r6
 800724c:	a941      	add	r1, sp, #260	; 0x104
 800724e:	f000 fa13 	bl	8007678 <_scanf_i>
 8007252:	e7ab      	b.n	80071ac <__ssvfiscanf_r+0x208>
 8007254:	08006ef1 	.word	0x08006ef1
 8007258:	08006f6b 	.word	0x08006f6b
 800725c:	080088a9 	.word	0x080088a9
 8007260:	08008baa 	.word	0x08008baa
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <__ssvfiscanf_r+0x2f0>)
 8007266:	2b00      	cmp	r3, #0
 8007268:	f43f aec2 	beq.w	8006ff0 <__ssvfiscanf_r+0x4c>
 800726c:	466b      	mov	r3, sp
 800726e:	4622      	mov	r2, r4
 8007270:	4630      	mov	r0, r6
 8007272:	a941      	add	r1, sp, #260	; 0x104
 8007274:	f7fd fa92 	bl	800479c <_scanf_float>
 8007278:	e798      	b.n	80071ac <__ssvfiscanf_r+0x208>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007280:	bf18      	it	ne
 8007282:	f04f 30ff 	movne.w	r0, #4294967295
 8007286:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007290:	e7f9      	b.n	8007286 <__ssvfiscanf_r+0x2e2>
 8007292:	bf00      	nop
 8007294:	0800479d 	.word	0x0800479d

08007298 <_printf_common>:
 8007298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800729c:	4616      	mov	r6, r2
 800729e:	4699      	mov	r9, r3
 80072a0:	688a      	ldr	r2, [r1, #8]
 80072a2:	690b      	ldr	r3, [r1, #16]
 80072a4:	4607      	mov	r7, r0
 80072a6:	4293      	cmp	r3, r2
 80072a8:	bfb8      	it	lt
 80072aa:	4613      	movlt	r3, r2
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b2:	460c      	mov	r4, r1
 80072b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072b8:	b10a      	cbz	r2, 80072be <_printf_common+0x26>
 80072ba:	3301      	adds	r3, #1
 80072bc:	6033      	str	r3, [r6, #0]
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	0699      	lsls	r1, r3, #26
 80072c2:	bf42      	ittt	mi
 80072c4:	6833      	ldrmi	r3, [r6, #0]
 80072c6:	3302      	addmi	r3, #2
 80072c8:	6033      	strmi	r3, [r6, #0]
 80072ca:	6825      	ldr	r5, [r4, #0]
 80072cc:	f015 0506 	ands.w	r5, r5, #6
 80072d0:	d106      	bne.n	80072e0 <_printf_common+0x48>
 80072d2:	f104 0a19 	add.w	sl, r4, #25
 80072d6:	68e3      	ldr	r3, [r4, #12]
 80072d8:	6832      	ldr	r2, [r6, #0]
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	42ab      	cmp	r3, r5
 80072de:	dc28      	bgt.n	8007332 <_printf_common+0x9a>
 80072e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e4:	1e13      	subs	r3, r2, #0
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	bf18      	it	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	0692      	lsls	r2, r2, #26
 80072ee:	d42d      	bmi.n	800734c <_printf_common+0xb4>
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f8:	47c0      	blx	r8
 80072fa:	3001      	adds	r0, #1
 80072fc:	d020      	beq.n	8007340 <_printf_common+0xa8>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	68e5      	ldr	r5, [r4, #12]
 8007302:	f003 0306 	and.w	r3, r3, #6
 8007306:	2b04      	cmp	r3, #4
 8007308:	bf18      	it	ne
 800730a:	2500      	movne	r5, #0
 800730c:	6832      	ldr	r2, [r6, #0]
 800730e:	f04f 0600 	mov.w	r6, #0
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	bf08      	it	eq
 8007316:	1aad      	subeq	r5, r5, r2
 8007318:	6922      	ldr	r2, [r4, #16]
 800731a:	bf08      	it	eq
 800731c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007320:	4293      	cmp	r3, r2
 8007322:	bfc4      	itt	gt
 8007324:	1a9b      	subgt	r3, r3, r2
 8007326:	18ed      	addgt	r5, r5, r3
 8007328:	341a      	adds	r4, #26
 800732a:	42b5      	cmp	r5, r6
 800732c:	d11a      	bne.n	8007364 <_printf_common+0xcc>
 800732e:	2000      	movs	r0, #0
 8007330:	e008      	b.n	8007344 <_printf_common+0xac>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4649      	mov	r1, r9
 8007338:	4638      	mov	r0, r7
 800733a:	47c0      	blx	r8
 800733c:	3001      	adds	r0, #1
 800733e:	d103      	bne.n	8007348 <_printf_common+0xb0>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	3501      	adds	r5, #1
 800734a:	e7c4      	b.n	80072d6 <_printf_common+0x3e>
 800734c:	2030      	movs	r0, #48	; 0x30
 800734e:	18e1      	adds	r1, r4, r3
 8007350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735a:	4422      	add	r2, r4
 800735c:	3302      	adds	r3, #2
 800735e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007362:	e7c5      	b.n	80072f0 <_printf_common+0x58>
 8007364:	2301      	movs	r3, #1
 8007366:	4622      	mov	r2, r4
 8007368:	4649      	mov	r1, r9
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa8>
 8007372:	3601      	adds	r6, #1
 8007374:	e7d9      	b.n	800732a <_printf_common+0x92>
	...

08007378 <_printf_i>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	7e0f      	ldrb	r7, [r1, #24]
 800737e:	4691      	mov	r9, r2
 8007380:	2f78      	cmp	r7, #120	; 0x78
 8007382:	4680      	mov	r8, r0
 8007384:	460c      	mov	r4, r1
 8007386:	469a      	mov	sl, r3
 8007388:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800738a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800738e:	d807      	bhi.n	80073a0 <_printf_i+0x28>
 8007390:	2f62      	cmp	r7, #98	; 0x62
 8007392:	d80a      	bhi.n	80073aa <_printf_i+0x32>
 8007394:	2f00      	cmp	r7, #0
 8007396:	f000 80d9 	beq.w	800754c <_printf_i+0x1d4>
 800739a:	2f58      	cmp	r7, #88	; 0x58
 800739c:	f000 80a4 	beq.w	80074e8 <_printf_i+0x170>
 80073a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a8:	e03a      	b.n	8007420 <_printf_i+0xa8>
 80073aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ae:	2b15      	cmp	r3, #21
 80073b0:	d8f6      	bhi.n	80073a0 <_printf_i+0x28>
 80073b2:	a101      	add	r1, pc, #4	; (adr r1, 80073b8 <_printf_i+0x40>)
 80073b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007425 	.word	0x08007425
 80073c0:	080073a1 	.word	0x080073a1
 80073c4:	080073a1 	.word	0x080073a1
 80073c8:	080073a1 	.word	0x080073a1
 80073cc:	080073a1 	.word	0x080073a1
 80073d0:	08007425 	.word	0x08007425
 80073d4:	080073a1 	.word	0x080073a1
 80073d8:	080073a1 	.word	0x080073a1
 80073dc:	080073a1 	.word	0x080073a1
 80073e0:	080073a1 	.word	0x080073a1
 80073e4:	08007533 	.word	0x08007533
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007515 	.word	0x08007515
 80073f0:	080073a1 	.word	0x080073a1
 80073f4:	080073a1 	.word	0x080073a1
 80073f8:	08007555 	.word	0x08007555
 80073fc:	080073a1 	.word	0x080073a1
 8007400:	08007455 	.word	0x08007455
 8007404:	080073a1 	.word	0x080073a1
 8007408:	080073a1 	.word	0x080073a1
 800740c:	0800751d 	.word	0x0800751d
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	602a      	str	r2, [r5, #0]
 8007418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800741c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007420:	2301      	movs	r3, #1
 8007422:	e0a4      	b.n	800756e <_printf_i+0x1f6>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	6829      	ldr	r1, [r5, #0]
 8007428:	0606      	lsls	r6, r0, #24
 800742a:	f101 0304 	add.w	r3, r1, #4
 800742e:	d50a      	bpl.n	8007446 <_printf_i+0xce>
 8007430:	680e      	ldr	r6, [r1, #0]
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	2e00      	cmp	r6, #0
 8007436:	da03      	bge.n	8007440 <_printf_i+0xc8>
 8007438:	232d      	movs	r3, #45	; 0x2d
 800743a:	4276      	negs	r6, r6
 800743c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007440:	230a      	movs	r3, #10
 8007442:	485e      	ldr	r0, [pc, #376]	; (80075bc <_printf_i+0x244>)
 8007444:	e019      	b.n	800747a <_printf_i+0x102>
 8007446:	680e      	ldr	r6, [r1, #0]
 8007448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	bf18      	it	ne
 8007450:	b236      	sxthne	r6, r6
 8007452:	e7ef      	b.n	8007434 <_printf_i+0xbc>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	6820      	ldr	r0, [r4, #0]
 8007458:	1d19      	adds	r1, r3, #4
 800745a:	6029      	str	r1, [r5, #0]
 800745c:	0601      	lsls	r1, r0, #24
 800745e:	d501      	bpl.n	8007464 <_printf_i+0xec>
 8007460:	681e      	ldr	r6, [r3, #0]
 8007462:	e002      	b.n	800746a <_printf_i+0xf2>
 8007464:	0646      	lsls	r6, r0, #25
 8007466:	d5fb      	bpl.n	8007460 <_printf_i+0xe8>
 8007468:	881e      	ldrh	r6, [r3, #0]
 800746a:	2f6f      	cmp	r7, #111	; 0x6f
 800746c:	bf0c      	ite	eq
 800746e:	2308      	moveq	r3, #8
 8007470:	230a      	movne	r3, #10
 8007472:	4852      	ldr	r0, [pc, #328]	; (80075bc <_printf_i+0x244>)
 8007474:	2100      	movs	r1, #0
 8007476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800747a:	6865      	ldr	r5, [r4, #4]
 800747c:	2d00      	cmp	r5, #0
 800747e:	bfa8      	it	ge
 8007480:	6821      	ldrge	r1, [r4, #0]
 8007482:	60a5      	str	r5, [r4, #8]
 8007484:	bfa4      	itt	ge
 8007486:	f021 0104 	bicge.w	r1, r1, #4
 800748a:	6021      	strge	r1, [r4, #0]
 800748c:	b90e      	cbnz	r6, 8007492 <_printf_i+0x11a>
 800748e:	2d00      	cmp	r5, #0
 8007490:	d04d      	beq.n	800752e <_printf_i+0x1b6>
 8007492:	4615      	mov	r5, r2
 8007494:	fbb6 f1f3 	udiv	r1, r6, r3
 8007498:	fb03 6711 	mls	r7, r3, r1, r6
 800749c:	5dc7      	ldrb	r7, [r0, r7]
 800749e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074a2:	4637      	mov	r7, r6
 80074a4:	42bb      	cmp	r3, r7
 80074a6:	460e      	mov	r6, r1
 80074a8:	d9f4      	bls.n	8007494 <_printf_i+0x11c>
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d10b      	bne.n	80074c6 <_printf_i+0x14e>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	07de      	lsls	r6, r3, #31
 80074b2:	d508      	bpl.n	80074c6 <_printf_i+0x14e>
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	6861      	ldr	r1, [r4, #4]
 80074b8:	4299      	cmp	r1, r3
 80074ba:	bfde      	ittt	le
 80074bc:	2330      	movle	r3, #48	; 0x30
 80074be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074c6:	1b52      	subs	r2, r2, r5
 80074c8:	6122      	str	r2, [r4, #16]
 80074ca:	464b      	mov	r3, r9
 80074cc:	4621      	mov	r1, r4
 80074ce:	4640      	mov	r0, r8
 80074d0:	f8cd a000 	str.w	sl, [sp]
 80074d4:	aa03      	add	r2, sp, #12
 80074d6:	f7ff fedf 	bl	8007298 <_printf_common>
 80074da:	3001      	adds	r0, #1
 80074dc:	d14c      	bne.n	8007578 <_printf_i+0x200>
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	b004      	add	sp, #16
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	4834      	ldr	r0, [pc, #208]	; (80075bc <_printf_i+0x244>)
 80074ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074ee:	6829      	ldr	r1, [r5, #0]
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80074f6:	6029      	str	r1, [r5, #0]
 80074f8:	061d      	lsls	r5, r3, #24
 80074fa:	d514      	bpl.n	8007526 <_printf_i+0x1ae>
 80074fc:	07df      	lsls	r7, r3, #31
 80074fe:	bf44      	itt	mi
 8007500:	f043 0320 	orrmi.w	r3, r3, #32
 8007504:	6023      	strmi	r3, [r4, #0]
 8007506:	b91e      	cbnz	r6, 8007510 <_printf_i+0x198>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	f023 0320 	bic.w	r3, r3, #32
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	2310      	movs	r3, #16
 8007512:	e7af      	b.n	8007474 <_printf_i+0xfc>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f043 0320 	orr.w	r3, r3, #32
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	2378      	movs	r3, #120	; 0x78
 800751e:	4828      	ldr	r0, [pc, #160]	; (80075c0 <_printf_i+0x248>)
 8007520:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007524:	e7e3      	b.n	80074ee <_printf_i+0x176>
 8007526:	0659      	lsls	r1, r3, #25
 8007528:	bf48      	it	mi
 800752a:	b2b6      	uxthmi	r6, r6
 800752c:	e7e6      	b.n	80074fc <_printf_i+0x184>
 800752e:	4615      	mov	r5, r2
 8007530:	e7bb      	b.n	80074aa <_printf_i+0x132>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	6826      	ldr	r6, [r4, #0]
 8007536:	1d18      	adds	r0, r3, #4
 8007538:	6961      	ldr	r1, [r4, #20]
 800753a:	6028      	str	r0, [r5, #0]
 800753c:	0635      	lsls	r5, r6, #24
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	d501      	bpl.n	8007546 <_printf_i+0x1ce>
 8007542:	6019      	str	r1, [r3, #0]
 8007544:	e002      	b.n	800754c <_printf_i+0x1d4>
 8007546:	0670      	lsls	r0, r6, #25
 8007548:	d5fb      	bpl.n	8007542 <_printf_i+0x1ca>
 800754a:	8019      	strh	r1, [r3, #0]
 800754c:	2300      	movs	r3, #0
 800754e:	4615      	mov	r5, r2
 8007550:	6123      	str	r3, [r4, #16]
 8007552:	e7ba      	b.n	80074ca <_printf_i+0x152>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	2100      	movs	r1, #0
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	602a      	str	r2, [r5, #0]
 800755c:	681d      	ldr	r5, [r3, #0]
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	4628      	mov	r0, r5
 8007562:	f000 fc89 	bl	8007e78 <memchr>
 8007566:	b108      	cbz	r0, 800756c <_printf_i+0x1f4>
 8007568:	1b40      	subs	r0, r0, r5
 800756a:	6060      	str	r0, [r4, #4]
 800756c:	6863      	ldr	r3, [r4, #4]
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	2300      	movs	r3, #0
 8007572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007576:	e7a8      	b.n	80074ca <_printf_i+0x152>
 8007578:	462a      	mov	r2, r5
 800757a:	4649      	mov	r1, r9
 800757c:	4640      	mov	r0, r8
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	47d0      	blx	sl
 8007582:	3001      	adds	r0, #1
 8007584:	d0ab      	beq.n	80074de <_printf_i+0x166>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	079b      	lsls	r3, r3, #30
 800758a:	d413      	bmi.n	80075b4 <_printf_i+0x23c>
 800758c:	68e0      	ldr	r0, [r4, #12]
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	4298      	cmp	r0, r3
 8007592:	bfb8      	it	lt
 8007594:	4618      	movlt	r0, r3
 8007596:	e7a4      	b.n	80074e2 <_printf_i+0x16a>
 8007598:	2301      	movs	r3, #1
 800759a:	4632      	mov	r2, r6
 800759c:	4649      	mov	r1, r9
 800759e:	4640      	mov	r0, r8
 80075a0:	47d0      	blx	sl
 80075a2:	3001      	adds	r0, #1
 80075a4:	d09b      	beq.n	80074de <_printf_i+0x166>
 80075a6:	3501      	adds	r5, #1
 80075a8:	68e3      	ldr	r3, [r4, #12]
 80075aa:	9903      	ldr	r1, [sp, #12]
 80075ac:	1a5b      	subs	r3, r3, r1
 80075ae:	42ab      	cmp	r3, r5
 80075b0:	dcf2      	bgt.n	8007598 <_printf_i+0x220>
 80075b2:	e7eb      	b.n	800758c <_printf_i+0x214>
 80075b4:	2500      	movs	r5, #0
 80075b6:	f104 0619 	add.w	r6, r4, #25
 80075ba:	e7f5      	b.n	80075a8 <_printf_i+0x230>
 80075bc:	08008bb5 	.word	0x08008bb5
 80075c0:	08008bc6 	.word	0x08008bc6

080075c4 <_scanf_chars>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	4615      	mov	r5, r2
 80075ca:	688a      	ldr	r2, [r1, #8]
 80075cc:	4680      	mov	r8, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	b932      	cbnz	r2, 80075e0 <_scanf_chars+0x1c>
 80075d2:	698a      	ldr	r2, [r1, #24]
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2201      	moveq	r2, #1
 80075da:	f04f 32ff 	movne.w	r2, #4294967295
 80075de:	608a      	str	r2, [r1, #8]
 80075e0:	2700      	movs	r7, #0
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007674 <_scanf_chars+0xb0>
 80075e8:	06d1      	lsls	r1, r2, #27
 80075ea:	bf5f      	itttt	pl
 80075ec:	681a      	ldrpl	r2, [r3, #0]
 80075ee:	1d11      	addpl	r1, r2, #4
 80075f0:	6019      	strpl	r1, [r3, #0]
 80075f2:	6816      	ldrpl	r6, [r2, #0]
 80075f4:	69a0      	ldr	r0, [r4, #24]
 80075f6:	b188      	cbz	r0, 800761c <_scanf_chars+0x58>
 80075f8:	2801      	cmp	r0, #1
 80075fa:	d107      	bne.n	800760c <_scanf_chars+0x48>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	6963      	ldr	r3, [r4, #20]
 8007602:	5c9b      	ldrb	r3, [r3, r2]
 8007604:	b953      	cbnz	r3, 800761c <_scanf_chars+0x58>
 8007606:	2f00      	cmp	r7, #0
 8007608:	d031      	beq.n	800766e <_scanf_chars+0xaa>
 800760a:	e022      	b.n	8007652 <_scanf_chars+0x8e>
 800760c:	2802      	cmp	r0, #2
 800760e:	d120      	bne.n	8007652 <_scanf_chars+0x8e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007618:	071b      	lsls	r3, r3, #28
 800761a:	d41a      	bmi.n	8007652 <_scanf_chars+0x8e>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	3701      	adds	r7, #1
 8007620:	06da      	lsls	r2, r3, #27
 8007622:	bf5e      	ittt	pl
 8007624:	682b      	ldrpl	r3, [r5, #0]
 8007626:	781b      	ldrbpl	r3, [r3, #0]
 8007628:	f806 3b01 	strbpl.w	r3, [r6], #1
 800762c:	682a      	ldr	r2, [r5, #0]
 800762e:	686b      	ldr	r3, [r5, #4]
 8007630:	3201      	adds	r2, #1
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	68a2      	ldr	r2, [r4, #8]
 8007636:	3b01      	subs	r3, #1
 8007638:	3a01      	subs	r2, #1
 800763a:	606b      	str	r3, [r5, #4]
 800763c:	60a2      	str	r2, [r4, #8]
 800763e:	b142      	cbz	r2, 8007652 <_scanf_chars+0x8e>
 8007640:	2b00      	cmp	r3, #0
 8007642:	dcd7      	bgt.n	80075f4 <_scanf_chars+0x30>
 8007644:	4629      	mov	r1, r5
 8007646:	4640      	mov	r0, r8
 8007648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800764c:	4798      	blx	r3
 800764e:	2800      	cmp	r0, #0
 8007650:	d0d0      	beq.n	80075f4 <_scanf_chars+0x30>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f013 0310 	ands.w	r3, r3, #16
 8007658:	d105      	bne.n	8007666 <_scanf_chars+0xa2>
 800765a:	68e2      	ldr	r2, [r4, #12]
 800765c:	3201      	adds	r2, #1
 800765e:	60e2      	str	r2, [r4, #12]
 8007660:	69a2      	ldr	r2, [r4, #24]
 8007662:	b102      	cbz	r2, 8007666 <_scanf_chars+0xa2>
 8007664:	7033      	strb	r3, [r6, #0]
 8007666:	2000      	movs	r0, #0
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	443b      	add	r3, r7
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	bf00      	nop
 8007674:	080088a9 	.word	0x080088a9

08007678 <_scanf_i>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	460c      	mov	r4, r1
 800767e:	4698      	mov	r8, r3
 8007680:	4b75      	ldr	r3, [pc, #468]	; (8007858 <_scanf_i+0x1e0>)
 8007682:	b087      	sub	sp, #28
 8007684:	4682      	mov	sl, r0
 8007686:	4616      	mov	r6, r2
 8007688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800768c:	ab03      	add	r3, sp, #12
 800768e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007692:	4b72      	ldr	r3, [pc, #456]	; (800785c <_scanf_i+0x1e4>)
 8007694:	69a1      	ldr	r1, [r4, #24]
 8007696:	4a72      	ldr	r2, [pc, #456]	; (8007860 <_scanf_i+0x1e8>)
 8007698:	4627      	mov	r7, r4
 800769a:	2903      	cmp	r1, #3
 800769c:	bf18      	it	ne
 800769e:	461a      	movne	r2, r3
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	9201      	str	r2, [sp, #4]
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80076aa:	bf81      	itttt	hi
 80076ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80076b0:	eb03 0905 	addhi.w	r9, r3, r5
 80076b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80076b8:	60a3      	strhi	r3, [r4, #8]
 80076ba:	f857 3b1c 	ldr.w	r3, [r7], #28
 80076be:	bf98      	it	ls
 80076c0:	f04f 0900 	movls.w	r9, #0
 80076c4:	463d      	mov	r5, r7
 80076c6:	f04f 0b00 	mov.w	fp, #0
 80076ca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	6831      	ldr	r1, [r6, #0]
 80076d2:	ab03      	add	r3, sp, #12
 80076d4:	2202      	movs	r2, #2
 80076d6:	7809      	ldrb	r1, [r1, #0]
 80076d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80076dc:	f000 fbcc 	bl	8007e78 <memchr>
 80076e0:	b328      	cbz	r0, 800772e <_scanf_i+0xb6>
 80076e2:	f1bb 0f01 	cmp.w	fp, #1
 80076e6:	d159      	bne.n	800779c <_scanf_i+0x124>
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	b92a      	cbnz	r2, 80076f8 <_scanf_i+0x80>
 80076ec:	2308      	movs	r3, #8
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f6:	6022      	str	r2, [r4, #0]
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	68a2      	ldr	r2, [r4, #8]
 8007702:	1e51      	subs	r1, r2, #1
 8007704:	60a1      	str	r1, [r4, #8]
 8007706:	b192      	cbz	r2, 800772e <_scanf_i+0xb6>
 8007708:	6832      	ldr	r2, [r6, #0]
 800770a:	1c51      	adds	r1, r2, #1
 800770c:	6031      	str	r1, [r6, #0]
 800770e:	7812      	ldrb	r2, [r2, #0]
 8007710:	f805 2b01 	strb.w	r2, [r5], #1
 8007714:	6872      	ldr	r2, [r6, #4]
 8007716:	3a01      	subs	r2, #1
 8007718:	2a00      	cmp	r2, #0
 800771a:	6072      	str	r2, [r6, #4]
 800771c:	dc07      	bgt.n	800772e <_scanf_i+0xb6>
 800771e:	4631      	mov	r1, r6
 8007720:	4650      	mov	r0, sl
 8007722:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007726:	4790      	blx	r2
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 8085 	bne.w	8007838 <_scanf_i+0x1c0>
 800772e:	f10b 0b01 	add.w	fp, fp, #1
 8007732:	f1bb 0f03 	cmp.w	fp, #3
 8007736:	d1cb      	bne.n	80076d0 <_scanf_i+0x58>
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	b90b      	cbnz	r3, 8007740 <_scanf_i+0xc8>
 800773c:	230a      	movs	r3, #10
 800773e:	6063      	str	r3, [r4, #4]
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	4948      	ldr	r1, [pc, #288]	; (8007864 <_scanf_i+0x1ec>)
 8007744:	6960      	ldr	r0, [r4, #20]
 8007746:	1ac9      	subs	r1, r1, r3
 8007748:	f000 f8b6 	bl	80078b8 <__sccl>
 800774c:	f04f 0b00 	mov.w	fp, #0
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d03d      	beq.n	80077d4 <_scanf_i+0x15c>
 8007758:	6831      	ldr	r1, [r6, #0]
 800775a:	6960      	ldr	r0, [r4, #20]
 800775c:	f891 c000 	ldrb.w	ip, [r1]
 8007760:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007764:	2800      	cmp	r0, #0
 8007766:	d035      	beq.n	80077d4 <_scanf_i+0x15c>
 8007768:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800776c:	d124      	bne.n	80077b8 <_scanf_i+0x140>
 800776e:	0510      	lsls	r0, r2, #20
 8007770:	d522      	bpl.n	80077b8 <_scanf_i+0x140>
 8007772:	f10b 0b01 	add.w	fp, fp, #1
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	d003      	beq.n	8007784 <_scanf_i+0x10c>
 800777c:	3301      	adds	r3, #1
 800777e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007782:	60a3      	str	r3, [r4, #8]
 8007784:	6873      	ldr	r3, [r6, #4]
 8007786:	3b01      	subs	r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	6073      	str	r3, [r6, #4]
 800778c:	dd1b      	ble.n	80077c6 <_scanf_i+0x14e>
 800778e:	6833      	ldr	r3, [r6, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	68a3      	ldr	r3, [r4, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	e7d9      	b.n	8007750 <_scanf_i+0xd8>
 800779c:	f1bb 0f02 	cmp.w	fp, #2
 80077a0:	d1ae      	bne.n	8007700 <_scanf_i+0x88>
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80077a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80077ac:	d1bf      	bne.n	800772e <_scanf_i+0xb6>
 80077ae:	2310      	movs	r3, #16
 80077b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	e7a2      	b.n	80076fe <_scanf_i+0x86>
 80077b8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80077bc:	6022      	str	r2, [r4, #0]
 80077be:	780b      	ldrb	r3, [r1, #0]
 80077c0:	f805 3b01 	strb.w	r3, [r5], #1
 80077c4:	e7de      	b.n	8007784 <_scanf_i+0x10c>
 80077c6:	4631      	mov	r1, r6
 80077c8:	4650      	mov	r0, sl
 80077ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077ce:	4798      	blx	r3
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d0df      	beq.n	8007794 <_scanf_i+0x11c>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	05db      	lsls	r3, r3, #23
 80077d8:	d50d      	bpl.n	80077f6 <_scanf_i+0x17e>
 80077da:	42bd      	cmp	r5, r7
 80077dc:	d909      	bls.n	80077f2 <_scanf_i+0x17a>
 80077de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077e2:	4632      	mov	r2, r6
 80077e4:	4650      	mov	r0, sl
 80077e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80077ee:	4798      	blx	r3
 80077f0:	464d      	mov	r5, r9
 80077f2:	42bd      	cmp	r5, r7
 80077f4:	d02d      	beq.n	8007852 <_scanf_i+0x1da>
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	f012 0210 	ands.w	r2, r2, #16
 80077fc:	d113      	bne.n	8007826 <_scanf_i+0x1ae>
 80077fe:	702a      	strb	r2, [r5, #0]
 8007800:	4639      	mov	r1, r7
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	4650      	mov	r0, sl
 8007806:	9e01      	ldr	r6, [sp, #4]
 8007808:	47b0      	blx	r6
 800780a:	6821      	ldr	r1, [r4, #0]
 800780c:	f8d8 3000 	ldr.w	r3, [r8]
 8007810:	f011 0f20 	tst.w	r1, #32
 8007814:	d013      	beq.n	800783e <_scanf_i+0x1c6>
 8007816:	1d1a      	adds	r2, r3, #4
 8007818:	f8c8 2000 	str.w	r2, [r8]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6018      	str	r0, [r3, #0]
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60e3      	str	r3, [r4, #12]
 8007826:	2000      	movs	r0, #0
 8007828:	1bed      	subs	r5, r5, r7
 800782a:	44ab      	add	fp, r5
 800782c:	6925      	ldr	r5, [r4, #16]
 800782e:	445d      	add	r5, fp
 8007830:	6125      	str	r5, [r4, #16]
 8007832:	b007      	add	sp, #28
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	f04f 0b00 	mov.w	fp, #0
 800783c:	e7ca      	b.n	80077d4 <_scanf_i+0x15c>
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	f8c8 2000 	str.w	r2, [r8]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f011 0f01 	tst.w	r1, #1
 800784a:	bf14      	ite	ne
 800784c:	8018      	strhne	r0, [r3, #0]
 800784e:	6018      	streq	r0, [r3, #0]
 8007850:	e7e6      	b.n	8007820 <_scanf_i+0x1a8>
 8007852:	2001      	movs	r0, #1
 8007854:	e7ed      	b.n	8007832 <_scanf_i+0x1ba>
 8007856:	bf00      	nop
 8007858:	08008704 	.word	0x08008704
 800785c:	08007a0d 	.word	0x08007a0d
 8007860:	08005a1d 	.word	0x08005a1d
 8007864:	08008bf0 	.word	0x08008bf0

08007868 <_read_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	2200      	movs	r2, #0
 8007872:	4d05      	ldr	r5, [pc, #20]	; (8007888 <_read_r+0x20>)
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7f9 fd39 	bl	80012ee <_read>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_read_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_read_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	200003e0 	.word	0x200003e0

0800788c <nan>:
 800788c:	2000      	movs	r0, #0
 800788e:	4901      	ldr	r1, [pc, #4]	; (8007894 <nan+0x8>)
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	7ff80000 	.word	0x7ff80000

08007898 <_sbrk_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d05      	ldr	r5, [pc, #20]	; (80078b4 <_sbrk_r+0x1c>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	f7f9 fd8c 	bl	80013c0 <_sbrk>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_sbrk_r+0x1a>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_sbrk_r+0x1a>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	200003e0 	.word	0x200003e0

080078b8 <__sccl>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	780b      	ldrb	r3, [r1, #0]
 80078bc:	4604      	mov	r4, r0
 80078be:	2b5e      	cmp	r3, #94	; 0x5e
 80078c0:	bf13      	iteet	ne
 80078c2:	2200      	movne	r2, #0
 80078c4:	2201      	moveq	r2, #1
 80078c6:	784b      	ldrbeq	r3, [r1, #1]
 80078c8:	1c48      	addne	r0, r1, #1
 80078ca:	bf08      	it	eq
 80078cc:	1c88      	addeq	r0, r1, #2
 80078ce:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80078d2:	1e61      	subs	r1, r4, #1
 80078d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80078d8:	42a9      	cmp	r1, r5
 80078da:	d1fb      	bne.n	80078d4 <__sccl+0x1c>
 80078dc:	b90b      	cbnz	r3, 80078e2 <__sccl+0x2a>
 80078de:	3801      	subs	r0, #1
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	f082 0201 	eor.w	r2, r2, #1
 80078e6:	4605      	mov	r5, r0
 80078e8:	54e2      	strb	r2, [r4, r3]
 80078ea:	4628      	mov	r0, r5
 80078ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80078f0:	292d      	cmp	r1, #45	; 0x2d
 80078f2:	d006      	beq.n	8007902 <__sccl+0x4a>
 80078f4:	295d      	cmp	r1, #93	; 0x5d
 80078f6:	d0f3      	beq.n	80078e0 <__sccl+0x28>
 80078f8:	b909      	cbnz	r1, 80078fe <__sccl+0x46>
 80078fa:	4628      	mov	r0, r5
 80078fc:	e7f0      	b.n	80078e0 <__sccl+0x28>
 80078fe:	460b      	mov	r3, r1
 8007900:	e7f1      	b.n	80078e6 <__sccl+0x2e>
 8007902:	786e      	ldrb	r6, [r5, #1]
 8007904:	2e5d      	cmp	r6, #93	; 0x5d
 8007906:	d0fa      	beq.n	80078fe <__sccl+0x46>
 8007908:	42b3      	cmp	r3, r6
 800790a:	dcf8      	bgt.n	80078fe <__sccl+0x46>
 800790c:	4619      	mov	r1, r3
 800790e:	3502      	adds	r5, #2
 8007910:	3101      	adds	r1, #1
 8007912:	428e      	cmp	r6, r1
 8007914:	5462      	strb	r2, [r4, r1]
 8007916:	dcfb      	bgt.n	8007910 <__sccl+0x58>
 8007918:	1af1      	subs	r1, r6, r3
 800791a:	3901      	subs	r1, #1
 800791c:	42b3      	cmp	r3, r6
 800791e:	bfa8      	it	ge
 8007920:	2100      	movge	r1, #0
 8007922:	1c58      	adds	r0, r3, #1
 8007924:	1843      	adds	r3, r0, r1
 8007926:	e7e0      	b.n	80078ea <__sccl+0x32>

08007928 <_strtoul_l.constprop.0>:
 8007928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800792c:	4686      	mov	lr, r0
 800792e:	460d      	mov	r5, r1
 8007930:	4f35      	ldr	r7, [pc, #212]	; (8007a08 <_strtoul_l.constprop.0+0xe0>)
 8007932:	4628      	mov	r0, r5
 8007934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007938:	5de6      	ldrb	r6, [r4, r7]
 800793a:	f016 0608 	ands.w	r6, r6, #8
 800793e:	d1f8      	bne.n	8007932 <_strtoul_l.constprop.0+0xa>
 8007940:	2c2d      	cmp	r4, #45	; 0x2d
 8007942:	d12f      	bne.n	80079a4 <_strtoul_l.constprop.0+0x7c>
 8007944:	2601      	movs	r6, #1
 8007946:	782c      	ldrb	r4, [r5, #0]
 8007948:	1c85      	adds	r5, r0, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d057      	beq.n	80079fe <_strtoul_l.constprop.0+0xd6>
 800794e:	2b10      	cmp	r3, #16
 8007950:	d109      	bne.n	8007966 <_strtoul_l.constprop.0+0x3e>
 8007952:	2c30      	cmp	r4, #48	; 0x30
 8007954:	d107      	bne.n	8007966 <_strtoul_l.constprop.0+0x3e>
 8007956:	7828      	ldrb	r0, [r5, #0]
 8007958:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800795c:	2858      	cmp	r0, #88	; 0x58
 800795e:	d149      	bne.n	80079f4 <_strtoul_l.constprop.0+0xcc>
 8007960:	2310      	movs	r3, #16
 8007962:	786c      	ldrb	r4, [r5, #1]
 8007964:	3502      	adds	r5, #2
 8007966:	f04f 38ff 	mov.w	r8, #4294967295
 800796a:	fbb8 f8f3 	udiv	r8, r8, r3
 800796e:	2700      	movs	r7, #0
 8007970:	fb03 f908 	mul.w	r9, r3, r8
 8007974:	4638      	mov	r0, r7
 8007976:	ea6f 0909 	mvn.w	r9, r9
 800797a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800797e:	f1bc 0f09 	cmp.w	ip, #9
 8007982:	d814      	bhi.n	80079ae <_strtoul_l.constprop.0+0x86>
 8007984:	4664      	mov	r4, ip
 8007986:	42a3      	cmp	r3, r4
 8007988:	dd22      	ble.n	80079d0 <_strtoul_l.constprop.0+0xa8>
 800798a:	2f00      	cmp	r7, #0
 800798c:	db1d      	blt.n	80079ca <_strtoul_l.constprop.0+0xa2>
 800798e:	4580      	cmp	r8, r0
 8007990:	d31b      	bcc.n	80079ca <_strtoul_l.constprop.0+0xa2>
 8007992:	d101      	bne.n	8007998 <_strtoul_l.constprop.0+0x70>
 8007994:	45a1      	cmp	r9, r4
 8007996:	db18      	blt.n	80079ca <_strtoul_l.constprop.0+0xa2>
 8007998:	2701      	movs	r7, #1
 800799a:	fb00 4003 	mla	r0, r0, r3, r4
 800799e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a2:	e7ea      	b.n	800797a <_strtoul_l.constprop.0+0x52>
 80079a4:	2c2b      	cmp	r4, #43	; 0x2b
 80079a6:	bf04      	itt	eq
 80079a8:	782c      	ldrbeq	r4, [r5, #0]
 80079aa:	1c85      	addeq	r5, r0, #2
 80079ac:	e7cd      	b.n	800794a <_strtoul_l.constprop.0+0x22>
 80079ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079b2:	f1bc 0f19 	cmp.w	ip, #25
 80079b6:	d801      	bhi.n	80079bc <_strtoul_l.constprop.0+0x94>
 80079b8:	3c37      	subs	r4, #55	; 0x37
 80079ba:	e7e4      	b.n	8007986 <_strtoul_l.constprop.0+0x5e>
 80079bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80079c0:	f1bc 0f19 	cmp.w	ip, #25
 80079c4:	d804      	bhi.n	80079d0 <_strtoul_l.constprop.0+0xa8>
 80079c6:	3c57      	subs	r4, #87	; 0x57
 80079c8:	e7dd      	b.n	8007986 <_strtoul_l.constprop.0+0x5e>
 80079ca:	f04f 37ff 	mov.w	r7, #4294967295
 80079ce:	e7e6      	b.n	800799e <_strtoul_l.constprop.0+0x76>
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	da07      	bge.n	80079e4 <_strtoul_l.constprop.0+0xbc>
 80079d4:	2322      	movs	r3, #34	; 0x22
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295
 80079da:	f8ce 3000 	str.w	r3, [lr]
 80079de:	b932      	cbnz	r2, 80079ee <_strtoul_l.constprop.0+0xc6>
 80079e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079e4:	b106      	cbz	r6, 80079e8 <_strtoul_l.constprop.0+0xc0>
 80079e6:	4240      	negs	r0, r0
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	d0f9      	beq.n	80079e0 <_strtoul_l.constprop.0+0xb8>
 80079ec:	b107      	cbz	r7, 80079f0 <_strtoul_l.constprop.0+0xc8>
 80079ee:	1e69      	subs	r1, r5, #1
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e7f5      	b.n	80079e0 <_strtoul_l.constprop.0+0xb8>
 80079f4:	2430      	movs	r4, #48	; 0x30
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1b5      	bne.n	8007966 <_strtoul_l.constprop.0+0x3e>
 80079fa:	2308      	movs	r3, #8
 80079fc:	e7b3      	b.n	8007966 <_strtoul_l.constprop.0+0x3e>
 80079fe:	2c30      	cmp	r4, #48	; 0x30
 8007a00:	d0a9      	beq.n	8007956 <_strtoul_l.constprop.0+0x2e>
 8007a02:	230a      	movs	r3, #10
 8007a04:	e7af      	b.n	8007966 <_strtoul_l.constprop.0+0x3e>
 8007a06:	bf00      	nop
 8007a08:	080088a9 	.word	0x080088a9

08007a0c <_strtoul_r>:
 8007a0c:	f7ff bf8c 	b.w	8007928 <_strtoul_l.constprop.0>

08007a10 <__submore>:
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	460c      	mov	r4, r1
 8007a16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	d11b      	bne.n	8007a58 <__submore+0x48>
 8007a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a24:	f7ff f894 	bl	8006b50 <_malloc_r>
 8007a28:	b918      	cbnz	r0, 8007a32 <__submore+0x22>
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a36:	63a3      	str	r3, [r4, #56]	; 0x38
 8007a38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007a42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007a4a:	7043      	strb	r3, [r0, #1]
 8007a4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a50:	7003      	strb	r3, [r0, #0]
 8007a52:	6020      	str	r0, [r4, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	e7ea      	b.n	8007a2e <__submore+0x1e>
 8007a58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007a5a:	0077      	lsls	r7, r6, #1
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	f000 fa87 	bl	8007f70 <_realloc_r>
 8007a62:	4605      	mov	r5, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0e0      	beq.n	8007a2a <__submore+0x1a>
 8007a68:	eb00 0806 	add.w	r8, r0, r6
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	4632      	mov	r2, r6
 8007a70:	4640      	mov	r0, r8
 8007a72:	f7fc fe7d 	bl	8004770 <memcpy>
 8007a76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007a7a:	f8c4 8000 	str.w	r8, [r4]
 8007a7e:	e7e9      	b.n	8007a54 <__submore+0x44>

08007a80 <__ascii_wctomb>:
 8007a80:	4603      	mov	r3, r0
 8007a82:	4608      	mov	r0, r1
 8007a84:	b141      	cbz	r1, 8007a98 <__ascii_wctomb+0x18>
 8007a86:	2aff      	cmp	r2, #255	; 0xff
 8007a88:	d904      	bls.n	8007a94 <__ascii_wctomb+0x14>
 8007a8a:	228a      	movs	r2, #138	; 0x8a
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	4770      	bx	lr
 8007a94:	2001      	movs	r0, #1
 8007a96:	700a      	strb	r2, [r1, #0]
 8007a98:	4770      	bx	lr
	...

08007a9c <__assert_func>:
 8007a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <__assert_func+0x2c>)
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68d8      	ldr	r0, [r3, #12]
 8007aaa:	b14c      	cbz	r4, 8007ac0 <__assert_func+0x24>
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <__assert_func+0x30>)
 8007aae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ab2:	9100      	str	r1, [sp, #0]
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <__assert_func+0x34>)
 8007ab8:	f000 f9a2 	bl	8007e00 <fiprintf>
 8007abc:	f000 fc9e 	bl	80083fc <abort>
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <__assert_func+0x38>)
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	e7f3      	b.n	8007aae <__assert_func+0x12>
 8007ac6:	bf00      	nop
 8007ac8:	2000000c 	.word	0x2000000c
 8007acc:	08008bf2 	.word	0x08008bf2
 8007ad0:	08008bff 	.word	0x08008bff
 8007ad4:	08008c2d 	.word	0x08008c2d

08007ad8 <__sflush_r>:
 8007ad8:	898a      	ldrh	r2, [r1, #12]
 8007ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007adc:	4605      	mov	r5, r0
 8007ade:	0710      	lsls	r0, r2, #28
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	d457      	bmi.n	8007b94 <__sflush_r+0xbc>
 8007ae4:	684b      	ldr	r3, [r1, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dc04      	bgt.n	8007af4 <__sflush_r+0x1c>
 8007aea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc01      	bgt.n	8007af4 <__sflush_r+0x1c>
 8007af0:	2000      	movs	r0, #0
 8007af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d0fa      	beq.n	8007af0 <__sflush_r+0x18>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b00:	682f      	ldr	r7, [r5, #0]
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	d032      	beq.n	8007b6c <__sflush_r+0x94>
 8007b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	075a      	lsls	r2, r3, #29
 8007b0c:	d505      	bpl.n	8007b1a <__sflush_r+0x42>
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	1ac0      	subs	r0, r0, r3
 8007b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b14:	b10b      	cbz	r3, 8007b1a <__sflush_r+0x42>
 8007b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b20:	4628      	mov	r0, r5
 8007b22:	6a21      	ldr	r1, [r4, #32]
 8007b24:	47b0      	blx	r6
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	d106      	bne.n	8007b3a <__sflush_r+0x62>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	291d      	cmp	r1, #29
 8007b30:	d82c      	bhi.n	8007b8c <__sflush_r+0xb4>
 8007b32:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <__sflush_r+0x100>)
 8007b34:	40ca      	lsrs	r2, r1
 8007b36:	07d6      	lsls	r6, r2, #31
 8007b38:	d528      	bpl.n	8007b8c <__sflush_r+0xb4>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	6062      	str	r2, [r4, #4]
 8007b3e:	6922      	ldr	r2, [r4, #16]
 8007b40:	04d9      	lsls	r1, r3, #19
 8007b42:	6022      	str	r2, [r4, #0]
 8007b44:	d504      	bpl.n	8007b50 <__sflush_r+0x78>
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0x76>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	b903      	cbnz	r3, 8007b50 <__sflush_r+0x78>
 8007b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b52:	602f      	str	r7, [r5, #0]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d0cb      	beq.n	8007af0 <__sflush_r+0x18>
 8007b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__sflush_r+0x8e>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 f9bd 	bl	8007ee0 <_free_r>
 8007b66:	2000      	movs	r0, #0
 8007b68:	6360      	str	r0, [r4, #52]	; 0x34
 8007b6a:	e7c2      	b.n	8007af2 <__sflush_r+0x1a>
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	1c41      	adds	r1, r0, #1
 8007b76:	d1c7      	bne.n	8007b08 <__sflush_r+0x30>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0c4      	beq.n	8007b08 <__sflush_r+0x30>
 8007b7e:	2b1d      	cmp	r3, #29
 8007b80:	d001      	beq.n	8007b86 <__sflush_r+0xae>
 8007b82:	2b16      	cmp	r3, #22
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0xb2>
 8007b86:	602f      	str	r7, [r5, #0]
 8007b88:	e7b2      	b.n	8007af0 <__sflush_r+0x18>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7ae      	b.n	8007af2 <__sflush_r+0x1a>
 8007b94:	690f      	ldr	r7, [r1, #16]
 8007b96:	2f00      	cmp	r7, #0
 8007b98:	d0aa      	beq.n	8007af0 <__sflush_r+0x18>
 8007b9a:	0793      	lsls	r3, r2, #30
 8007b9c:	bf18      	it	ne
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	680e      	ldr	r6, [r1, #0]
 8007ba2:	bf08      	it	eq
 8007ba4:	694b      	ldreq	r3, [r1, #20]
 8007ba6:	1bf6      	subs	r6, r6, r7
 8007ba8:	600f      	str	r7, [r1, #0]
 8007baa:	608b      	str	r3, [r1, #8]
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	dd9f      	ble.n	8007af0 <__sflush_r+0x18>
 8007bb0:	4633      	mov	r3, r6
 8007bb2:	463a      	mov	r2, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	6a21      	ldr	r1, [r4, #32]
 8007bb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007bbc:	47e0      	blx	ip
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	dc06      	bgt.n	8007bd0 <__sflush_r+0xf8>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	e790      	b.n	8007af2 <__sflush_r+0x1a>
 8007bd0:	4407      	add	r7, r0
 8007bd2:	1a36      	subs	r6, r6, r0
 8007bd4:	e7ea      	b.n	8007bac <__sflush_r+0xd4>
 8007bd6:	bf00      	nop
 8007bd8:	20400001 	.word	0x20400001

08007bdc <_fflush_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	690b      	ldr	r3, [r1, #16]
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b913      	cbnz	r3, 8007bec <_fflush_r+0x10>
 8007be6:	2500      	movs	r5, #0
 8007be8:	4628      	mov	r0, r5
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	b118      	cbz	r0, 8007bf6 <_fflush_r+0x1a>
 8007bee:	6983      	ldr	r3, [r0, #24]
 8007bf0:	b90b      	cbnz	r3, 8007bf6 <_fflush_r+0x1a>
 8007bf2:	f000 f887 	bl	8007d04 <__sinit>
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <_fflush_r+0x6c>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d11b      	bne.n	8007c34 <_fflush_r+0x58>
 8007bfc:	686c      	ldr	r4, [r5, #4]
 8007bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0ef      	beq.n	8007be6 <_fflush_r+0xa>
 8007c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c08:	07d0      	lsls	r0, r2, #31
 8007c0a:	d404      	bmi.n	8007c16 <_fflush_r+0x3a>
 8007c0c:	0599      	lsls	r1, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_fflush_r+0x3a>
 8007c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c12:	f000 f927 	bl	8007e64 <__retarget_lock_acquire_recursive>
 8007c16:	4628      	mov	r0, r5
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7ff ff5d 	bl	8007ad8 <__sflush_r>
 8007c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c20:	4605      	mov	r5, r0
 8007c22:	07da      	lsls	r2, r3, #31
 8007c24:	d4e0      	bmi.n	8007be8 <_fflush_r+0xc>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	059b      	lsls	r3, r3, #22
 8007c2a:	d4dd      	bmi.n	8007be8 <_fflush_r+0xc>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 f91a 	bl	8007e66 <__retarget_lock_release_recursive>
 8007c32:	e7d9      	b.n	8007be8 <_fflush_r+0xc>
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <_fflush_r+0x70>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <_fflush_r+0x62>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7df      	b.n	8007bfe <_fflush_r+0x22>
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <_fflush_r+0x74>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7da      	b.n	8007bfe <_fflush_r+0x22>
 8007c48:	08008c50 	.word	0x08008c50
 8007c4c:	08008c70 	.word	0x08008c70
 8007c50:	08008c30 	.word	0x08008c30

08007c54 <std>:
 8007c54:	2300      	movs	r3, #0
 8007c56:	b510      	push	{r4, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c62:	6083      	str	r3, [r0, #8]
 8007c64:	8181      	strh	r1, [r0, #12]
 8007c66:	6643      	str	r3, [r0, #100]	; 0x64
 8007c68:	81c2      	strh	r2, [r0, #14]
 8007c6a:	6183      	str	r3, [r0, #24]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2208      	movs	r2, #8
 8007c70:	305c      	adds	r0, #92	; 0x5c
 8007c72:	f7fc fd8b 	bl	800478c <memset>
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x38>)
 8007c78:	6224      	str	r4, [r4, #32]
 8007c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <std+0x3c>)
 8007c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <std+0x40>)
 8007c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <std+0x44>)
 8007c86:	6323      	str	r3, [r4, #48]	; 0x30
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08004c55 	.word	0x08004c55
 8007c90:	08004c7b 	.word	0x08004c7b
 8007c94:	08004cb3 	.word	0x08004cb3
 8007c98:	08004cd7 	.word	0x08004cd7

08007c9c <_cleanup_r>:
 8007c9c:	4901      	ldr	r1, [pc, #4]	; (8007ca4 <_cleanup_r+0x8>)
 8007c9e:	f000 b8c1 	b.w	8007e24 <_fwalk_reent>
 8007ca2:	bf00      	nop
 8007ca4:	08007bdd 	.word	0x08007bdd

08007ca8 <__sfmoreglue>:
 8007ca8:	2268      	movs	r2, #104	; 0x68
 8007caa:	b570      	push	{r4, r5, r6, lr}
 8007cac:	1e4d      	subs	r5, r1, #1
 8007cae:	4355      	muls	r5, r2
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cb6:	f7fe ff4b 	bl	8006b50 <_malloc_r>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	b140      	cbz	r0, 8007cd0 <__sfmoreglue+0x28>
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	60a0      	str	r0, [r4, #8]
 8007cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ccc:	f7fc fd5e 	bl	800478c <memset>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b8c5 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200003e5 	.word	0x200003e5

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b8c0 	b.w	8007e66 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	200003e5 	.word	0x200003e5

08007cec <__sinit_lock_acquire>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__sinit_lock_acquire+0x8>)
 8007cee:	f000 b8b9 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	200003e6 	.word	0x200003e6

08007cf8 <__sinit_lock_release>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sinit_lock_release+0x8>)
 8007cfa:	f000 b8b4 	b.w	8007e66 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200003e6 	.word	0x200003e6

08007d04 <__sinit>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff fff0 	bl	8007cec <__sinit_lock_acquire>
 8007d0c:	69a3      	ldr	r3, [r4, #24]
 8007d0e:	b11b      	cbz	r3, 8007d18 <__sinit+0x14>
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f7ff bff0 	b.w	8007cf8 <__sinit_lock_release>
 8007d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d1e:	4b13      	ldr	r3, [pc, #76]	; (8007d6c <__sinit+0x68>)
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <__sinit+0x6c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	bf08      	it	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bf08      	it	eq
 8007d30:	61a3      	streq	r3, [r4, #24]
 8007d32:	f000 f81f 	bl	8007d74 <__sfp>
 8007d36:	6060      	str	r0, [r4, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f81b 	bl	8007d74 <__sfp>
 8007d3e:	60a0      	str	r0, [r4, #8]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f817 	bl	8007d74 <__sfp>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2104      	movs	r1, #4
 8007d4a:	60e0      	str	r0, [r4, #12]
 8007d4c:	6860      	ldr	r0, [r4, #4]
 8007d4e:	f7ff ff81 	bl	8007c54 <std>
 8007d52:	2201      	movs	r2, #1
 8007d54:	2109      	movs	r1, #9
 8007d56:	68a0      	ldr	r0, [r4, #8]
 8007d58:	f7ff ff7c 	bl	8007c54 <std>
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	2112      	movs	r1, #18
 8007d60:	68e0      	ldr	r0, [r4, #12]
 8007d62:	f7ff ff77 	bl	8007c54 <std>
 8007d66:	2301      	movs	r3, #1
 8007d68:	61a3      	str	r3, [r4, #24]
 8007d6a:	e7d1      	b.n	8007d10 <__sinit+0xc>
 8007d6c:	0800883c 	.word	0x0800883c
 8007d70:	08007c9d 	.word	0x08007c9d

08007d74 <__sfp>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	4607      	mov	r7, r0
 8007d78:	f7ff ffac 	bl	8007cd4 <__sfp_lock_acquire>
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <__sfp+0x84>)
 8007d7e:	681e      	ldr	r6, [r3, #0]
 8007d80:	69b3      	ldr	r3, [r6, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__sfp+0x16>
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff ffbd 	bl	8007d04 <__sinit>
 8007d8a:	3648      	adds	r6, #72	; 0x48
 8007d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	d503      	bpl.n	8007d9c <__sfp+0x28>
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	b30b      	cbz	r3, 8007ddc <__sfp+0x68>
 8007d98:	6836      	ldr	r6, [r6, #0]
 8007d9a:	e7f7      	b.n	8007d8c <__sfp+0x18>
 8007d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da0:	b9d5      	cbnz	r5, 8007dd8 <__sfp+0x64>
 8007da2:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <__sfp+0x88>)
 8007da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	6665      	str	r5, [r4, #100]	; 0x64
 8007dac:	f000 f859 	bl	8007e62 <__retarget_lock_init_recursive>
 8007db0:	f7ff ff96 	bl	8007ce0 <__sfp_lock_release>
 8007db4:	2208      	movs	r2, #8
 8007db6:	4629      	mov	r1, r5
 8007db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	61a5      	str	r5, [r4, #24]
 8007dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dc8:	f7fc fce0 	bl	800478c <memset>
 8007dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd8:	3468      	adds	r4, #104	; 0x68
 8007dda:	e7d9      	b.n	8007d90 <__sfp+0x1c>
 8007ddc:	2104      	movs	r1, #4
 8007dde:	4638      	mov	r0, r7
 8007de0:	f7ff ff62 	bl	8007ca8 <__sfmoreglue>
 8007de4:	4604      	mov	r4, r0
 8007de6:	6030      	str	r0, [r6, #0]
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1d5      	bne.n	8007d98 <__sfp+0x24>
 8007dec:	f7ff ff78 	bl	8007ce0 <__sfp_lock_release>
 8007df0:	230c      	movs	r3, #12
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	e7ee      	b.n	8007dd4 <__sfp+0x60>
 8007df6:	bf00      	nop
 8007df8:	0800883c 	.word	0x0800883c
 8007dfc:	ffff0001 	.word	0xffff0001

08007e00 <fiprintf>:
 8007e00:	b40e      	push	{r1, r2, r3}
 8007e02:	b503      	push	{r0, r1, lr}
 8007e04:	4601      	mov	r1, r0
 8007e06:	ab03      	add	r3, sp, #12
 8007e08:	4805      	ldr	r0, [pc, #20]	; (8007e20 <fiprintf+0x20>)
 8007e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f000 f903 	bl	800801c <_vfiprintf_r>
 8007e16:	b002      	add	sp, #8
 8007e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e1c:	b003      	add	sp, #12
 8007e1e:	4770      	bx	lr
 8007e20:	2000000c 	.word	0x2000000c

08007e24 <_fwalk_reent>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4606      	mov	r6, r0
 8007e2a:	4688      	mov	r8, r1
 8007e2c:	2700      	movs	r7, #0
 8007e2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e36:	f1b9 0901 	subs.w	r9, r9, #1
 8007e3a:	d505      	bpl.n	8007e48 <_fwalk_reent+0x24>
 8007e3c:	6824      	ldr	r4, [r4, #0]
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d1f7      	bne.n	8007e32 <_fwalk_reent+0xe>
 8007e42:	4638      	mov	r0, r7
 8007e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e48:	89ab      	ldrh	r3, [r5, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d907      	bls.n	8007e5e <_fwalk_reent+0x3a>
 8007e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e52:	3301      	adds	r3, #1
 8007e54:	d003      	beq.n	8007e5e <_fwalk_reent+0x3a>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	47c0      	blx	r8
 8007e5c:	4307      	orrs	r7, r0
 8007e5e:	3568      	adds	r5, #104	; 0x68
 8007e60:	e7e9      	b.n	8007e36 <_fwalk_reent+0x12>

08007e62 <__retarget_lock_init_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <__retarget_lock_acquire_recursive>:
 8007e64:	4770      	bx	lr

08007e66 <__retarget_lock_release_recursive>:
 8007e66:	4770      	bx	lr

08007e68 <malloc>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <malloc+0xc>)
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f7fe be6f 	b.w	8006b50 <_malloc_r>
 8007e72:	bf00      	nop
 8007e74:	2000000c 	.word	0x2000000c

08007e78 <memchr>:
 8007e78:	4603      	mov	r3, r0
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	b2c9      	uxtb	r1, r1
 8007e7e:	4402      	add	r2, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	d101      	bne.n	8007e8a <memchr+0x12>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e003      	b.n	8007e92 <memchr+0x1a>
 8007e8a:	7804      	ldrb	r4, [r0, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	428c      	cmp	r4, r1
 8007e90:	d1f6      	bne.n	8007e80 <memchr+0x8>
 8007e92:	bd10      	pop	{r4, pc}

08007e94 <memmove>:
 8007e94:	4288      	cmp	r0, r1
 8007e96:	b510      	push	{r4, lr}
 8007e98:	eb01 0402 	add.w	r4, r1, r2
 8007e9c:	d902      	bls.n	8007ea4 <memmove+0x10>
 8007e9e:	4284      	cmp	r4, r0
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	d807      	bhi.n	8007eb4 <memmove+0x20>
 8007ea4:	1e43      	subs	r3, r0, #1
 8007ea6:	42a1      	cmp	r1, r4
 8007ea8:	d008      	beq.n	8007ebc <memmove+0x28>
 8007eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eb2:	e7f8      	b.n	8007ea6 <memmove+0x12>
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4402      	add	r2, r0
 8007eb8:	428a      	cmp	r2, r1
 8007eba:	d100      	bne.n	8007ebe <memmove+0x2a>
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ec6:	e7f7      	b.n	8007eb8 <memmove+0x24>

08007ec8 <__malloc_lock>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__malloc_lock+0x8>)
 8007eca:	f7ff bfcb 	b.w	8007e64 <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	200003e4 	.word	0x200003e4

08007ed4 <__malloc_unlock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_unlock+0x8>)
 8007ed6:	f7ff bfc6 	b.w	8007e66 <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	200003e4 	.word	0x200003e4

08007ee0 <_free_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d040      	beq.n	8007f6a <_free_r+0x8a>
 8007ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eec:	1f0c      	subs	r4, r1, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfb8      	it	lt
 8007ef2:	18e4      	addlt	r4, r4, r3
 8007ef4:	f7ff ffe8 	bl	8007ec8 <__malloc_lock>
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <_free_r+0x8c>)
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	b933      	cbnz	r3, 8007f0c <_free_r+0x2c>
 8007efe:	6063      	str	r3, [r4, #4]
 8007f00:	6014      	str	r4, [r2, #0]
 8007f02:	4628      	mov	r0, r5
 8007f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f08:	f7ff bfe4 	b.w	8007ed4 <__malloc_unlock>
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	d908      	bls.n	8007f22 <_free_r+0x42>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1821      	adds	r1, r4, r0
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf01      	itttt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	e7ed      	b.n	8007efe <_free_r+0x1e>
 8007f22:	461a      	mov	r2, r3
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	b10b      	cbz	r3, 8007f2c <_free_r+0x4c>
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d9fa      	bls.n	8007f22 <_free_r+0x42>
 8007f2c:	6811      	ldr	r1, [r2, #0]
 8007f2e:	1850      	adds	r0, r2, r1
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d10b      	bne.n	8007f4c <_free_r+0x6c>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	4401      	add	r1, r0
 8007f38:	1850      	adds	r0, r2, r1
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	d1e0      	bne.n	8007f02 <_free_r+0x22>
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4401      	add	r1, r0
 8007f46:	6011      	str	r1, [r2, #0]
 8007f48:	6053      	str	r3, [r2, #4]
 8007f4a:	e7da      	b.n	8007f02 <_free_r+0x22>
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x74>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	e7d6      	b.n	8007f02 <_free_r+0x22>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	1821      	adds	r1, r4, r0
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	bf01      	itttt	eq
 8007f5c:	6819      	ldreq	r1, [r3, #0]
 8007f5e:	685b      	ldreq	r3, [r3, #4]
 8007f60:	1809      	addeq	r1, r1, r0
 8007f62:	6021      	streq	r1, [r4, #0]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6054      	str	r4, [r2, #4]
 8007f68:	e7cb      	b.n	8007f02 <_free_r+0x22>
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	200003d8 	.word	0x200003d8

08007f70 <_realloc_r>:
 8007f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f74:	4680      	mov	r8, r0
 8007f76:	4614      	mov	r4, r2
 8007f78:	460e      	mov	r6, r1
 8007f7a:	b921      	cbnz	r1, 8007f86 <_realloc_r+0x16>
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f82:	f7fe bde5 	b.w	8006b50 <_malloc_r>
 8007f86:	b92a      	cbnz	r2, 8007f94 <_realloc_r+0x24>
 8007f88:	f7ff ffaa 	bl	8007ee0 <_free_r>
 8007f8c:	4625      	mov	r5, r4
 8007f8e:	4628      	mov	r0, r5
 8007f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f94:	f000 fa9e 	bl	80084d4 <_malloc_usable_size_r>
 8007f98:	4284      	cmp	r4, r0
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	d802      	bhi.n	8007fa4 <_realloc_r+0x34>
 8007f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fa2:	d812      	bhi.n	8007fca <_realloc_r+0x5a>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7fe fdd2 	bl	8006b50 <_malloc_r>
 8007fac:	4605      	mov	r5, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d0ed      	beq.n	8007f8e <_realloc_r+0x1e>
 8007fb2:	42bc      	cmp	r4, r7
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	bf28      	it	cs
 8007fba:	463a      	movcs	r2, r7
 8007fbc:	f7fc fbd8 	bl	8004770 <memcpy>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	f7ff ff8c 	bl	8007ee0 <_free_r>
 8007fc8:	e7e1      	b.n	8007f8e <_realloc_r+0x1e>
 8007fca:	4635      	mov	r5, r6
 8007fcc:	e7df      	b.n	8007f8e <_realloc_r+0x1e>

08007fce <__sfputc_r>:
 8007fce:	6893      	ldr	r3, [r2, #8]
 8007fd0:	b410      	push	{r4}
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	6093      	str	r3, [r2, #8]
 8007fd8:	da07      	bge.n	8007fea <__sfputc_r+0x1c>
 8007fda:	6994      	ldr	r4, [r2, #24]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	db01      	blt.n	8007fe4 <__sfputc_r+0x16>
 8007fe0:	290a      	cmp	r1, #10
 8007fe2:	d102      	bne.n	8007fea <__sfputc_r+0x1c>
 8007fe4:	bc10      	pop	{r4}
 8007fe6:	f000 b949 	b.w	800827c <__swbuf_r>
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	1c58      	adds	r0, r3, #1
 8007fee:	6010      	str	r0, [r2, #0]
 8007ff0:	7019      	strb	r1, [r3, #0]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	bc10      	pop	{r4}
 8007ff6:	4770      	bx	lr

08007ff8 <__sfputs_r>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	4614      	mov	r4, r2
 8008000:	18d5      	adds	r5, r2, r3
 8008002:	42ac      	cmp	r4, r5
 8008004:	d101      	bne.n	800800a <__sfputs_r+0x12>
 8008006:	2000      	movs	r0, #0
 8008008:	e007      	b.n	800801a <__sfputs_r+0x22>
 800800a:	463a      	mov	r2, r7
 800800c:	4630      	mov	r0, r6
 800800e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008012:	f7ff ffdc 	bl	8007fce <__sfputc_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d1f3      	bne.n	8008002 <__sfputs_r+0xa>
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800801c <_vfiprintf_r>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	460d      	mov	r5, r1
 8008022:	4614      	mov	r4, r2
 8008024:	4698      	mov	r8, r3
 8008026:	4606      	mov	r6, r0
 8008028:	b09d      	sub	sp, #116	; 0x74
 800802a:	b118      	cbz	r0, 8008034 <_vfiprintf_r+0x18>
 800802c:	6983      	ldr	r3, [r0, #24]
 800802e:	b90b      	cbnz	r3, 8008034 <_vfiprintf_r+0x18>
 8008030:	f7ff fe68 	bl	8007d04 <__sinit>
 8008034:	4b89      	ldr	r3, [pc, #548]	; (800825c <_vfiprintf_r+0x240>)
 8008036:	429d      	cmp	r5, r3
 8008038:	d11b      	bne.n	8008072 <_vfiprintf_r+0x56>
 800803a:	6875      	ldr	r5, [r6, #4]
 800803c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800803e:	07d9      	lsls	r1, r3, #31
 8008040:	d405      	bmi.n	800804e <_vfiprintf_r+0x32>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	059a      	lsls	r2, r3, #22
 8008046:	d402      	bmi.n	800804e <_vfiprintf_r+0x32>
 8008048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804a:	f7ff ff0b 	bl	8007e64 <__retarget_lock_acquire_recursive>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	071b      	lsls	r3, r3, #28
 8008052:	d501      	bpl.n	8008058 <_vfiprintf_r+0x3c>
 8008054:	692b      	ldr	r3, [r5, #16]
 8008056:	b9eb      	cbnz	r3, 8008094 <_vfiprintf_r+0x78>
 8008058:	4629      	mov	r1, r5
 800805a:	4630      	mov	r0, r6
 800805c:	f000 f960 	bl	8008320 <__swsetup_r>
 8008060:	b1c0      	cbz	r0, 8008094 <_vfiprintf_r+0x78>
 8008062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008064:	07dc      	lsls	r4, r3, #31
 8008066:	d50e      	bpl.n	8008086 <_vfiprintf_r+0x6a>
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	b01d      	add	sp, #116	; 0x74
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	4b7b      	ldr	r3, [pc, #492]	; (8008260 <_vfiprintf_r+0x244>)
 8008074:	429d      	cmp	r5, r3
 8008076:	d101      	bne.n	800807c <_vfiprintf_r+0x60>
 8008078:	68b5      	ldr	r5, [r6, #8]
 800807a:	e7df      	b.n	800803c <_vfiprintf_r+0x20>
 800807c:	4b79      	ldr	r3, [pc, #484]	; (8008264 <_vfiprintf_r+0x248>)
 800807e:	429d      	cmp	r5, r3
 8008080:	bf08      	it	eq
 8008082:	68f5      	ldreq	r5, [r6, #12]
 8008084:	e7da      	b.n	800803c <_vfiprintf_r+0x20>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	0598      	lsls	r0, r3, #22
 800808a:	d4ed      	bmi.n	8008068 <_vfiprintf_r+0x4c>
 800808c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808e:	f7ff feea 	bl	8007e66 <__retarget_lock_release_recursive>
 8008092:	e7e9      	b.n	8008068 <_vfiprintf_r+0x4c>
 8008094:	2300      	movs	r3, #0
 8008096:	9309      	str	r3, [sp, #36]	; 0x24
 8008098:	2320      	movs	r3, #32
 800809a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800809e:	2330      	movs	r3, #48	; 0x30
 80080a0:	f04f 0901 	mov.w	r9, #1
 80080a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008268 <_vfiprintf_r+0x24c>
 80080ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080b0:	4623      	mov	r3, r4
 80080b2:	469a      	mov	sl, r3
 80080b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b8:	b10a      	cbz	r2, 80080be <_vfiprintf_r+0xa2>
 80080ba:	2a25      	cmp	r2, #37	; 0x25
 80080bc:	d1f9      	bne.n	80080b2 <_vfiprintf_r+0x96>
 80080be:	ebba 0b04 	subs.w	fp, sl, r4
 80080c2:	d00b      	beq.n	80080dc <_vfiprintf_r+0xc0>
 80080c4:	465b      	mov	r3, fp
 80080c6:	4622      	mov	r2, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff ff94 	bl	8007ff8 <__sfputs_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	f000 80aa 	beq.w	800822a <_vfiprintf_r+0x20e>
 80080d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d8:	445a      	add	r2, fp
 80080da:	9209      	str	r2, [sp, #36]	; 0x24
 80080dc:	f89a 3000 	ldrb.w	r3, [sl]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80a2 	beq.w	800822a <_vfiprintf_r+0x20e>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f0:	f10a 0a01 	add.w	sl, sl, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	9307      	str	r3, [sp, #28]
 80080f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080fc:	931a      	str	r3, [sp, #104]	; 0x68
 80080fe:	4654      	mov	r4, sl
 8008100:	2205      	movs	r2, #5
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	4858      	ldr	r0, [pc, #352]	; (8008268 <_vfiprintf_r+0x24c>)
 8008108:	f7ff feb6 	bl	8007e78 <memchr>
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	b9d8      	cbnz	r0, 8008148 <_vfiprintf_r+0x12c>
 8008110:	06d1      	lsls	r1, r2, #27
 8008112:	bf44      	itt	mi
 8008114:	2320      	movmi	r3, #32
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811a:	0713      	lsls	r3, r2, #28
 800811c:	bf44      	itt	mi
 800811e:	232b      	movmi	r3, #43	; 0x2b
 8008120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b2a      	cmp	r3, #42	; 0x2a
 800812a:	d015      	beq.n	8008158 <_vfiprintf_r+0x13c>
 800812c:	4654      	mov	r4, sl
 800812e:	2000      	movs	r0, #0
 8008130:	f04f 0c0a 	mov.w	ip, #10
 8008134:	9a07      	ldr	r2, [sp, #28]
 8008136:	4621      	mov	r1, r4
 8008138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813c:	3b30      	subs	r3, #48	; 0x30
 800813e:	2b09      	cmp	r3, #9
 8008140:	d94e      	bls.n	80081e0 <_vfiprintf_r+0x1c4>
 8008142:	b1b0      	cbz	r0, 8008172 <_vfiprintf_r+0x156>
 8008144:	9207      	str	r2, [sp, #28]
 8008146:	e014      	b.n	8008172 <_vfiprintf_r+0x156>
 8008148:	eba0 0308 	sub.w	r3, r0, r8
 800814c:	fa09 f303 	lsl.w	r3, r9, r3
 8008150:	4313      	orrs	r3, r2
 8008152:	46a2      	mov	sl, r4
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	e7d2      	b.n	80080fe <_vfiprintf_r+0xe2>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	1d19      	adds	r1, r3, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	9103      	str	r1, [sp, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bfbb      	ittet	lt
 8008164:	425b      	neglt	r3, r3
 8008166:	f042 0202 	orrlt.w	r2, r2, #2
 800816a:	9307      	strge	r3, [sp, #28]
 800816c:	9307      	strlt	r3, [sp, #28]
 800816e:	bfb8      	it	lt
 8008170:	9204      	strlt	r2, [sp, #16]
 8008172:	7823      	ldrb	r3, [r4, #0]
 8008174:	2b2e      	cmp	r3, #46	; 0x2e
 8008176:	d10c      	bne.n	8008192 <_vfiprintf_r+0x176>
 8008178:	7863      	ldrb	r3, [r4, #1]
 800817a:	2b2a      	cmp	r3, #42	; 0x2a
 800817c:	d135      	bne.n	80081ea <_vfiprintf_r+0x1ce>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	3402      	adds	r4, #2
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	9203      	str	r2, [sp, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfb8      	it	lt
 800818c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800826c <_vfiprintf_r+0x250>
 8008196:	2203      	movs	r2, #3
 8008198:	4650      	mov	r0, sl
 800819a:	7821      	ldrb	r1, [r4, #0]
 800819c:	f7ff fe6c 	bl	8007e78 <memchr>
 80081a0:	b140      	cbz	r0, 80081b4 <_vfiprintf_r+0x198>
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	eba0 000a 	sub.w	r0, r0, sl
 80081a8:	fa03 f000 	lsl.w	r0, r3, r0
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	3401      	adds	r4, #1
 80081b0:	4303      	orrs	r3, r0
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	2206      	movs	r2, #6
 80081ba:	482d      	ldr	r0, [pc, #180]	; (8008270 <_vfiprintf_r+0x254>)
 80081bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081c0:	f7ff fe5a 	bl	8007e78 <memchr>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d03f      	beq.n	8008248 <_vfiprintf_r+0x22c>
 80081c8:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <_vfiprintf_r+0x258>)
 80081ca:	bb1b      	cbnz	r3, 8008214 <_vfiprintf_r+0x1f8>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	3307      	adds	r3, #7
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	3308      	adds	r3, #8
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	443b      	add	r3, r7
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	e767      	b.n	80080b0 <_vfiprintf_r+0x94>
 80081e0:	460c      	mov	r4, r1
 80081e2:	2001      	movs	r0, #1
 80081e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e8:	e7a5      	b.n	8008136 <_vfiprintf_r+0x11a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f04f 0c0a 	mov.w	ip, #10
 80081f0:	4619      	mov	r1, r3
 80081f2:	3401      	adds	r4, #1
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	4620      	mov	r0, r4
 80081f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fc:	3a30      	subs	r2, #48	; 0x30
 80081fe:	2a09      	cmp	r2, #9
 8008200:	d903      	bls.n	800820a <_vfiprintf_r+0x1ee>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c5      	beq.n	8008192 <_vfiprintf_r+0x176>
 8008206:	9105      	str	r1, [sp, #20]
 8008208:	e7c3      	b.n	8008192 <_vfiprintf_r+0x176>
 800820a:	4604      	mov	r4, r0
 800820c:	2301      	movs	r3, #1
 800820e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008212:	e7f0      	b.n	80081f6 <_vfiprintf_r+0x1da>
 8008214:	ab03      	add	r3, sp, #12
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	462a      	mov	r2, r5
 800821a:	4630      	mov	r0, r6
 800821c:	4b16      	ldr	r3, [pc, #88]	; (8008278 <_vfiprintf_r+0x25c>)
 800821e:	a904      	add	r1, sp, #16
 8008220:	f3af 8000 	nop.w
 8008224:	4607      	mov	r7, r0
 8008226:	1c78      	adds	r0, r7, #1
 8008228:	d1d6      	bne.n	80081d8 <_vfiprintf_r+0x1bc>
 800822a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	d405      	bmi.n	800823c <_vfiprintf_r+0x220>
 8008230:	89ab      	ldrh	r3, [r5, #12]
 8008232:	059a      	lsls	r2, r3, #22
 8008234:	d402      	bmi.n	800823c <_vfiprintf_r+0x220>
 8008236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008238:	f7ff fe15 	bl	8007e66 <__retarget_lock_release_recursive>
 800823c:	89ab      	ldrh	r3, [r5, #12]
 800823e:	065b      	lsls	r3, r3, #25
 8008240:	f53f af12 	bmi.w	8008068 <_vfiprintf_r+0x4c>
 8008244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008246:	e711      	b.n	800806c <_vfiprintf_r+0x50>
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	462a      	mov	r2, r5
 800824e:	4630      	mov	r0, r6
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <_vfiprintf_r+0x25c>)
 8008252:	a904      	add	r1, sp, #16
 8008254:	f7ff f890 	bl	8007378 <_printf_i>
 8008258:	e7e4      	b.n	8008224 <_vfiprintf_r+0x208>
 800825a:	bf00      	nop
 800825c:	08008c50 	.word	0x08008c50
 8008260:	08008c70 	.word	0x08008c70
 8008264:	08008c30 	.word	0x08008c30
 8008268:	08008ba4 	.word	0x08008ba4
 800826c:	08008baa 	.word	0x08008baa
 8008270:	08008bae 	.word	0x08008bae
 8008274:	00000000 	.word	0x00000000
 8008278:	08007ff9 	.word	0x08007ff9

0800827c <__swbuf_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	460e      	mov	r6, r1
 8008280:	4614      	mov	r4, r2
 8008282:	4605      	mov	r5, r0
 8008284:	b118      	cbz	r0, 800828e <__swbuf_r+0x12>
 8008286:	6983      	ldr	r3, [r0, #24]
 8008288:	b90b      	cbnz	r3, 800828e <__swbuf_r+0x12>
 800828a:	f7ff fd3b 	bl	8007d04 <__sinit>
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <__swbuf_r+0x98>)
 8008290:	429c      	cmp	r4, r3
 8008292:	d12b      	bne.n	80082ec <__swbuf_r+0x70>
 8008294:	686c      	ldr	r4, [r5, #4]
 8008296:	69a3      	ldr	r3, [r4, #24]
 8008298:	60a3      	str	r3, [r4, #8]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	071a      	lsls	r2, r3, #28
 800829e:	d52f      	bpl.n	8008300 <__swbuf_r+0x84>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	b36b      	cbz	r3, 8008300 <__swbuf_r+0x84>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	b2f6      	uxtb	r6, r6
 80082aa:	1ac0      	subs	r0, r0, r3
 80082ac:	6963      	ldr	r3, [r4, #20]
 80082ae:	4637      	mov	r7, r6
 80082b0:	4283      	cmp	r3, r0
 80082b2:	dc04      	bgt.n	80082be <__swbuf_r+0x42>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7ff fc90 	bl	8007bdc <_fflush_r>
 80082bc:	bb30      	cbnz	r0, 800830c <__swbuf_r+0x90>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	3001      	adds	r0, #1
 80082c2:	3b01      	subs	r3, #1
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	701e      	strb	r6, [r3, #0]
 80082ce:	6963      	ldr	r3, [r4, #20]
 80082d0:	4283      	cmp	r3, r0
 80082d2:	d004      	beq.n	80082de <__swbuf_r+0x62>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d506      	bpl.n	80082e8 <__swbuf_r+0x6c>
 80082da:	2e0a      	cmp	r6, #10
 80082dc:	d104      	bne.n	80082e8 <__swbuf_r+0x6c>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fc7b 	bl	8007bdc <_fflush_r>
 80082e6:	b988      	cbnz	r0, 800830c <__swbuf_r+0x90>
 80082e8:	4638      	mov	r0, r7
 80082ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <__swbuf_r+0x9c>)
 80082ee:	429c      	cmp	r4, r3
 80082f0:	d101      	bne.n	80082f6 <__swbuf_r+0x7a>
 80082f2:	68ac      	ldr	r4, [r5, #8]
 80082f4:	e7cf      	b.n	8008296 <__swbuf_r+0x1a>
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <__swbuf_r+0xa0>)
 80082f8:	429c      	cmp	r4, r3
 80082fa:	bf08      	it	eq
 80082fc:	68ec      	ldreq	r4, [r5, #12]
 80082fe:	e7ca      	b.n	8008296 <__swbuf_r+0x1a>
 8008300:	4621      	mov	r1, r4
 8008302:	4628      	mov	r0, r5
 8008304:	f000 f80c 	bl	8008320 <__swsetup_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	d0cb      	beq.n	80082a4 <__swbuf_r+0x28>
 800830c:	f04f 37ff 	mov.w	r7, #4294967295
 8008310:	e7ea      	b.n	80082e8 <__swbuf_r+0x6c>
 8008312:	bf00      	nop
 8008314:	08008c50 	.word	0x08008c50
 8008318:	08008c70 	.word	0x08008c70
 800831c:	08008c30 	.word	0x08008c30

08008320 <__swsetup_r>:
 8008320:	4b32      	ldr	r3, [pc, #200]	; (80083ec <__swsetup_r+0xcc>)
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	681d      	ldr	r5, [r3, #0]
 8008326:	4606      	mov	r6, r0
 8008328:	460c      	mov	r4, r1
 800832a:	b125      	cbz	r5, 8008336 <__swsetup_r+0x16>
 800832c:	69ab      	ldr	r3, [r5, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__swsetup_r+0x16>
 8008330:	4628      	mov	r0, r5
 8008332:	f7ff fce7 	bl	8007d04 <__sinit>
 8008336:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <__swsetup_r+0xd0>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d10f      	bne.n	800835c <__swsetup_r+0x3c>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008344:	0719      	lsls	r1, r3, #28
 8008346:	d42c      	bmi.n	80083a2 <__swsetup_r+0x82>
 8008348:	06dd      	lsls	r5, r3, #27
 800834a:	d411      	bmi.n	8008370 <__swsetup_r+0x50>
 800834c:	2309      	movs	r3, #9
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	e03e      	b.n	80083da <__swsetup_r+0xba>
 800835c:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <__swsetup_r+0xd4>)
 800835e:	429c      	cmp	r4, r3
 8008360:	d101      	bne.n	8008366 <__swsetup_r+0x46>
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	e7eb      	b.n	800833e <__swsetup_r+0x1e>
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <__swsetup_r+0xd8>)
 8008368:	429c      	cmp	r4, r3
 800836a:	bf08      	it	eq
 800836c:	68ec      	ldreq	r4, [r5, #12]
 800836e:	e7e6      	b.n	800833e <__swsetup_r+0x1e>
 8008370:	0758      	lsls	r0, r3, #29
 8008372:	d512      	bpl.n	800839a <__swsetup_r+0x7a>
 8008374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008376:	b141      	cbz	r1, 800838a <__swsetup_r+0x6a>
 8008378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837c:	4299      	cmp	r1, r3
 800837e:	d002      	beq.n	8008386 <__swsetup_r+0x66>
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fdad 	bl	8007ee0 <_free_r>
 8008386:	2300      	movs	r3, #0
 8008388:	6363      	str	r3, [r4, #52]	; 0x34
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b94b      	cbnz	r3, 80083ba <__swsetup_r+0x9a>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d003      	beq.n	80083ba <__swsetup_r+0x9a>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 f84d 	bl	8008454 <__smakebuf_r>
 80083ba:	89a0      	ldrh	r0, [r4, #12]
 80083bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c0:	f010 0301 	ands.w	r3, r0, #1
 80083c4:	d00a      	beq.n	80083dc <__swsetup_r+0xbc>
 80083c6:	2300      	movs	r3, #0
 80083c8:	60a3      	str	r3, [r4, #8]
 80083ca:	6963      	ldr	r3, [r4, #20]
 80083cc:	425b      	negs	r3, r3
 80083ce:	61a3      	str	r3, [r4, #24]
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	b943      	cbnz	r3, 80083e6 <__swsetup_r+0xc6>
 80083d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d8:	d1ba      	bne.n	8008350 <__swsetup_r+0x30>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	0781      	lsls	r1, r0, #30
 80083de:	bf58      	it	pl
 80083e0:	6963      	ldrpl	r3, [r4, #20]
 80083e2:	60a3      	str	r3, [r4, #8]
 80083e4:	e7f4      	b.n	80083d0 <__swsetup_r+0xb0>
 80083e6:	2000      	movs	r0, #0
 80083e8:	e7f7      	b.n	80083da <__swsetup_r+0xba>
 80083ea:	bf00      	nop
 80083ec:	2000000c 	.word	0x2000000c
 80083f0:	08008c50 	.word	0x08008c50
 80083f4:	08008c70 	.word	0x08008c70
 80083f8:	08008c30 	.word	0x08008c30

080083fc <abort>:
 80083fc:	2006      	movs	r0, #6
 80083fe:	b508      	push	{r3, lr}
 8008400:	f000 f898 	bl	8008534 <raise>
 8008404:	2001      	movs	r0, #1
 8008406:	f7f8 ff68 	bl	80012da <_exit>

0800840a <__swhatbuf_r>:
 800840a:	b570      	push	{r4, r5, r6, lr}
 800840c:	460e      	mov	r6, r1
 800840e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008412:	4614      	mov	r4, r2
 8008414:	2900      	cmp	r1, #0
 8008416:	461d      	mov	r5, r3
 8008418:	b096      	sub	sp, #88	; 0x58
 800841a:	da08      	bge.n	800842e <__swhatbuf_r+0x24>
 800841c:	2200      	movs	r2, #0
 800841e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008422:	602a      	str	r2, [r5, #0]
 8008424:	061a      	lsls	r2, r3, #24
 8008426:	d410      	bmi.n	800844a <__swhatbuf_r+0x40>
 8008428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842c:	e00e      	b.n	800844c <__swhatbuf_r+0x42>
 800842e:	466a      	mov	r2, sp
 8008430:	f000 f89c 	bl	800856c <_fstat_r>
 8008434:	2800      	cmp	r0, #0
 8008436:	dbf1      	blt.n	800841c <__swhatbuf_r+0x12>
 8008438:	9a01      	ldr	r2, [sp, #4]
 800843a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800843e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008442:	425a      	negs	r2, r3
 8008444:	415a      	adcs	r2, r3
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	e7ee      	b.n	8008428 <__swhatbuf_r+0x1e>
 800844a:	2340      	movs	r3, #64	; 0x40
 800844c:	2000      	movs	r0, #0
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	b016      	add	sp, #88	; 0x58
 8008452:	bd70      	pop	{r4, r5, r6, pc}

08008454 <__smakebuf_r>:
 8008454:	898b      	ldrh	r3, [r1, #12]
 8008456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008458:	079d      	lsls	r5, r3, #30
 800845a:	4606      	mov	r6, r0
 800845c:	460c      	mov	r4, r1
 800845e:	d507      	bpl.n	8008470 <__smakebuf_r+0x1c>
 8008460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	2301      	movs	r3, #1
 800846a:	6163      	str	r3, [r4, #20]
 800846c:	b002      	add	sp, #8
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	466a      	mov	r2, sp
 8008472:	ab01      	add	r3, sp, #4
 8008474:	f7ff ffc9 	bl	800840a <__swhatbuf_r>
 8008478:	9900      	ldr	r1, [sp, #0]
 800847a:	4605      	mov	r5, r0
 800847c:	4630      	mov	r0, r6
 800847e:	f7fe fb67 	bl	8006b50 <_malloc_r>
 8008482:	b948      	cbnz	r0, 8008498 <__smakebuf_r+0x44>
 8008484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008488:	059a      	lsls	r2, r3, #22
 800848a:	d4ef      	bmi.n	800846c <__smakebuf_r+0x18>
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	f043 0302 	orr.w	r3, r3, #2
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7e3      	b.n	8008460 <__smakebuf_r+0xc>
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <__smakebuf_r+0x7c>)
 800849a:	62b3      	str	r3, [r6, #40]	; 0x28
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	6020      	str	r0, [r4, #0]
 80084a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	6120      	str	r0, [r4, #16]
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	b15b      	cbz	r3, 80084c8 <__smakebuf_r+0x74>
 80084b0:	4630      	mov	r0, r6
 80084b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b6:	f000 f86b 	bl	8008590 <_isatty_r>
 80084ba:	b128      	cbz	r0, 80084c8 <__smakebuf_r+0x74>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f023 0303 	bic.w	r3, r3, #3
 80084c2:	f043 0301 	orr.w	r3, r3, #1
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	89a0      	ldrh	r0, [r4, #12]
 80084ca:	4305      	orrs	r5, r0
 80084cc:	81a5      	strh	r5, [r4, #12]
 80084ce:	e7cd      	b.n	800846c <__smakebuf_r+0x18>
 80084d0:	08007c9d 	.word	0x08007c9d

080084d4 <_malloc_usable_size_r>:
 80084d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d8:	1f18      	subs	r0, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfbc      	itt	lt
 80084de:	580b      	ldrlt	r3, [r1, r0]
 80084e0:	18c0      	addlt	r0, r0, r3
 80084e2:	4770      	bx	lr

080084e4 <_raise_r>:
 80084e4:	291f      	cmp	r1, #31
 80084e6:	b538      	push	{r3, r4, r5, lr}
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	d904      	bls.n	80084f8 <_raise_r+0x14>
 80084ee:	2316      	movs	r3, #22
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084fa:	b112      	cbz	r2, 8008502 <_raise_r+0x1e>
 80084fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008500:	b94b      	cbnz	r3, 8008516 <_raise_r+0x32>
 8008502:	4620      	mov	r0, r4
 8008504:	f000 f830 	bl	8008568 <_getpid_r>
 8008508:	462a      	mov	r2, r5
 800850a:	4601      	mov	r1, r0
 800850c:	4620      	mov	r0, r4
 800850e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008512:	f000 b817 	b.w	8008544 <_kill_r>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d00a      	beq.n	8008530 <_raise_r+0x4c>
 800851a:	1c59      	adds	r1, r3, #1
 800851c:	d103      	bne.n	8008526 <_raise_r+0x42>
 800851e:	2316      	movs	r3, #22
 8008520:	6003      	str	r3, [r0, #0]
 8008522:	2001      	movs	r0, #1
 8008524:	e7e7      	b.n	80084f6 <_raise_r+0x12>
 8008526:	2400      	movs	r4, #0
 8008528:	4628      	mov	r0, r5
 800852a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800852e:	4798      	blx	r3
 8008530:	2000      	movs	r0, #0
 8008532:	e7e0      	b.n	80084f6 <_raise_r+0x12>

08008534 <raise>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <raise+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f7ff bfd3 	b.w	80084e4 <_raise_r>
 800853e:	bf00      	nop
 8008540:	2000000c 	.word	0x2000000c

08008544 <_kill_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	2300      	movs	r3, #0
 8008548:	4d06      	ldr	r5, [pc, #24]	; (8008564 <_kill_r+0x20>)
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	4611      	mov	r1, r2
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f7f8 feb2 	bl	80012ba <_kill>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	d102      	bne.n	8008560 <_kill_r+0x1c>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	b103      	cbz	r3, 8008560 <_kill_r+0x1c>
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	bd38      	pop	{r3, r4, r5, pc}
 8008562:	bf00      	nop
 8008564:	200003e0 	.word	0x200003e0

08008568 <_getpid_r>:
 8008568:	f7f8 bea0 	b.w	80012ac <_getpid>

0800856c <_fstat_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	2300      	movs	r3, #0
 8008570:	4d06      	ldr	r5, [pc, #24]	; (800858c <_fstat_r+0x20>)
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	4611      	mov	r1, r2
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	f7f8 fefc 	bl	8001376 <_fstat>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	d102      	bne.n	8008588 <_fstat_r+0x1c>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	b103      	cbz	r3, 8008588 <_fstat_r+0x1c>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	200003e0 	.word	0x200003e0

08008590 <_isatty_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	2300      	movs	r3, #0
 8008594:	4d05      	ldr	r5, [pc, #20]	; (80085ac <_isatty_r+0x1c>)
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f8 fefa 	bl	8001394 <_isatty>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_isatty_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_isatty_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	200003e0 	.word	0x200003e0

080085b0 <_init>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr

080085bc <_fini>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr
