
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003ff0  08003ff0  00013ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08004090  08004090  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004090  08004090  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08004098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000100  08004198  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004198  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fcd  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161f  00000000  00000000  000270f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00028718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00028e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d14  00000000  00000000  00029498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000986d  00000000  00000000  000401ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b86  00000000  00000000  00049a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb59f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  000cb5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fd4 	.word	0x08003fd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08003fd4 	.word	0x08003fd4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_GPIO_Init+0x8c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480f      	ldr	r0, [pc, #60]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f3c:	f000 fece 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f40:	2302      	movs	r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f54:	f000 fec2 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2006      	movs	r0, #6
 8000f5e:	f000 fe86 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f62:	2006      	movs	r0, #6
 8000f64:	f000 fe9f 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	10210000 	.word	0x10210000
 8000f78:	40010800 	.word	0x40010800

08000f7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f82:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <MX_I2C1_Init+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_I2C1_Init+0x58>)
 8000f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fba:	f001 f84d 	bl	8002058 <HAL_I2C_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc4:	f000 f8ab 	bl	800111e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000011c 	.word	0x2000011c
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	000186a0 	.word	0x000186a0

08000fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_I2C_MspInit+0x70>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d123      	bne.n	8001040 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_I2C_MspInit+0x74>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_I2C_MspInit+0x74>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_I2C_MspInit+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c0      	movs	r3, #192	; 0xc0
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_I2C_MspInit+0x78>)
 8001024:	f000 fe5a 	bl	8001cdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_I2C_MspInit+0x74>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_I2C_MspInit+0x74>)
 800102e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001032:	61d3      	str	r3, [r2, #28]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_I2C_MspInit+0x74>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010c00 	.word	0x40010c00

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fcac 	bl	80019b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050_Init(&hi2c1);
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <main+0x44>)
 800105e:	f000 f863 	bl	8001128 <MPU6050_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f821 	bl	80010a8 <SystemClock_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Data_Ready()){
 8001066:	f000 fc0d 	bl	8001884 <Data_Ready>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00f      	beq.n	8001090 <main+0x3c>
	  	  MPU6050_Read_All(&hi2c1, &data);
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <main+0x48>)
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <main+0x44>)
 8001074:	f000 f8d4 	bl	8001220 <MPU6050_Read_All>
	  	  roll  = data.KalmanAngleX;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <main+0x48>)
 800107a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <main+0x4c>)
 8001080:	e9c1 2300 	strd	r2, r3, [r1]
	  	  pitch = data.KalmanAngleY;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <main+0x48>)
 8001086:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800108a:	4906      	ldr	r1, [pc, #24]	; (80010a4 <main+0x50>)
 800108c:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  HAL_Delay(100);
 8001090:	2064      	movs	r0, #100	; 0x64
 8001092:	f000 fcf1 	bl	8001a78 <HAL_Delay>
	  if(Data_Ready()){
 8001096:	e7e6      	b.n	8001066 <main+0x12>
 8001098:	2000011c 	.word	0x2000011c
 800109c:	20000170 	.word	0x20000170
 80010a0:	200001c8 	.word	0x200001c8
 80010a4:	200001d0 	.word	0x200001d0

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fc4e 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f814 	bl	800310c <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ea:	f000 f818 	bl	800111e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fa82 	bl	8003610 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001112:	f000 f804 	bl	800111e <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
}
 8001124:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001126:	e7fe      	b.n	8001126 <Error_Handler+0x8>

08001128 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af04      	add	r7, sp, #16
 800112e:	6078      	str	r0, [r7, #4]
	MX_GPIO_Init();
 8001130:	f7ff fed8 	bl	8000ee4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001134:	f7ff ff22 	bl	8000f7c <MX_I2C1_Init>
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030f 	add.w	r3, r7, #15
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2275      	movs	r2, #117	; 0x75
 800114a:	21d0      	movs	r1, #208	; 0xd0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f001 f9c1 	bl	80024d4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b68      	cmp	r3, #104	; 0x68
 8001156:	d15b      	bne.n	8001210 <MPU6050_Init+0xe8>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x80;
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2301      	movs	r3, #1
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f107 030e 	add.w	r3, r7, #14
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	226b      	movs	r2, #107	; 0x6b
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f001 f8b5 	bl	80022e0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001176:	2307      	movs	r3, #7
 8001178:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 030e 	add.w	r3, r7, #14
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2219      	movs	r2, #25
 800118c:	21d0      	movs	r1, #208	; 0xd0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f001 f8a6 	bl	80022e0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	f107 030e 	add.w	r3, r7, #14
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	221c      	movs	r2, #28
 80011aa:	21d0      	movs	r1, #208	; 0xd0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f001 f897 	bl	80022e0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030e 	add.w	r3, r7, #14
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	221b      	movs	r2, #27
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f001 f888 	bl	80022e0 <HAL_I2C_Mem_Write>

        // Set INT Level
        Data = 0x90;
 80011d0:	2390      	movs	r3, #144	; 0x90
 80011d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &Data, 1, i2c_timeout);
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 030e 	add.w	r3, r7, #14
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2237      	movs	r2, #55	; 0x37
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f001 f879 	bl	80022e0 <HAL_I2C_Mem_Write>
        // Set interrupt
        Data = 0x01;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, i2c_timeout);
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	f107 030e 	add.w	r3, r7, #14
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	2238      	movs	r2, #56	; 0x38
 8001204:	21d0      	movs	r1, #208	; 0xd0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 f86a 	bl	80022e0 <HAL_I2C_Mem_Write>
        return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e000      	b.n	8001212 <MPU6050_Init+0xea>
    }
    return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	0000      	movs	r0, r0
 800121c:	0000      	movs	r0, r0
	...

08001220 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001224:	b094      	sub	sp, #80	; 0x50
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	230e      	movs	r3, #14
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	223b      	movs	r2, #59	; 0x3b
 800123e:	21d0      	movs	r1, #208	; 0xd0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 f947 	bl	80024d4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001246:	7a3b      	ldrb	r3, [r7, #8]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7a7b      	ldrb	r3, [r7, #9]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001258:	7abb      	ldrb	r3, [r7, #10]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21a      	sxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800128a:	7c3b      	ldrb	r3, [r7, #16]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	7c7b      	ldrb	r3, [r7, #17]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800129c:	7cbb      	ldrb	r3, [r7, #18]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80012ae:	7d3b      	ldrb	r3, [r7, #20]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7d7b      	ldrb	r3, [r7, #21]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b95      	ldr	r3, [pc, #596]	; (8001528 <MPU6050_Read_All+0x308>)
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f884 	bl	80003f4 <__aeabi_i2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b8d      	ldr	r3, [pc, #564]	; (8001528 <MPU6050_Read_All+0x308>)
 80012f2:	f7ff fa13 	bl	800071c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f874 	bl	80003f4 <__aeabi_i2d>
 800130c:	a380      	add	r3, pc, #512	; (adr r3, 8001510 <MPU6050_Read_All+0x2f0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fa03 	bl	800071c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001320:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fc39 	bl	8000b9c <__aeabi_i2f>
 800132a:	4603      	mov	r3, r0
 800132c:	497f      	ldr	r1, [pc, #508]	; (800152c <MPU6050_Read_All+0x30c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd3c 	bl	8000dac <__aeabi_fdiv>
 8001334:	4603      	mov	r3, r0
 8001336:	497e      	ldr	r1, [pc, #504]	; (8001530 <MPU6050_Read_All+0x310>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb7b 	bl	8000a34 <__addsf3>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f851 	bl	80003f4 <__aeabi_i2d>
 8001352:	a371      	add	r3, pc, #452	; (adr r3, 8001518 <MPU6050_Read_All+0x2f8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f9e0 	bl	800071c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f841 	bl	80003f4 <__aeabi_i2d>
 8001372:	a369      	add	r3, pc, #420	; (adr r3, 8001518 <MPU6050_Read_All+0x2f8>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f9d0 	bl	800071c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f831 	bl	80003f4 <__aeabi_i2d>
 8001392:	a361      	add	r3, pc, #388	; (adr r3, 8001518 <MPU6050_Read_All+0x2f8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f9c0 	bl	800071c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80013a6:	f000 fb5d 	bl	8001a64 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <MPU6050_Read_All+0x314>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f80e 	bl	80003d4 <__aeabi_ui2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <MPU6050_Read_All+0x318>)
 80013be:	f7ff f9ad 	bl	800071c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80013ca:	f000 fb4b 	bl	8001a64 <HAL_GetTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a58      	ldr	r2, [pc, #352]	; (8001534 <MPU6050_Read_All+0x314>)
 80013d2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	fb03 f202 	mul.w	r2, r3, r2
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ec:	4619      	mov	r1, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fffa 	bl	80003f4 <__aeabi_i2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f002 fc3d 	bl	8003c86 <sqrt>
 800140c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800141c:	f7ff fabc 	bl	8000998 <__aeabi_dcmpeq>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d119      	bne.n	800145a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ffe1 	bl	80003f4 <__aeabi_i2d>
 8001432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001436:	f7ff f971 	bl	800071c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f002 fa91 	bl	8003968 <atan>
 8001446:	a336      	add	r3, pc, #216	; (adr r3, 8001520 <MPU6050_Read_All+0x300>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f83c 	bl	80004c8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001458:	e005      	b.n	8001466 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	425b      	negs	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffc0 	bl	80003f4 <__aeabi_i2d>
 8001474:	4682      	mov	sl, r0
 8001476:	468b      	mov	fp, r1
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffb8 	bl	80003f4 <__aeabi_i2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4650      	mov	r0, sl
 800148a:	4659      	mov	r1, fp
 800148c:	f002 fbf9 	bl	8003c82 <atan2>
 8001490:	a323      	add	r3, pc, #140	; (adr r3, 8001520 <MPU6050_Read_All+0x300>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f817 	bl	80004c8 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MPU6050_Read_All+0x31c>)
 80014a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ac:	f7ff fa7e 	bl	80009ac <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <MPU6050_Read_All+0x2ac>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MPU6050_Read_All+0x320>)
 80014c2:	f7ff fa91 	bl	80009e8 <__aeabi_dcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d114      	bne.n	80014f6 <MPU6050_Read_All+0x2d6>
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MPU6050_Read_All+0x320>)
 80014d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d6:	f7ff fa87 	bl	80009e8 <__aeabi_dcmpgt>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d033      	beq.n	8001548 <MPU6050_Read_All+0x328>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MPU6050_Read_All+0x31c>)
 80014ec:	f7ff fa5e 	bl	80009ac <__aeabi_dcmplt>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d028      	beq.n	8001548 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80014f6:	4913      	ldr	r1, [pc, #76]	; (8001544 <MPU6050_Read_All+0x324>)
 80014f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001506:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800150a:	e030      	b.n	800156e <MPU6050_Read_All+0x34e>
 800150c:	f3af 8000 	nop.w
 8001510:	00000000 	.word	0x00000000
 8001514:	40cc2900 	.word	0x40cc2900
 8001518:	00000000 	.word	0x00000000
 800151c:	40606000 	.word	0x40606000
 8001520:	1a63c1f8 	.word	0x1a63c1f8
 8001524:	404ca5dc 	.word	0x404ca5dc
 8001528:	40d00000 	.word	0x40d00000
 800152c:	43aa0000 	.word	0x43aa0000
 8001530:	42121eb8 	.word	0x42121eb8
 8001534:	200001d8 	.word	0x200001d8
 8001538:	408f4000 	.word	0x408f4000
 800153c:	c0568000 	.word	0xc0568000
 8001540:	40568000 	.word	0x40568000
 8001544:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800154e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001556:	e9cd 2300 	strd	r2, r3, [sp]
 800155a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800155e:	481c      	ldr	r0, [pc, #112]	; (80015d0 <MPU6050_Read_All+0x3b0>)
 8001560:	f000 f83c 	bl	80015dc <Kalman_getAngle>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001574:	4690      	mov	r8, r2
 8001576:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MPU6050_Read_All+0x3b4>)
 8001580:	4640      	mov	r0, r8
 8001582:	4649      	mov	r1, r9
 8001584:	f7ff fa30 	bl	80009e8 <__aeabi_dcmpgt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001594:	4614      	mov	r4, r2
 8001596:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015ae:	e9cd 2300 	strd	r2, r3, [sp]
 80015b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MPU6050_Read_All+0x3b8>)
 80015b8:	f000 f810 	bl	80015dc <Kalman_getAngle>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80015c6:	bf00      	nop
 80015c8:	3740      	adds	r7, #64	; 0x40
 80015ca:	46bd      	mov	sp, r7
 80015cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d0:	20000048 	.word	0x20000048
 80015d4:	40568000 	.word	0x40568000
 80015d8:	20000000 	.word	0x20000000

080015dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b092      	sub	sp, #72	; 0x48
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80015f2:	f7fe fdb1 	bl	8000158 <__aeabi_dsub>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001608:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800160c:	f7fe ff5c 	bl	80004c8 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fda0 	bl	800015c <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001632:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001636:	f7fe ff47 	bl	80004c8 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001648:	f7fe fd86 	bl	8000158 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800165a:	f7fe fd7d 	bl	8000158 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe fd76 	bl	800015c <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800167c:	f7fe ff24 	bl	80004c8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fd68 	bl	800015c <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016a6:	f7fe ff0f 	bl	80004c8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fd51 	bl	8000158 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016d0:	f7fe fefa 	bl	80004c8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fd3c 	bl	8000158 <__aeabi_dsub>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	68f9      	ldr	r1, [r7, #12]
 80016e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016fa:	f7fe fee5 	bl	80004c8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fd29 	bl	800015c <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001720:	f7fe fd1c 	bl	800015c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001732:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001736:	f7fe fff1 	bl	800071c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800174c:	f7fe ffe6 	bl	800071c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800175e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001762:	f7fe fcf9 	bl	8000158 <__aeabi_dsub>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001778:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800177c:	f7fe fea4 	bl	80004c8 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fce8 	bl	800015c <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800179c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017a4:	f7fe fe90 	bl	80004c8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fcd4 	bl	800015c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017ce:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80017d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e0:	f7fe fe72 	bl	80004c8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fcb4 	bl	8000158 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001804:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001808:	f7fe fe5e 	bl	80004c8 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fca0 	bl	8000158 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001828:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800182c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001830:	f7fe fe4a 	bl	80004c8 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fc8c 	bl	8000158 <__aeabi_dsub>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001854:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001858:	f7fe fe36 	bl	80004c8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fc78 	bl	8000158 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	3748      	adds	r7, #72	; 0x48
 800187e:	46bd      	mov	sp, r7
 8001880:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001884 <Data_Ready>:

uint8_t Data_Ready(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001888:	2102      	movs	r1, #2
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <Data_Ready+0x14>)
 800188c:	f000 fbaa 	bl	8001fe4 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010800 	.word	0x40010800

0800189c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_MspInit+0x5c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6193      	str	r3, [r2, #24]
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_MspInit+0x5c>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_MspInit+0x5c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_MspInit+0x5c>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_MspInit+0x60>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_MspInit+0x60>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001946:	f000 f87b 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}

0800194e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fb5e 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff fff8 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001970:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001984:	4c09      	ldr	r4, [pc, #36]	; (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f001 ffbd 	bl	8003910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001996:	f7ff fb5d 	bl	8001054 <main>
  bx lr
 800199a:	4770      	bx	lr
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80019a4:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 80019a8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80019ac:	200001e0 	.word	0x200001e0

080019b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_2_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x28>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f947 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff ff64 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f95f 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 f927 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000090 	.word	0x20000090
 8001a38:	20000098 	.word	0x20000098
 8001a3c:	20000094 	.word	0x20000094

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_IncTick+0x20>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000098 	.word	0x20000098
 8001a60:	200001dc 	.word	0x200001dc

08001a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200001dc 	.word	0x200001dc

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffe0 	bl	8001a64 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000098 	.word	0x20000098

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <__NVIC_EnableIRQ+0x34>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff90 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff2d 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff42 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff35 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e169      	b.n	8001fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8158 	bne.w	8001fbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a9a      	ldr	r2, [pc, #616]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a98      	ldr	r2, [pc, #608]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a96      	ldr	r2, [pc, #600]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a90      	ldr	r2, [pc, #576]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a79      	ldr	r2, [pc, #484]	; (8001f90 <HAL_GPIO_Init+0x2b4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80b1 	beq.w	8001fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_GPIO_Init+0x2c0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	492f      	ldr	r1, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	492c      	ldr	r1, [pc, #176]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4928      	ldr	r1, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	491e      	ldr	r1, [pc, #120]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4914      	ldr	r1, [pc, #80]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	490e      	ldr	r1, [pc, #56]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x2e2>
 8001f7a:	bf00      	nop
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10310000 	.word	0x10310000
 8001f84:	10220000 	.word	0x10220000
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40011400 	.word	0x40011400
 8001fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f ae8e 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	372c      	adds	r7, #44	; 0x2c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
	...

08002014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f806 	bl	8002044 <HAL_GPIO_EXTI_Callback>
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e12b      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe ffaa 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020bc:	f001 fbf0 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80020c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a81      	ldr	r2, [pc, #516]	; (80022cc <HAL_I2C_Init+0x274>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d807      	bhi.n	80020dc <HAL_I2C_Init+0x84>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a80      	ldr	r2, [pc, #512]	; (80022d0 <HAL_I2C_Init+0x278>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e006      	b.n	80020ea <HAL_I2C_Init+0x92>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a7d      	ldr	r2, [pc, #500]	; (80022d4 <HAL_I2C_Init+0x27c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0e7      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a78      	ldr	r2, [pc, #480]	; (80022d8 <HAL_I2C_Init+0x280>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_I2C_Init+0x274>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d802      	bhi.n	800212c <HAL_I2C_Init+0xd4>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	e009      	b.n	8002140 <HAL_I2C_Init+0xe8>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a69      	ldr	r2, [pc, #420]	; (80022dc <HAL_I2C_Init+0x284>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	430b      	orrs	r3, r1
 8002146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	495c      	ldr	r1, [pc, #368]	; (80022cc <HAL_I2C_Init+0x274>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d819      	bhi.n	8002194 <HAL_I2C_Init+0x13c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e59      	subs	r1, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb1 f3f3 	udiv	r3, r1, r3
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002174:	400b      	ands	r3, r1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_I2C_Init+0x138>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb1 f3f3 	udiv	r3, r1, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	e051      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002190:	2304      	movs	r3, #4
 8002192:	e04f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <HAL_I2C_Init+0x168>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e012      	b.n	80021e6 <HAL_I2C_Init+0x18e>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	0099      	lsls	r1, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Init+0x196>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e022      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <HAL_I2C_Init+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e58      	subs	r0, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	440b      	add	r3, r1
 8002204:	fbb0 f3f3 	udiv	r3, r0, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002212:	e00f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6911      	ldr	r1, [r2, #16]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	000186a0 	.word	0x000186a0
 80022d0:	001e847f 	.word	0x001e847f
 80022d4:	003d08ff 	.word	0x003d08ff
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fa:	f7ff fbb3 	bl	8001a64 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	f040 80d9 	bne.w	80024c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2319      	movs	r3, #25
 8002314:	2201      	movs	r2, #1
 8002316:	496d      	ldr	r1, [pc, #436]	; (80024cc <HAL_I2C_Mem_Write+0x1ec>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fcc1 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	e0cc      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Write+0x56>
 8002332:	2302      	movs	r3, #2
 8002334:	e0c5      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d007      	beq.n	800235c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	; 0x21
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <HAL_I2C_Mem_Write+0x1f0>)
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800239e:	88f8      	ldrh	r0, [r7, #6]
 80023a0:	893a      	ldrh	r2, [r7, #8]
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 faf8 	bl	80029a4 <I2C_RequestMemoryWrite>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d052      	beq.n	8002460 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e081      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fd86 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d107      	bne.n	80023e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d11b      	bne.n	8002460 <HAL_I2C_Mem_Write+0x180>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d017      	beq.n	8002460 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1aa      	bne.n	80023be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fd79 	bl	8002f64 <I2C_WaitOnBTFFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e016      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	00100002 	.word	0x00100002
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f2:	f7ff fab7 	bl	8001a64 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 8244 	bne.w	800298e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2319      	movs	r3, #25
 800250c:	2201      	movs	r2, #1
 800250e:	4982      	ldr	r1, [pc, #520]	; (8002718 <HAL_I2C_Mem_Read+0x244>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fbc5 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	e237      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_I2C_Mem_Read+0x5a>
 800252a:	2302      	movs	r3, #2
 800252c:	e230      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d007      	beq.n	8002554 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2222      	movs	r2, #34	; 0x22
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a62      	ldr	r2, [pc, #392]	; (800271c <HAL_I2C_Mem_Read+0x248>)
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002596:	88f8      	ldrh	r0, [r7, #6]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4603      	mov	r3, r0
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa92 	bl	8002ad0 <I2C_RequestMemoryRead>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1ec      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e1c0      	b.n	8002968 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d11e      	bne.n	800262c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025fe:	b672      	cpsid	i
}
 8002600:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002628:	b662      	cpsie	i
}
 800262a:	e035      	b.n	8002698 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	2b02      	cmp	r3, #2
 8002632:	d11e      	bne.n	8002672 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800266e:	b662      	cpsie	i
}
 8002670:	e012      	b.n	8002698 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002680:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002698:	e166      	b.n	8002968 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	2b03      	cmp	r3, #3
 80026a0:	f200 811f 	bhi.w	80028e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d123      	bne.n	80026f4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fc9f 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e167      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f2:	e139      	b.n	8002968 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d152      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	2200      	movs	r2, #0
 8002704:	4906      	ldr	r1, [pc, #24]	; (8002720 <HAL_I2C_Mem_Read+0x24c>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 faca 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e13c      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
 8002716:	bf00      	nop
 8002718:	00100002 	.word	0x00100002
 800271c:	ffff0000 	.word	0xffff0000
 8002720:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002724:	b672      	cpsid	i
}
 8002726:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800276a:	b662      	cpsie	i
}
 800276c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a0:	e0e2      	b.n	8002968 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2200      	movs	r2, #0
 80027aa:	497b      	ldr	r1, [pc, #492]	; (8002998 <HAL_I2C_Mem_Read+0x4c4>)
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fa77 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0e9      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_I2C_Mem_Read+0x4c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	08db      	lsrs	r3, r3, #3
 8002808:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_I2C_Mem_Read+0x4cc>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0a1a      	lsrs	r2, r3, #8
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00da      	lsls	r2, r3, #3
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	3b01      	subs	r3, #1
 8002820:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d118      	bne.n	800285a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800284a:	b662      	cpsie	i
}
 800284c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e09a      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d1d9      	bne.n	800281c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
}
 80028ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e0:	e042      	b.n	8002968 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fb84 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e04c      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d118      	bne.n	8002968 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f ae94 	bne.w	800269a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00010004 	.word	0x00010004
 800299c:	20000090 	.word	0x20000090
 80029a0:	14f8b589 	.word	0x14f8b589

080029a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f960 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f4:	d103      	bne.n	80029fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e05f      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <I2C_RequestMemoryWrite+0x128>)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f9bb 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04c      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa46 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d107      	bne.n	8002a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02b      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	e021      	b.n	8002ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa20 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e005      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	893b      	ldrh	r3, [r7, #8]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8c2 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d103      	bne.n	8002b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0aa      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	4952      	ldr	r1, [pc, #328]	; (8002c9c <I2C_RequestMemoryRead+0x1cc>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f91d 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e097      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f9a8 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e076      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e021      	b.n	8002bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc8:	6a39      	ldr	r1, [r7, #32]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f982 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d107      	bne.n	8002bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e050      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f967 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d107      	bne.n	8002c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e035      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f82b 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d103      	bne.n	8002c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e013      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	4906      	ldr	r1, [pc, #24]	; (8002c9c <I2C_RequestMemoryRead+0x1cc>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f886 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	00010002 	.word	0x00010002

08002ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb0:	e048      	b.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d044      	beq.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fed3 	bl	8001a64 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d139      	bne.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10d      	bne.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	e00c      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d116      	bne.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e023      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10d      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	e00c      	b.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d093      	beq.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da2:	e071      	b.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d123      	bne.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e067      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d041      	beq.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe fe2e 	bl	8001a64 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d136      	bne.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10c      	bne.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	e00b      	b.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e021      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10c      	bne.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e00b      	b.n	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af6d 	bne.w	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8e3 	bl	80030ae <I2C_IsAcknowledgeFailed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e034      	b.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d028      	beq.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fe fdb3 	bl	8001a64 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11d      	bne.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d016      	beq.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e007      	b.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b80      	cmp	r3, #128	; 0x80
 8002f58:	d1c3      	bne.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f89b 	bl	80030ae <I2C_IsAcknowledgeFailed>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e034      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d028      	beq.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7fe fd6b 	bl	8001a64 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11d      	bne.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d016      	beq.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d1c3      	bne.n	8002f72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	e049      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b10      	cmp	r3, #16
 800300e:	d119      	bne.n	8003044 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e030      	b.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe fd0e 	bl	8001a64 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d016      	beq.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d1ae      	bne.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	d11b      	bne.n	80030fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
	...

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e272      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4b92      	ldr	r3, [pc, #584]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d112      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
 8003144:	4b8c      	ldr	r3, [pc, #560]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003152:	4b89      	ldr	r3, [pc, #548]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06c      	beq.n	8003238 <HAL_RCC_OscConfig+0x12c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d168      	bne.n	8003238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e24c      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x76>
 8003174:	4b80      	ldr	r3, [pc, #512]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b7b      	ldr	r3, [pc, #492]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7a      	ldr	r2, [pc, #488]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b78      	ldr	r3, [pc, #480]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a77      	ldr	r2, [pc, #476]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0xbc>
 80031ae:	4b72      	ldr	r3, [pc, #456]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031c8:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a67      	ldr	r2, [pc, #412]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc3c 	bl	8001a64 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fc38 	bl	8001a64 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e200      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe4>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fc28 	bl	8001a64 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fc24 	bl	8001a64 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1ec      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x10c>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
 800325e:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c0      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4939      	ldr	r1, [pc, #228]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fbdd 	bl	8001a64 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fbd9 	bl	8001a64 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4927      	ldr	r1, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fbbc 	bl	8001a64 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe fbb8 	bl	8001a64 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e180      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03a      	beq.n	8003390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fb9c 	bl	8001a64 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fb98 	bl	8001a64 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e160      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334e:	2001      	movs	r0, #1
 8003350:	f000 faba 	bl	80038c8 <RCC_Delay>
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe fb82 	bl	8001a64 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe fb7e 	bl	8001a64 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e146      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	42420000 	.word	0x42420000
 8003380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e9      	bne.n	8003364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a6 	beq.w	80034ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fb3f 	bl	8001a64 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fb3b 	bl	8001a64 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e103      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x334>
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a66      	ldr	r2, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x356>
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a5a      	ldr	r2, [pc, #360]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe faef 	bl	8001a64 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe faeb 	bl	8001a64 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0b1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x37e>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fad9 	bl	8001a64 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fad5 	bl	8001a64 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e09b      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d061      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d146      	bne.n	8003596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe faa9 	bl	8001a64 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe faa5 	bl	8001a64 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e06d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d108      	bne.n	8003550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4921      	ldr	r1, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a19      	ldr	r1, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	491b      	ldr	r1, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fa79 	bl	8001a64 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fa75 	bl	8001a64 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e03d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x46a>
 8003594:	e035      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fa62 	bl	8001a64 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fa5e 	bl	8001a64 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e026      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x498>
 80035c2:	e01e      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e019      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_OscConfig+0x500>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe f9b0 	bl	8001a64 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe f9ac 	bl	8001a64 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe f90e 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08003ff0 	.word	0x08003ff0
 80037dc:	20000090 	.word	0x20000090
 80037e0:	20000094 	.word	0x20000094

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_GetSysClockFreq+0x94>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d002      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x30>
 800380e:	2b08      	cmp	r3, #8
 8003810:	d003      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0x36>
 8003812:	e027      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003816:	613b      	str	r3, [r7, #16]
      break;
 8003818:	e027      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	0c9b      	lsrs	r3, r3, #18
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a17      	ldr	r2, [pc, #92]	; (8003880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_GetSysClockFreq+0x94>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0c5b      	lsrs	r3, r3, #17
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	4a11      	ldr	r2, [pc, #68]	; (8003884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a0d      	ldr	r2, [pc, #52]	; (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e004      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	613b      	str	r3, [r7, #16]
      break;
 8003862:	e002      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003866:	613b      	str	r3, [r7, #16]
      break;
 8003868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386a:	693b      	ldr	r3, [r7, #16]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	007a1200 	.word	0x007a1200
 8003880:	08004008 	.word	0x08004008
 8003884:	08004018 	.word	0x08004018
 8003888:	003d0900 	.word	0x003d0900

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_RCC_GetHCLKFreq+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000090 	.word	0x20000090

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08004000 	.word	0x08004000

080038c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <RCC_Delay+0x34>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <RCC_Delay+0x38>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0a5b      	lsrs	r3, r3, #9
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038e4:	bf00      	nop
  }
  while (Delay --);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	60fa      	str	r2, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <RCC_Delay+0x1c>
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000090 	.word	0x20000090
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <__errno>:
 8003904:	4b01      	ldr	r3, [pc, #4]	; (800390c <__errno+0x8>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	2000009c 	.word	0x2000009c

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	2600      	movs	r6, #0
 8003914:	4d0c      	ldr	r5, [pc, #48]	; (8003948 <__libc_init_array+0x38>)
 8003916:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	f000 fb58 	bl	8003fd4 <_init>
 8003924:	2600      	movs	r6, #0
 8003926:	4d0a      	ldr	r5, [pc, #40]	; (8003950 <__libc_init_array+0x40>)
 8003928:	4c0a      	ldr	r4, [pc, #40]	; (8003954 <__libc_init_array+0x44>)
 800392a:	1b64      	subs	r4, r4, r5
 800392c:	10a4      	asrs	r4, r4, #2
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	08004090 	.word	0x08004090
 800394c:	08004090 	.word	0x08004090
 8003950:	08004090 	.word	0x08004090
 8003954:	08004094 	.word	0x08004094

08003958 <memset>:
 8003958:	4603      	mov	r3, r0
 800395a:	4402      	add	r2, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	f803 1b01 	strb.w	r1, [r3], #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <atan>:
 8003968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	4bb6      	ldr	r3, [pc, #728]	; (8003c48 <atan+0x2e0>)
 800396e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003972:	429e      	cmp	r6, r3
 8003974:	4604      	mov	r4, r0
 8003976:	460d      	mov	r5, r1
 8003978:	468b      	mov	fp, r1
 800397a:	dd17      	ble.n	80039ac <atan+0x44>
 800397c:	4bb3      	ldr	r3, [pc, #716]	; (8003c4c <atan+0x2e4>)
 800397e:	429e      	cmp	r6, r3
 8003980:	dc01      	bgt.n	8003986 <atan+0x1e>
 8003982:	d109      	bne.n	8003998 <atan+0x30>
 8003984:	b140      	cbz	r0, 8003998 <atan+0x30>
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fc fbe5 	bl	800015c <__adddf3>
 8003992:	4604      	mov	r4, r0
 8003994:	460d      	mov	r5, r1
 8003996:	e005      	b.n	80039a4 <atan+0x3c>
 8003998:	f1bb 0f00 	cmp.w	fp, #0
 800399c:	4cac      	ldr	r4, [pc, #688]	; (8003c50 <atan+0x2e8>)
 800399e:	f300 8121 	bgt.w	8003be4 <atan+0x27c>
 80039a2:	4dac      	ldr	r5, [pc, #688]	; (8003c54 <atan+0x2ec>)
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ac:	4baa      	ldr	r3, [pc, #680]	; (8003c58 <atan+0x2f0>)
 80039ae:	429e      	cmp	r6, r3
 80039b0:	dc11      	bgt.n	80039d6 <atan+0x6e>
 80039b2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80039b6:	429e      	cmp	r6, r3
 80039b8:	dc0a      	bgt.n	80039d0 <atan+0x68>
 80039ba:	a38b      	add	r3, pc, #556	; (adr r3, 8003be8 <atan+0x280>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fbcc 	bl	800015c <__adddf3>
 80039c4:	2200      	movs	r2, #0
 80039c6:	4ba5      	ldr	r3, [pc, #660]	; (8003c5c <atan+0x2f4>)
 80039c8:	f7fd f80e 	bl	80009e8 <__aeabi_dcmpgt>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d1e9      	bne.n	80039a4 <atan+0x3c>
 80039d0:	f04f 3aff 	mov.w	sl, #4294967295
 80039d4:	e027      	b.n	8003a26 <atan+0xbe>
 80039d6:	f000 f951 	bl	8003c7c <fabs>
 80039da:	4ba1      	ldr	r3, [pc, #644]	; (8003c60 <atan+0x2f8>)
 80039dc:	4604      	mov	r4, r0
 80039de:	429e      	cmp	r6, r3
 80039e0:	460d      	mov	r5, r1
 80039e2:	f300 80b8 	bgt.w	8003b56 <atan+0x1ee>
 80039e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80039ea:	429e      	cmp	r6, r3
 80039ec:	f300 809c 	bgt.w	8003b28 <atan+0x1c0>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	f7fc fbb2 	bl	800015c <__adddf3>
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b98      	ldr	r3, [pc, #608]	; (8003c5c <atan+0x2f4>)
 80039fc:	f7fc fbac 	bl	8000158 <__aeabi_dsub>
 8003a00:	2200      	movs	r2, #0
 8003a02:	4606      	mov	r6, r0
 8003a04:	460f      	mov	r7, r1
 8003a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	f7fc fba5 	bl	800015c <__adddf3>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4630      	mov	r0, r6
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7fc fe7f 	bl	800071c <__aeabi_ddiv>
 8003a1e:	f04f 0a00 	mov.w	sl, #0
 8003a22:	4604      	mov	r4, r0
 8003a24:	460d      	mov	r5, r1
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f7fc fd4b 	bl	80004c8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4680      	mov	r8, r0
 8003a38:	4689      	mov	r9, r1
 8003a3a:	f7fc fd45 	bl	80004c8 <__aeabi_dmul>
 8003a3e:	a36c      	add	r3, pc, #432	; (adr r3, 8003bf0 <atan+0x288>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	4606      	mov	r6, r0
 8003a46:	460f      	mov	r7, r1
 8003a48:	f7fc fd3e 	bl	80004c8 <__aeabi_dmul>
 8003a4c:	a36a      	add	r3, pc, #424	; (adr r3, 8003bf8 <atan+0x290>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fb83 	bl	800015c <__adddf3>
 8003a56:	4632      	mov	r2, r6
 8003a58:	463b      	mov	r3, r7
 8003a5a:	f7fc fd35 	bl	80004c8 <__aeabi_dmul>
 8003a5e:	a368      	add	r3, pc, #416	; (adr r3, 8003c00 <atan+0x298>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc fb7a 	bl	800015c <__adddf3>
 8003a68:	4632      	mov	r2, r6
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	f7fc fd2c 	bl	80004c8 <__aeabi_dmul>
 8003a70:	a365      	add	r3, pc, #404	; (adr r3, 8003c08 <atan+0x2a0>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f7fc fb71 	bl	800015c <__adddf3>
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f7fc fd23 	bl	80004c8 <__aeabi_dmul>
 8003a82:	a363      	add	r3, pc, #396	; (adr r3, 8003c10 <atan+0x2a8>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fb68 	bl	800015c <__adddf3>
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	463b      	mov	r3, r7
 8003a90:	f7fc fd1a 	bl	80004c8 <__aeabi_dmul>
 8003a94:	a360      	add	r3, pc, #384	; (adr r3, 8003c18 <atan+0x2b0>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fb5f 	bl	800015c <__adddf3>
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	f7fc fd11 	bl	80004c8 <__aeabi_dmul>
 8003aa6:	a35e      	add	r3, pc, #376	; (adr r3, 8003c20 <atan+0x2b8>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	4680      	mov	r8, r0
 8003aae:	4689      	mov	r9, r1
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fc fd08 	bl	80004c8 <__aeabi_dmul>
 8003ab8:	a35b      	add	r3, pc, #364	; (adr r3, 8003c28 <atan+0x2c0>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fb4b 	bl	8000158 <__aeabi_dsub>
 8003ac2:	4632      	mov	r2, r6
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	f7fc fcff 	bl	80004c8 <__aeabi_dmul>
 8003aca:	a359      	add	r3, pc, #356	; (adr r3, 8003c30 <atan+0x2c8>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fb42 	bl	8000158 <__aeabi_dsub>
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	f7fc fcf6 	bl	80004c8 <__aeabi_dmul>
 8003adc:	a356      	add	r3, pc, #344	; (adr r3, 8003c38 <atan+0x2d0>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fb39 	bl	8000158 <__aeabi_dsub>
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	463b      	mov	r3, r7
 8003aea:	f7fc fced 	bl	80004c8 <__aeabi_dmul>
 8003aee:	a354      	add	r3, pc, #336	; (adr r3, 8003c40 <atan+0x2d8>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f7fc fb30 	bl	8000158 <__aeabi_dsub>
 8003af8:	4632      	mov	r2, r6
 8003afa:	463b      	mov	r3, r7
 8003afc:	f7fc fce4 	bl	80004c8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc fb28 	bl	800015c <__adddf3>
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	462b      	mov	r3, r5
 8003b10:	f7fc fcda 	bl	80004c8 <__aeabi_dmul>
 8003b14:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	d144      	bne.n	8003ba8 <atan+0x240>
 8003b1e:	4620      	mov	r0, r4
 8003b20:	4629      	mov	r1, r5
 8003b22:	f7fc fb19 	bl	8000158 <__aeabi_dsub>
 8003b26:	e734      	b.n	8003992 <atan+0x2a>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <atan+0x2f4>)
 8003b2c:	f7fc fb14 	bl	8000158 <__aeabi_dsub>
 8003b30:	2200      	movs	r2, #0
 8003b32:	4606      	mov	r6, r0
 8003b34:	460f      	mov	r7, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <atan+0x2f4>)
 8003b3c:	f7fc fb0e 	bl	800015c <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc fde8 	bl	800071c <__aeabi_ddiv>
 8003b4c:	f04f 0a01 	mov.w	sl, #1
 8003b50:	4604      	mov	r4, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	e767      	b.n	8003a26 <atan+0xbe>
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <atan+0x2fc>)
 8003b58:	429e      	cmp	r6, r3
 8003b5a:	da1a      	bge.n	8003b92 <atan+0x22a>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <atan+0x300>)
 8003b60:	f7fc fafa 	bl	8000158 <__aeabi_dsub>
 8003b64:	2200      	movs	r2, #0
 8003b66:	4606      	mov	r6, r0
 8003b68:	460f      	mov	r7, r1
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <atan+0x300>)
 8003b70:	f7fc fcaa 	bl	80004c8 <__aeabi_dmul>
 8003b74:	2200      	movs	r2, #0
 8003b76:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <atan+0x2f4>)
 8003b78:	f7fc faf0 	bl	800015c <__adddf3>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4630      	mov	r0, r6
 8003b82:	4639      	mov	r1, r7
 8003b84:	f7fc fdca 	bl	800071c <__aeabi_ddiv>
 8003b88:	f04f 0a02 	mov.w	sl, #2
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	460d      	mov	r5, r1
 8003b90:	e749      	b.n	8003a26 <atan+0xbe>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	2000      	movs	r0, #0
 8003b98:	4934      	ldr	r1, [pc, #208]	; (8003c6c <atan+0x304>)
 8003b9a:	f7fc fdbf 	bl	800071c <__aeabi_ddiv>
 8003b9e:	f04f 0a03 	mov.w	sl, #3
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
 8003ba6:	e73e      	b.n	8003a26 <atan+0xbe>
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <atan+0x308>)
 8003baa:	4e32      	ldr	r6, [pc, #200]	; (8003c74 <atan+0x30c>)
 8003bac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003bb0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8003bb4:	e9da 2300 	ldrd	r2, r3, [sl]
 8003bb8:	f7fc face 	bl	8000158 <__aeabi_dsub>
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f7fc faca 	bl	8000158 <__aeabi_dsub>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003bcc:	f7fc fac4 	bl	8000158 <__aeabi_dsub>
 8003bd0:	f1bb 0f00 	cmp.w	fp, #0
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	460d      	mov	r5, r1
 8003bd8:	f6bf aee4 	bge.w	80039a4 <atan+0x3c>
 8003bdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003be0:	461d      	mov	r5, r3
 8003be2:	e6df      	b.n	80039a4 <atan+0x3c>
 8003be4:	4d24      	ldr	r5, [pc, #144]	; (8003c78 <atan+0x310>)
 8003be6:	e6dd      	b.n	80039a4 <atan+0x3c>
 8003be8:	8800759c 	.word	0x8800759c
 8003bec:	7e37e43c 	.word	0x7e37e43c
 8003bf0:	e322da11 	.word	0xe322da11
 8003bf4:	3f90ad3a 	.word	0x3f90ad3a
 8003bf8:	24760deb 	.word	0x24760deb
 8003bfc:	3fa97b4b 	.word	0x3fa97b4b
 8003c00:	a0d03d51 	.word	0xa0d03d51
 8003c04:	3fb10d66 	.word	0x3fb10d66
 8003c08:	c54c206e 	.word	0xc54c206e
 8003c0c:	3fb745cd 	.word	0x3fb745cd
 8003c10:	920083ff 	.word	0x920083ff
 8003c14:	3fc24924 	.word	0x3fc24924
 8003c18:	5555550d 	.word	0x5555550d
 8003c1c:	3fd55555 	.word	0x3fd55555
 8003c20:	2c6a6c2f 	.word	0x2c6a6c2f
 8003c24:	bfa2b444 	.word	0xbfa2b444
 8003c28:	52defd9a 	.word	0x52defd9a
 8003c2c:	3fadde2d 	.word	0x3fadde2d
 8003c30:	af749a6d 	.word	0xaf749a6d
 8003c34:	3fb3b0f2 	.word	0x3fb3b0f2
 8003c38:	fe231671 	.word	0xfe231671
 8003c3c:	3fbc71c6 	.word	0x3fbc71c6
 8003c40:	9998ebc4 	.word	0x9998ebc4
 8003c44:	3fc99999 	.word	0x3fc99999
 8003c48:	440fffff 	.word	0x440fffff
 8003c4c:	7ff00000 	.word	0x7ff00000
 8003c50:	54442d18 	.word	0x54442d18
 8003c54:	bff921fb 	.word	0xbff921fb
 8003c58:	3fdbffff 	.word	0x3fdbffff
 8003c5c:	3ff00000 	.word	0x3ff00000
 8003c60:	3ff2ffff 	.word	0x3ff2ffff
 8003c64:	40038000 	.word	0x40038000
 8003c68:	3ff80000 	.word	0x3ff80000
 8003c6c:	bff00000 	.word	0xbff00000
 8003c70:	08004040 	.word	0x08004040
 8003c74:	08004020 	.word	0x08004020
 8003c78:	3ff921fb 	.word	0x3ff921fb

08003c7c <fabs>:
 8003c7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c80:	4770      	bx	lr

08003c82 <atan2>:
 8003c82:	f000 b825 	b.w	8003cd0 <__ieee754_atan2>

08003c86 <sqrt>:
 8003c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	f000 f8f2 	bl	8003e74 <__ieee754_sqrt>
 8003c90:	4632      	mov	r2, r6
 8003c92:	4604      	mov	r4, r0
 8003c94:	460d      	mov	r5, r1
 8003c96:	463b      	mov	r3, r7
 8003c98:	4630      	mov	r0, r6
 8003c9a:	4639      	mov	r1, r7
 8003c9c:	f7fc feae 	bl	80009fc <__aeabi_dcmpun>
 8003ca0:	b990      	cbnz	r0, 8003cc8 <sqrt+0x42>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7fc fe7f 	bl	80009ac <__aeabi_dcmplt>
 8003cae:	b158      	cbz	r0, 8003cc8 <sqrt+0x42>
 8003cb0:	f7ff fe28 	bl	8003904 <__errno>
 8003cb4:	2321      	movs	r3, #33	; 0x21
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	6003      	str	r3, [r0, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7fc fd2c 	bl	800071c <__aeabi_ddiv>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	460d      	mov	r5, r1
 8003cc8:	4620      	mov	r0, r4
 8003cca:	4629      	mov	r1, r5
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cd0 <__ieee754_atan2>:
 8003cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd4:	4692      	mov	sl, r2
 8003cd6:	4699      	mov	r9, r3
 8003cd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cdc:	461f      	mov	r7, r3
 8003cde:	f1ca 0300 	rsb	r3, sl, #0
 8003ce2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8003e68 <__ieee754_atan2+0x198>
 8003ce6:	ea43 030a 	orr.w	r3, r3, sl
 8003cea:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003cee:	4573      	cmp	r3, lr
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	d808      	bhi.n	8003d08 <__ieee754_atan2+0x38>
 8003cf6:	4246      	negs	r6, r0
 8003cf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003cfc:	4306      	orrs	r6, r0
 8003cfe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003d02:	4576      	cmp	r6, lr
 8003d04:	468c      	mov	ip, r1
 8003d06:	d908      	bls.n	8003d1a <__ieee754_atan2+0x4a>
 8003d08:	4652      	mov	r2, sl
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc fa24 	bl	800015c <__adddf3>
 8003d14:	4604      	mov	r4, r0
 8003d16:	460d      	mov	r5, r1
 8003d18:	e019      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003d1a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8003d1e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003d22:	ea56 060a 	orrs.w	r6, r6, sl
 8003d26:	d103      	bne.n	8003d30 <__ieee754_atan2+0x60>
 8003d28:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	f7ff be1c 	b.w	8003968 <atan>
 8003d30:	17be      	asrs	r6, r7, #30
 8003d32:	f006 0602 	and.w	r6, r6, #2
 8003d36:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003d3a:	ea53 0100 	orrs.w	r1, r3, r0
 8003d3e:	d10a      	bne.n	8003d56 <__ieee754_atan2+0x86>
 8003d40:	2e02      	cmp	r6, #2
 8003d42:	d067      	beq.n	8003e14 <__ieee754_atan2+0x144>
 8003d44:	2e03      	cmp	r6, #3
 8003d46:	d102      	bne.n	8003d4e <__ieee754_atan2+0x7e>
 8003d48:	a53b      	add	r5, pc, #236	; (adr r5, 8003e38 <__ieee754_atan2+0x168>)
 8003d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	ea52 010a 	orrs.w	r1, r2, sl
 8003d5a:	d106      	bne.n	8003d6a <__ieee754_atan2+0x9a>
 8003d5c:	f1bc 0f00 	cmp.w	ip, #0
 8003d60:	da63      	bge.n	8003e2a <__ieee754_atan2+0x15a>
 8003d62:	a537      	add	r5, pc, #220	; (adr r5, 8003e40 <__ieee754_atan2+0x170>)
 8003d64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d68:	e7f1      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003d6a:	4572      	cmp	r2, lr
 8003d6c:	d10f      	bne.n	8003d8e <__ieee754_atan2+0xbe>
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f106 36ff 	add.w	r6, r6, #4294967295
 8003d74:	d107      	bne.n	8003d86 <__ieee754_atan2+0xb6>
 8003d76:	2e02      	cmp	r6, #2
 8003d78:	d850      	bhi.n	8003e1c <__ieee754_atan2+0x14c>
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <__ieee754_atan2+0x19c>)
 8003d7c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003d80:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003d84:	e7e3      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003d86:	2e02      	cmp	r6, #2
 8003d88:	d84c      	bhi.n	8003e24 <__ieee754_atan2+0x154>
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <__ieee754_atan2+0x1a0>)
 8003d8c:	e7f6      	b.n	8003d7c <__ieee754_atan2+0xac>
 8003d8e:	4573      	cmp	r3, lr
 8003d90:	d0e4      	beq.n	8003d5c <__ieee754_atan2+0x8c>
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003d98:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003d9c:	da20      	bge.n	8003de0 <__ieee754_atan2+0x110>
 8003d9e:	2f00      	cmp	r7, #0
 8003da0:	da01      	bge.n	8003da6 <__ieee754_atan2+0xd6>
 8003da2:	323c      	adds	r2, #60	; 0x3c
 8003da4:	db20      	blt.n	8003de8 <__ieee754_atan2+0x118>
 8003da6:	4652      	mov	r2, sl
 8003da8:	464b      	mov	r3, r9
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f7fc fcb5 	bl	800071c <__aeabi_ddiv>
 8003db2:	f7ff ff63 	bl	8003c7c <fabs>
 8003db6:	f7ff fdd7 	bl	8003968 <atan>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	2e01      	cmp	r6, #1
 8003dc0:	d015      	beq.n	8003dee <__ieee754_atan2+0x11e>
 8003dc2:	2e02      	cmp	r6, #2
 8003dc4:	d017      	beq.n	8003df6 <__ieee754_atan2+0x126>
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	d0c1      	beq.n	8003d4e <__ieee754_atan2+0x7e>
 8003dca:	a31f      	add	r3, pc, #124	; (adr r3, 8003e48 <__ieee754_atan2+0x178>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc f9c0 	bl	8000158 <__aeabi_dsub>
 8003dd8:	a31d      	add	r3, pc, #116	; (adr r3, 8003e50 <__ieee754_atan2+0x180>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	e016      	b.n	8003e0e <__ieee754_atan2+0x13e>
 8003de0:	a51d      	add	r5, pc, #116	; (adr r5, 8003e58 <__ieee754_atan2+0x188>)
 8003de2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003de6:	e7ea      	b.n	8003dbe <__ieee754_atan2+0xee>
 8003de8:	2400      	movs	r4, #0
 8003dea:	2500      	movs	r5, #0
 8003dec:	e7e7      	b.n	8003dbe <__ieee754_atan2+0xee>
 8003dee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003df2:	461d      	mov	r5, r3
 8003df4:	e7ab      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003df6:	a314      	add	r3, pc, #80	; (adr r3, 8003e48 <__ieee754_atan2+0x178>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc f9aa 	bl	8000158 <__aeabi_dsub>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	a111      	add	r1, pc, #68	; (adr r1, 8003e50 <__ieee754_atan2+0x180>)
 8003e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e0e:	f7fc f9a3 	bl	8000158 <__aeabi_dsub>
 8003e12:	e77f      	b.n	8003d14 <__ieee754_atan2+0x44>
 8003e14:	a50e      	add	r5, pc, #56	; (adr r5, 8003e50 <__ieee754_atan2+0x180>)
 8003e16:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e1a:	e798      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003e1c:	a510      	add	r5, pc, #64	; (adr r5, 8003e60 <__ieee754_atan2+0x190>)
 8003e1e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e22:	e794      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003e24:	2400      	movs	r4, #0
 8003e26:	2500      	movs	r5, #0
 8003e28:	e791      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003e2a:	a50b      	add	r5, pc, #44	; (adr r5, 8003e58 <__ieee754_atan2+0x188>)
 8003e2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e30:	e78d      	b.n	8003d4e <__ieee754_atan2+0x7e>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
 8003e38:	54442d18 	.word	0x54442d18
 8003e3c:	c00921fb 	.word	0xc00921fb
 8003e40:	54442d18 	.word	0x54442d18
 8003e44:	bff921fb 	.word	0xbff921fb
 8003e48:	33145c07 	.word	0x33145c07
 8003e4c:	3ca1a626 	.word	0x3ca1a626
 8003e50:	54442d18 	.word	0x54442d18
 8003e54:	400921fb 	.word	0x400921fb
 8003e58:	54442d18 	.word	0x54442d18
 8003e5c:	3ff921fb 	.word	0x3ff921fb
 8003e60:	54442d18 	.word	0x54442d18
 8003e64:	3fe921fb 	.word	0x3fe921fb
 8003e68:	7ff00000 	.word	0x7ff00000
 8003e6c:	08004060 	.word	0x08004060
 8003e70:	08004078 	.word	0x08004078

08003e74 <__ieee754_sqrt>:
 8003e74:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003fd0 <__ieee754_sqrt+0x15c>
 8003e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003e80:	4606      	mov	r6, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	460c      	mov	r4, r1
 8003e86:	460a      	mov	r2, r1
 8003e88:	4607      	mov	r7, r0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	d10f      	bne.n	8003eae <__ieee754_sqrt+0x3a>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	f7fc fb19 	bl	80004c8 <__aeabi_dmul>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7fc f95d 	bl	800015c <__adddf3>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460d      	mov	r5, r1
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	dc0e      	bgt.n	8003ed0 <__ieee754_sqrt+0x5c>
 8003eb2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003eb6:	ea5c 0707 	orrs.w	r7, ip, r7
 8003eba:	d0f4      	beq.n	8003ea6 <__ieee754_sqrt+0x32>
 8003ebc:	b141      	cbz	r1, 8003ed0 <__ieee754_sqrt+0x5c>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	f7fc f949 	bl	8000158 <__aeabi_dsub>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	f7fc fc27 	bl	800071c <__aeabi_ddiv>
 8003ece:	e7e8      	b.n	8003ea2 <__ieee754_sqrt+0x2e>
 8003ed0:	1521      	asrs	r1, r4, #20
 8003ed2:	d075      	beq.n	8003fc0 <__ieee754_sqrt+0x14c>
 8003ed4:	07cc      	lsls	r4, r1, #31
 8003ed6:	f04f 0400 	mov.w	r4, #0
 8003eda:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003ede:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8003ee2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ee6:	bf5e      	ittt	pl
 8003ee8:	0fd9      	lsrpl	r1, r3, #31
 8003eea:	005b      	lslpl	r3, r3, #1
 8003eec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003ef0:	0fd9      	lsrs	r1, r3, #31
 8003ef2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003ef6:	2516      	movs	r5, #22
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003efe:	107f      	asrs	r7, r7, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	1846      	adds	r6, r0, r1
 8003f04:	4296      	cmp	r6, r2
 8003f06:	bfde      	ittt	le
 8003f08:	1b92      	suble	r2, r2, r6
 8003f0a:	1870      	addle	r0, r6, r1
 8003f0c:	1864      	addle	r4, r4, r1
 8003f0e:	0052      	lsls	r2, r2, #1
 8003f10:	3d01      	subs	r5, #1
 8003f12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003f16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003f1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f1e:	d1f0      	bne.n	8003f02 <__ieee754_sqrt+0x8e>
 8003f20:	4629      	mov	r1, r5
 8003f22:	f04f 0e20 	mov.w	lr, #32
 8003f26:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f2a:	4282      	cmp	r2, r0
 8003f2c:	eb06 0c05 	add.w	ip, r6, r5
 8003f30:	dc02      	bgt.n	8003f38 <__ieee754_sqrt+0xc4>
 8003f32:	d113      	bne.n	8003f5c <__ieee754_sqrt+0xe8>
 8003f34:	459c      	cmp	ip, r3
 8003f36:	d811      	bhi.n	8003f5c <__ieee754_sqrt+0xe8>
 8003f38:	f1bc 0f00 	cmp.w	ip, #0
 8003f3c:	eb0c 0506 	add.w	r5, ip, r6
 8003f40:	da43      	bge.n	8003fca <__ieee754_sqrt+0x156>
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	db41      	blt.n	8003fca <__ieee754_sqrt+0x156>
 8003f46:	f100 0801 	add.w	r8, r0, #1
 8003f4a:	1a12      	subs	r2, r2, r0
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	459c      	cmp	ip, r3
 8003f50:	bf88      	it	hi
 8003f52:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003f56:	eba3 030c 	sub.w	r3, r3, ip
 8003f5a:	4431      	add	r1, r6
 8003f5c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003f60:	f1be 0e01 	subs.w	lr, lr, #1
 8003f64:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003f68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003f70:	d1db      	bne.n	8003f2a <__ieee754_sqrt+0xb6>
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d006      	beq.n	8003f84 <__ieee754_sqrt+0x110>
 8003f76:	1c48      	adds	r0, r1, #1
 8003f78:	bf0b      	itete	eq
 8003f7a:	4671      	moveq	r1, lr
 8003f7c:	3101      	addne	r1, #1
 8003f7e:	3401      	addeq	r4, #1
 8003f80:	f021 0101 	bicne.w	r1, r1, #1
 8003f84:	1063      	asrs	r3, r4, #1
 8003f86:	0849      	lsrs	r1, r1, #1
 8003f88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003f8c:	07e2      	lsls	r2, r4, #31
 8003f8e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003f92:	bf48      	it	mi
 8003f94:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003f98:	460e      	mov	r6, r1
 8003f9a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003f9e:	e782      	b.n	8003ea6 <__ieee754_sqrt+0x32>
 8003fa0:	0ada      	lsrs	r2, r3, #11
 8003fa2:	3815      	subs	r0, #21
 8003fa4:	055b      	lsls	r3, r3, #21
 8003fa6:	2a00      	cmp	r2, #0
 8003fa8:	d0fa      	beq.n	8003fa0 <__ieee754_sqrt+0x12c>
 8003faa:	02d5      	lsls	r5, r2, #11
 8003fac:	d50a      	bpl.n	8003fc4 <__ieee754_sqrt+0x150>
 8003fae:	f1c1 0420 	rsb	r4, r1, #32
 8003fb2:	fa23 f404 	lsr.w	r4, r3, r4
 8003fb6:	1e4d      	subs	r5, r1, #1
 8003fb8:	408b      	lsls	r3, r1
 8003fba:	4322      	orrs	r2, r4
 8003fbc:	1b41      	subs	r1, r0, r5
 8003fbe:	e789      	b.n	8003ed4 <__ieee754_sqrt+0x60>
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	e7f0      	b.n	8003fa6 <__ieee754_sqrt+0x132>
 8003fc4:	0052      	lsls	r2, r2, #1
 8003fc6:	3101      	adds	r1, #1
 8003fc8:	e7ef      	b.n	8003faa <__ieee754_sqrt+0x136>
 8003fca:	4680      	mov	r8, r0
 8003fcc:	e7bd      	b.n	8003f4a <__ieee754_sqrt+0xd6>
 8003fce:	bf00      	nop
 8003fd0:	7ff00000 	.word	0x7ff00000

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
