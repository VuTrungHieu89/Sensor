
BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030fc  080030fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030fc  080030fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003110  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003110  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000652b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  00026560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00027a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00028170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd2  00000000  00000000  000287d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009978  00000000  00000000  0003f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b79  00000000  00000000  00048e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca99b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000ca9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080030b8 	.word	0x080030b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080030b8 	.word	0x080030b8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_GPIO_Init+0x40>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <MX_GPIO_Init+0x40>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_GPIO_Init+0x40>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_GPIO_Init+0x40>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <MX_GPIO_Init+0x40>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_GPIO_Init+0x40>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f000 fc2f 	bl	8001040 <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 f8b1 	bl	800094e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000028 	.word	0x20000028
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <HAL_I2C_MspInit+0x70>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d123      	bne.n	8000864 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_I2C_MspInit+0x74>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_I2C_MspInit+0x74>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_I2C_MspInit+0x74>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <HAL_I2C_MspInit+0x78>)
 8000848:	f000 fa76 	bl	8000d38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_I2C_MspInit+0x74>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_I2C_MspInit+0x74>)
 8000852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000856:	61d3      	str	r3, [r2, #28]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_I2C_MspInit+0x74>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010c00 	.word	0x40010c00

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 f8f1 	bl	8000a64 <HAL_Init>

  /* USER CODE BEGIN Init */
  status = BMP180_Init();
 8000882:	f002 f961 	bl	8002b48 <BMP180_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <main+0x50>)
 800088c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f823 	bl	80008d8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  uint8_t oss = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	71fb      	strb	r3, [r7, #7]
  BMP180_ReadCalibration();
 8000896:	f002 f98d 	bl	8002bb4 <BMP180_ReadCalibration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp = BMP180_Calculate_RT();
 800089a:	f002 fae3 	bl	8002e64 <BMP180_Calculate_RT>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <main+0x54>)
 80008a2:	6013      	str	r3, [r2, #0]
	  preasure = BMP180_Calculate_RP(oss);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fb08 	bl	8002ebc <BMP180_Calculate_RP>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <main+0x58>)
 80008b0:	6013      	str	r3, [r2, #0]
	  altitude = BMP180_Calculate_Altitude(oss);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fb8f 	bl	8002fd8 <BMP180_Calculate_Altitude>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <main+0x5c>)
 80008be:	6013      	str	r3, [r2, #0]

	  HAL_Delay(50);
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f000 f931 	bl	8000b28 <HAL_Delay>
	  temp = BMP180_Calculate_RT();
 80008c6:	e7e8      	b.n	800089a <main+0x22>
 80008c8:	20000088 	.word	0x20000088
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	20000080 	.word	0x20000080
 80008d4:	20000084 	.word	0x20000084

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fbde 	bl	80030a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fd1e 	bl	8002350 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800091a:	f000 f818 	bl	800094e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f001 ff8c 	bl	8002854 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000942:	f000 f804 	bl	800094e <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	; 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000952:	b672      	cpsid	i
}
 8000954:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000956:	e7fe      	b.n	8000956 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_MspInit+0x5c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x5c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x5c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x5c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x60>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_MspInit+0x60>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 f875 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a18:	f7ff fff7 	bl	8000a0a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a1e:	490c      	ldr	r1, [pc, #48]	; (8000a50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a20:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a34:	4c09      	ldr	r4, [pc, #36]	; (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 fb0d 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff ff17 	bl	8000878 <main>
  bx lr
 8000a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	200000ac 	.word	0x200000ac

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f92b 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff ff6a 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f935 	bl	8000d1e <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f90b 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	2000008c 	.word	0x2000008c

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	2000008c 	.word	0x2000008c

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff90 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff49 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e169      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8158 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a98      	ldr	r2, [pc, #608]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a96      	ldr	r2, [pc, #600]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a94      	ldr	r2, [pc, #592]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a92      	ldr	r2, [pc, #584]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a90      	ldr	r2, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a79      	ldr	r2, [pc, #484]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80b1 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	492f      	ldr	r1, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	492c      	ldr	r1, [pc, #176]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4928      	ldr	r1, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	4922      	ldr	r1, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	491e      	ldr	r1, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4918      	ldr	r1, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x2e2>
 8000fd6:	bf00      	nop
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_GPIO_Init+0x304>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4909      	ldr	r1, [pc, #36]	; (800103c <HAL_GPIO_Init+0x304>)
 8001016:	4013      	ands	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae8e 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	; 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e12b      	b.n	80012aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fbc8 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2224      	movs	r2, #36	; 0x24
 8001070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010a4:	f001 fd1e 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a81      	ldr	r2, [pc, #516]	; (80012b4 <HAL_I2C_Init+0x274>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d807      	bhi.n	80010c4 <HAL_I2C_Init+0x84>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a80      	ldr	r2, [pc, #512]	; (80012b8 <HAL_I2C_Init+0x278>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	bf94      	ite	ls
 80010bc:	2301      	movls	r3, #1
 80010be:	2300      	movhi	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	e006      	b.n	80010d2 <HAL_I2C_Init+0x92>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4a7d      	ldr	r2, [pc, #500]	; (80012bc <HAL_I2C_Init+0x27c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	bf94      	ite	ls
 80010cc:	2301      	movls	r3, #1
 80010ce:	2300      	movhi	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0e7      	b.n	80012aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4a78      	ldr	r2, [pc, #480]	; (80012c0 <HAL_I2C_Init+0x280>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9b      	lsrs	r3, r3, #18
 80010e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <HAL_I2C_Init+0x274>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d802      	bhi.n	8001114 <HAL_I2C_Init+0xd4>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	e009      	b.n	8001128 <HAL_I2C_Init+0xe8>
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	4a69      	ldr	r2, [pc, #420]	; (80012c4 <HAL_I2C_Init+0x284>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	3301      	adds	r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	430b      	orrs	r3, r1
 800112e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800113a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	495c      	ldr	r1, [pc, #368]	; (80012b4 <HAL_I2C_Init+0x274>)
 8001144:	428b      	cmp	r3, r1
 8001146:	d819      	bhi.n	800117c <HAL_I2C_Init+0x13c>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1e59      	subs	r1, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fbb1 f3f3 	udiv	r3, r1, r3
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800115c:	400b      	ands	r3, r1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <HAL_I2C_Init+0x138>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1e59      	subs	r1, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001170:	3301      	adds	r3, #1
 8001172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001176:	e051      	b.n	800121c <HAL_I2C_Init+0x1dc>
 8001178:	2304      	movs	r3, #4
 800117a:	e04f      	b.n	800121c <HAL_I2C_Init+0x1dc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d111      	bne.n	80011a8 <HAL_I2C_Init+0x168>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1e58      	subs	r0, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	440b      	add	r3, r1
 8001192:	fbb0 f3f3 	udiv	r3, r0, r3
 8001196:	3301      	adds	r3, #1
 8001198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	e012      	b.n	80011ce <HAL_I2C_Init+0x18e>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1e58      	subs	r0, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	0099      	lsls	r1, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_I2C_Init+0x196>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e022      	b.n	800121c <HAL_I2C_Init+0x1dc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10e      	bne.n	80011fc <HAL_I2C_Init+0x1bc>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1e58      	subs	r0, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6859      	ldr	r1, [r3, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	440b      	add	r3, r1
 80011ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fa:	e00f      	b.n	800121c <HAL_I2C_Init+0x1dc>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1e58      	subs	r0, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	0099      	lsls	r1, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	6809      	ldr	r1, [r1, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800124a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6911      	ldr	r1, [r2, #16]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68d2      	ldr	r2, [r2, #12]
 8001256:	4311      	orrs	r1, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	430b      	orrs	r3, r1
 800125e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	000186a0 	.word	0x000186a0
 80012b8:	001e847f 	.word	0x001e847f
 80012bc:	003d08ff 	.word	0x003d08ff
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	10624dd3 	.word	0x10624dd3

080012c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012e2:	f7ff fc17 	bl	8000b14 <HAL_GetTick>
 80012e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	f040 80d9 	bne.w	80014a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2319      	movs	r3, #25
 80012fc:	2201      	movs	r2, #1
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <HAL_I2C_Mem_Write+0x1ec>)
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 fdef 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800130c:	2302      	movs	r3, #2
 800130e:	e0cc      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_I2C_Mem_Write+0x56>
 800131a:	2302      	movs	r3, #2
 800131c:	e0c5      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d007      	beq.n	8001344 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2221      	movs	r2, #33	; 0x21
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2240      	movs	r2, #64	; 0x40
 8001360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_I2C_Mem_Write+0x1f0>)
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001386:	88f8      	ldrh	r0, [r7, #6]
 8001388:	893a      	ldrh	r2, [r7, #8]
 800138a:	8979      	ldrh	r1, [r7, #10]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4603      	mov	r3, r0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fc26 	bl	8001be8 <I2C_RequestMemoryWrite>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d052      	beq.n	8001448 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e081      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 feb4 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d107      	bne.n	80013ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06b      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b04      	cmp	r3, #4
 800140e:	d11b      	bne.n	8001448 <HAL_I2C_Mem_Write+0x180>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001414:	2b00      	cmp	r3, #0
 8001416:	d017      	beq.n	8001448 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	3b01      	subs	r3, #1
 8001434:	b29a      	uxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1aa      	bne.n	80013a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fea7 	bl	80021a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00d      	beq.n	800147c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2b04      	cmp	r3, #4
 8001466:	d107      	bne.n	8001478 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001476:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e016      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800148a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e000      	b.n	80014aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014a8:	2302      	movs	r3, #2
  }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	00100002 	.word	0x00100002
 80014b8:	ffff0000 	.word	0xffff0000

080014bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	817b      	strh	r3, [r7, #10]
 80014ce:	460b      	mov	r3, r1
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014da:	f7ff fb1b 	bl	8000b14 <HAL_GetTick>
 80014de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	f040 8244 	bne.w	8001976 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2319      	movs	r3, #25
 80014f4:	2201      	movs	r2, #1
 80014f6:	4982      	ldr	r1, [pc, #520]	; (8001700 <HAL_I2C_Mem_Read+0x244>)
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 fcf3 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
 8001506:	e237      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_I2C_Mem_Read+0x5a>
 8001512:	2302      	movs	r3, #2
 8001514:	e230      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d007      	beq.n	800153c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2222      	movs	r2, #34	; 0x22
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800156c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a62      	ldr	r2, [pc, #392]	; (8001704 <HAL_I2C_Mem_Read+0x248>)
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800157e:	88f8      	ldrh	r0, [r7, #6]
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	8979      	ldrh	r1, [r7, #10]
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4603      	mov	r3, r0
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 fbc0 	bl	8001d14 <I2C_RequestMemoryRead>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1ec      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d113      	bne.n	80015ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e1c0      	b.n	8001950 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d11e      	bne.n	8001614 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015e6:	b672      	cpsid	i
}
 80015e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800160e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001610:	b662      	cpsie	i
}
 8001612:	e035      	b.n	8001680 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	2b02      	cmp	r3, #2
 800161a:	d11e      	bne.n	800165a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800162a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001654:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001656:	b662      	cpsie	i
}
 8001658:	e012      	b.n	8001680 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001668:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001680:	e166      	b.n	8001950 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	2b03      	cmp	r3, #3
 8001688:	f200 811f 	bhi.w	80018ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	2b01      	cmp	r3, #1
 8001692:	d123      	bne.n	80016dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fdcd 	bl	8002238 <I2C_WaitOnRXNEFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e167      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016da:	e139      	b.n	8001950 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d152      	bne.n	800178a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ea:	2200      	movs	r2, #0
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <HAL_I2C_Mem_Read+0x24c>)
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fbf8 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e13c      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
 80016fe:	bf00      	nop
 8001700:	00100002 	.word	0x00100002
 8001704:	ffff0000 	.word	0xffff0000
 8001708:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001752:	b662      	cpsie	i
}
 8001754:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001788:	e0e2      	b.n	8001950 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001790:	2200      	movs	r2, #0
 8001792:	497b      	ldr	r1, [pc, #492]	; (8001980 <HAL_I2C_Mem_Read+0x4c4>)
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fba5 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0e9      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_I2C_Mem_Read+0x4c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_I2C_Mem_Read+0x4cc>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0a1a      	lsrs	r2, r3, #8
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00da      	lsls	r2, r3, #3
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	3b01      	subs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d118      	bne.n	8001842 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f043 0220 	orr.w	r2, r3, #32
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001832:	b662      	cpsie	i
}
 8001834:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e09a      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b04      	cmp	r3, #4
 800184e:	d1d9      	bne.n	8001804 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001892:	b662      	cpsie	i
}
 8001894:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018c8:	e042      	b.n	8001950 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fcb2 	bl	8002238 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e04c      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d118      	bne.n	8001950 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f ae94 	bne.w	8001682 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001976:	2302      	movs	r3, #2
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	00010004 	.word	0x00010004
 8001984:	20000000 	.word	0x20000000
 8001988:	14f8b589 	.word	0x14f8b589

0800198c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	460b      	mov	r3, r1
 800199a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff f8ba 	bl	8000b14 <HAL_GetTick>
 80019a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	f040 8111 	bne.w	8001bd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	4988      	ldr	r1, [pc, #544]	; (8001be0 <HAL_I2C_IsDeviceReady+0x254>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fa90 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	e104      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2C_IsDeviceReady+0x50>
 80019d8:	2302      	movs	r3, #2
 80019da:	e0fd      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d007      	beq.n	8001a02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2224      	movs	r2, #36	; 0x24
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a70      	ldr	r2, [pc, #448]	; (8001be4 <HAL_I2C_IsDeviceReady+0x258>)
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 fa4e 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5c:	d103      	bne.n	8001a66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0b6      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f84b 	bl	8000b14 <HAL_GetTick>
 8001a7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001aae:	e025      	b.n	8001afc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab0:	f7ff f830 	bl	8000b14 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d302      	bcc.n	8001ac6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	22a0      	movs	r2, #160	; 0xa0
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2ba0      	cmp	r3, #160	; 0xa0
 8001b06:	d005      	beq.n	8001b14 <HAL_I2C_IsDeviceReady+0x188>
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <HAL_I2C_IsDeviceReady+0x188>
 8001b0e:	7dbb      	ldrb	r3, [r7, #22]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0cd      	beq.n	8001ab0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d129      	bne.n	8001b7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	4921      	ldr	r1, [pc, #132]	; (8001be0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9c2 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e036      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e02c      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2319      	movs	r3, #25
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	490f      	ldr	r1, [pc, #60]	; (8001be0 <HAL_I2C_IsDeviceReady+0x254>)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f99e 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e012      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f4ff af32 	bcc.w	8001a26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	00100002 	.word	0x00100002
 8001be4:	ffff0000 	.word	0xffff0000

08001be8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	813b      	strh	r3, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f960 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d103      	bne.n	8001c42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e05f      	b.n	8001d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	492d      	ldr	r1, [pc, #180]	; (8001d10 <I2C_RequestMemoryWrite+0x128>)
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f9bb 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e04c      	b.n	8001d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa46 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d107      	bne.n	8001caa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e02b      	b.n	8001d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb4:	893b      	ldrh	r3, [r7, #8]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	e021      	b.n	8001d04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cc0:	893b      	ldrh	r3, [r7, #8]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd0:	6a39      	ldr	r1, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa20 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e005      	b.n	8001d06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cfa:	893b      	ldrh	r3, [r7, #8]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	00010002 	.word	0x00010002

08001d14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	460b      	mov	r3, r1
 8001d28:	813b      	strh	r3, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f8c2 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d74:	d103      	bne.n	8001d7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0aa      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d82:	897b      	ldrh	r3, [r7, #10]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	6a3a      	ldr	r2, [r7, #32]
 8001d96:	4952      	ldr	r1, [pc, #328]	; (8001ee0 <I2C_RequestMemoryRead+0x1cc>)
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f91d 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e097      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	6a39      	ldr	r1, [r7, #32]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f9a8 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d107      	bne.n	8001de6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e076      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	e021      	b.n	8001e40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dfc:	893b      	ldrh	r3, [r7, #8]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	6a39      	ldr	r1, [r7, #32]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f982 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d107      	bne.n	8001e32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e050      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e36:	893b      	ldrh	r3, [r7, #8]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	6a39      	ldr	r1, [r7, #32]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f967 	bl	8002118 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00d      	beq.n	8001e6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e035      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f82b 	bl	8001ee4 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d103      	bne.n	8001eac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e013      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	6a3a      	ldr	r2, [r7, #32]
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <I2C_RequestMemoryRead+0x1cc>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f886 	bl	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010002 	.word	0x00010002

08001ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef4:	e048      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d044      	beq.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7fe fe09 	bl	8000b14 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d139      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	e00c      	b.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d116      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e023      	b.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	e00c      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d093      	beq.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe6:	e071      	b.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d123      	bne.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e067      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d041      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe fd64 	bl	8000b14 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d136      	bne.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10c      	bne.n	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4013      	ands	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e00b      	b.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e021      	b.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10c      	bne.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e00b      	b.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f af6d 	bne.w	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002124:	e034      	b.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f8e3 	bl	80022f2 <I2C_IsAcknowledgeFailed>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e034      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d028      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213e:	f7fe fce9 	bl	8000b14 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d016      	beq.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d1c3      	bne.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b4:	e034      	b.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f89b 	bl	80022f2 <I2C_IsAcknowledgeFailed>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e034      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d028      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe fca1 	bl	8000b14 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11d      	bne.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d016      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e007      	b.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d1c3      	bne.n	80021b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002244:	e049      	b.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d119      	bne.n	8002288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e030      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fc44 	bl	8000b14 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d016      	beq.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d1ae      	bne.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d11b      	bne.n	8002342 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002312:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0204 	orr.w	r2, r3, #4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
	...

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e272      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b04      	cmp	r3, #4
 800237a:	d00c      	beq.n	8002396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800237c:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d10b      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06c      	beq.n	800247c <HAL_RCC_OscConfig+0x12c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d168      	bne.n	800247c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e24c      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x76>
 80023b8:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e02e      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x98>
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0xbc>
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fb72 	bl	8000b14 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fb6e 	bl	8000b14 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e200      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xe4>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fb5e 	bl	8000b14 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fb5a 	bl	8000b14 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1ec      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x10c>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c0      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4939      	ldr	r1, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fb13 	bl	8000b14 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fb0f 	bl	8000b14 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a1      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4927      	ldr	r1, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe faf2 	bl	8000b14 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe faee 	bl	8000b14 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e180      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d03a      	beq.n	80025d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe fad2 	bl	8000b14 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe face 	bl	8000b14 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e160      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 faba 	bl	8002b0c <RCC_Delay>
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fab8 	bl	8000b14 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a6:	e00f      	b.n	80025c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe fab4 	bl	8000b14 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e146      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	42420000 	.word	0x42420000
 80025c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e9      	bne.n	80025a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a6 	beq.w	800272e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a87      	ldr	r2, [pc, #540]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fa75 	bl	8000b14 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fa71 	bl	8000b14 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e103      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x4c8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x312>
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e02d      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x334>
 800266a:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x356>
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a5d      	ldr	r2, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fa25 	bl	8000b14 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fa21 	bl	8000b14 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0b1      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCC_OscConfig+0x37e>
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa0f 	bl	8000b14 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fa0b 	bl	8000b14 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e09b      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8087 	beq.w	8002846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d061      	beq.n	8002808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d146      	bne.n	80027da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe f9df 	bl	8000b14 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe f9db 	bl	8000b14 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e06d      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d108      	bne.n	8002794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4921      	ldr	r1, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a19      	ldr	r1, [r3, #32]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	430b      	orrs	r3, r1
 80027a6:	491b      	ldr	r1, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe f9af 	bl	8000b14 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe f9ab 	bl	8000b14 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x46a>
 80027d8:	e035      	b.n	8002846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe f998 	bl	8000b14 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe f994 	bl	8000b14 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e026      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x498>
 8002806:	e01e      	b.n	8002846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e019      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x500>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0d0      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	4965      	ldr	r1, [pc, #404]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0b8      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d040      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e073      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06b      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe f8e6 	bl	8000b14 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe f8e2 	bl	8000b14 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e053      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d210      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4922      	ldr	r1, [pc, #136]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e2:	f000 f821 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1cc>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1d0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f844 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080030d0 	.word	0x080030d0
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_GetSysClockFreq+0x94>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x30>
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x36>
 8002a56:	e027      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5a:	613b      	str	r3, [r7, #16]
      break;
 8002a5c:	e027      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0c9b      	lsrs	r3, r3, #18
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_RCC_GetSysClockFreq+0x94>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	0c5b      	lsrs	r3, r3, #17
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	fb03 f202 	mul.w	r2, r3, r2
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e004      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aaa:	613b      	str	r3, [r7, #16]
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	693b      	ldr	r3, [r7, #16]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	007a1200 	.word	0x007a1200
 8002ac4:	080030e8 	.word	0x080030e8
 8002ac8:	080030f8 	.word	0x080030f8
 8002acc:	003d0900 	.word	0x003d0900

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff2 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	080030e0 	.word	0x080030e0

08002b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <RCC_Delay+0x34>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_Delay+0x38>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a5b      	lsrs	r3, r3, #9
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b28:	bf00      	nop
  }
  while (Delay --);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <RCC_Delay+0x1c>
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000000 	.word	0x20000000
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <BMP180_Init>:
#include "BMP180.h"


BMP180_Calibration_t BMP180_Calibration;

uint8_t BMP180_Init() {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8002b4c:	f7fd fe06 	bl	800075c <MX_GPIO_Init>
	MX_I2C1_Init();
 8002b50:	f7fd fe26 	bl	80007a0 <MX_I2C1_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP180_ADDR, 1, HAL_MAX_DELAY))
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	2201      	movs	r2, #1
 8002b5a:	21ee      	movs	r1, #238	; 0xee
 8002b5c:	4806      	ldr	r0, [pc, #24]	; (8002b78 <BMP180_Init+0x30>)
 8002b5e:	f7fe ff15 	bl	800198c <HAL_I2C_IsDeviceReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <BMP180_Init+0x24>
		return 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e002      	b.n	8002b72 <BMP180_Init+0x2a>
	BMP180_reset();
 8002b6c:	f000 f806 	bl	8002b7c <BMP180_reset>
	return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000028 	.word	0x20000028

08002b7c <BMP180_reset>:

void BMP180_reset(){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af04      	add	r7, sp, #16
	uint8_t reset = (uint8_t)0xb6;
 8002b82:	23b6      	movs	r3, #182	; 0xb6
 8002b84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT, &reset, 1, HAL_MAX_DELAY);
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2301      	movs	r3, #1
 8002b96:	22e0      	movs	r2, #224	; 0xe0
 8002b98:	21ee      	movs	r1, #238	; 0xee
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <BMP180_reset+0x34>)
 8002b9c:	f7fe fb94 	bl	80012c8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002ba0:	200a      	movs	r0, #10
 8002ba2:	f7fd ffc1 	bl	8000b28 <HAL_Delay>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000028 	.word	0x20000028

08002bb4 <BMP180_ReadCalibration>:

void BMP180_ReadCalibration(){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af04      	add	r7, sp, #16
	uint8_t buffer[BMP180_PROM_DATA_LEN] = {0};
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	821a      	strh	r2, [r3, #16]
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e015      	b.n	8002c00 <BMP180_ReadCalibration+0x4c>
		HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_PROM_START_ADDR + i, I2C_MEMADD_SIZE_8BIT, &buffer[i], 1, HAL_MAX_DELAY);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	33aa      	adds	r3, #170	; 0xaa
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	1d3a      	adds	r2, r7, #4
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	9202      	str	r2, [sp, #8]
 8002be8:	2201      	movs	r2, #1
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	21ee      	movs	r1, #238	; 0xee
 8002bf4:	4839      	ldr	r0, [pc, #228]	; (8002cdc <BMP180_ReadCalibration+0x128>)
 8002bf6:	f7fe fc61 	bl	80014bc <HAL_I2C_Mem_Read>
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b15      	cmp	r3, #21
 8002c04:	dde6      	ble.n	8002bd4 <BMP180_ReadCalibration+0x20>
	}


	BMP180_Calibration.AC1 = (buffer[0]  << 8) | buffer[1];
 8002c06:	793b      	ldrb	r3, [r7, #4]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	797b      	ldrb	r3, [r7, #5]
 8002c0e:	b21b      	sxth	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c16:	801a      	strh	r2, [r3, #0]
	BMP180_Calibration.AC2 = (buffer[2]  << 8) | buffer[3];
 8002c18:	79bb      	ldrb	r3, [r7, #6]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	b21a      	sxth	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c28:	805a      	strh	r2, [r3, #2]
	BMP180_Calibration.AC3 = (buffer[4]  << 8) | buffer[5];
 8002c2a:	7a3b      	ldrb	r3, [r7, #8]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	7a7b      	ldrb	r3, [r7, #9]
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c3a:	809a      	strh	r2, [r3, #4]
	BMP180_Calibration.AC4 = (buffer[6]  << 8) | buffer[7];
 8002c3c:	7abb      	ldrb	r3, [r7, #10]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b21a      	sxth	r2, r3
 8002c42:	7afb      	ldrb	r3, [r7, #11]
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c4e:	80da      	strh	r2, [r3, #6]
	BMP180_Calibration.AC5 = (buffer[8]  << 8) | buffer[9];
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	7b7b      	ldrb	r3, [r7, #13]
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c62:	811a      	strh	r2, [r3, #8]
	BMP180_Calibration.AC6 = (buffer[10] << 8) | buffer[11];
 8002c64:	7bbb      	ldrb	r3, [r7, #14]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	b21a      	sxth	r2, r3
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c76:	815a      	strh	r2, [r3, #10]
	BMP180_Calibration.B1  = (buffer[12] << 8) | buffer[13];
 8002c78:	7c3b      	ldrb	r3, [r7, #16]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	7c7b      	ldrb	r3, [r7, #17]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b21a      	sxth	r2, r3
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c88:	819a      	strh	r2, [r3, #12]
	BMP180_Calibration.B2  = (buffer[14] << 8) | buffer[15];
 8002c8a:	7cbb      	ldrb	r3, [r7, #18]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b21a      	sxth	r2, r3
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002c9a:	81da      	strh	r2, [r3, #14]
	BMP180_Calibration.MB  = (buffer[16] << 8) | buffer[17];
 8002c9c:	7d3b      	ldrb	r3, [r7, #20]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	b21a      	sxth	r2, r3
 8002ca2:	7d7b      	ldrb	r3, [r7, #21]
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002cac:	821a      	strh	r2, [r3, #16]
	BMP180_Calibration.MC  = (buffer[18] << 8) | buffer[19];
 8002cae:	7dbb      	ldrb	r3, [r7, #22]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b21a      	sxth	r2, r3
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002cbe:	825a      	strh	r2, [r3, #18]
	BMP180_Calibration.MD  = (buffer[20] << 8) | buffer[21];
 8002cc0:	7e3b      	ldrb	r3, [r7, #24]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	7e7b      	ldrb	r3, [r7, #25]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <BMP180_ReadCalibration+0x12c>)
 8002cd0:	829a      	strh	r2, [r3, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000028 	.word	0x20000028
 8002ce0:	20000090 	.word	0x20000090

08002ce4 <BMP180_Read_UT>:

uint32_t BMP180_Read_UT(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af04      	add	r7, sp, #16
	uint32_t UT = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
	uint8_t T_measure = BMP180_T_MEASURE;
 8002cee:	232e      	movs	r3, #46	; 0x2e
 8002cf0:	70fb      	strb	r3, [r7, #3]
	uint8_t MSB = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	70bb      	strb	r3, [r7, #2]
	uint8_t LSB = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	707b      	strb	r3, [r7, #1]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &T_measure, 1, HAL_MAX_DELAY);
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	2301      	movs	r3, #1
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	1cfb      	adds	r3, r7, #3
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	22f4      	movs	r2, #244	; 0xf4
 8002d0c:	21ee      	movs	r1, #238	; 0xee
 8002d0e:	4815      	ldr	r0, [pc, #84]	; (8002d64 <BMP180_Read_UT+0x80>)
 8002d10:	f7fe fada 	bl	80012c8 <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 8002d14:	2006      	movs	r0, #6
 8002d16:	f7fd ff07 	bl	8000b28 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	1cbb      	adds	r3, r7, #2
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	22f6      	movs	r2, #246	; 0xf6
 8002d2c:	21ee      	movs	r1, #238	; 0xee
 8002d2e:	480d      	ldr	r0, [pc, #52]	; (8002d64 <BMP180_Read_UT+0x80>)
 8002d30:	f7fe fbc4 	bl	80014bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	1c7b      	adds	r3, r7, #1
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	22f7      	movs	r2, #247	; 0xf7
 8002d46:	21ee      	movs	r1, #238	; 0xee
 8002d48:	4806      	ldr	r0, [pc, #24]	; (8002d64 <BMP180_Read_UT+0x80>)
 8002d4a:	f7fe fbb7 	bl	80014bc <HAL_I2C_Mem_Read>
	UT = (MSB << 8) + LSB;
 8002d4e:	78bb      	ldrb	r3, [r7, #2]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	787a      	ldrb	r2, [r7, #1]
 8002d54:	4413      	add	r3, r2
 8002d56:	607b      	str	r3, [r7, #4]

	return UT;
 8002d58:	687b      	ldr	r3, [r7, #4]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000028 	.word	0x20000028

08002d68 <BMP180_Read_UP>:

uint32_t BMP180_Read_UP(uint8_t oss){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af04      	add	r7, sp, #16
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
	uint32_t UP;
	uint8_t cmd,delay;
	uint8_t MSB = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73bb      	strb	r3, [r7, #14]
	uint8_t LSB = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	737b      	strb	r3, [r7, #13]
	uint8_t XLSB = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	733b      	strb	r3, [r7, #12]

	switch(oss) {
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d81f      	bhi.n	8002dc4 <BMP180_Read_UP+0x5c>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <BMP180_Read_UP+0x24>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002d9d 	.word	0x08002d9d
 8002d90:	08002da7 	.word	0x08002da7
 8002d94:	08002db1 	.word	0x08002db1
 8002d98:	08002dbb 	.word	0x08002dbb
	case 0:
		cmd = BMP180_P0_MEASURE;
 8002d9c:	2334      	movs	r3, #52	; 0x34
 8002d9e:	73fb      	strb	r3, [r7, #15]
		delay   = 6;
 8002da0:	2306      	movs	r3, #6
 8002da2:	75fb      	strb	r3, [r7, #23]
		break;
 8002da4:	e00e      	b.n	8002dc4 <BMP180_Read_UP+0x5c>
	case 1:
		cmd = BMP180_P1_MEASURE;
 8002da6:	2374      	movs	r3, #116	; 0x74
 8002da8:	73fb      	strb	r3, [r7, #15]
		delay   = 9;
 8002daa:	2309      	movs	r3, #9
 8002dac:	75fb      	strb	r3, [r7, #23]
		break;
 8002dae:	e009      	b.n	8002dc4 <BMP180_Read_UP+0x5c>
	case 2:
		cmd = BMP180_P2_MEASURE;
 8002db0:	23b4      	movs	r3, #180	; 0xb4
 8002db2:	73fb      	strb	r3, [r7, #15]
		delay   = 15;
 8002db4:	230f      	movs	r3, #15
 8002db6:	75fb      	strb	r3, [r7, #23]
		break;
 8002db8:	e004      	b.n	8002dc4 <BMP180_Read_UP+0x5c>
	case 3:
		cmd = BMP180_P3_MEASURE;
 8002dba:	23f4      	movs	r3, #244	; 0xf4
 8002dbc:	73fb      	strb	r3, [r7, #15]
		delay   = 27;
 8002dbe:	231b      	movs	r3, #27
 8002dc0:	75fb      	strb	r3, [r7, #23]
		break;
 8002dc2:	bf00      	nop
	}

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	f107 030f 	add.w	r3, r7, #15
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	22f4      	movs	r2, #244	; 0xf4
 8002dd8:	21ee      	movs	r1, #238	; 0xee
 8002dda:	4821      	ldr	r0, [pc, #132]	; (8002e60 <BMP180_Read_UP+0xf8>)
 8002ddc:	f7fe fa74 	bl	80012c8 <HAL_I2C_Mem_Write>
	HAL_Delay(delay);
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fea0 	bl	8000b28 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	2301      	movs	r3, #1
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	f107 030e 	add.w	r3, r7, #14
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	22f6      	movs	r2, #246	; 0xf6
 8002dfc:	21ee      	movs	r1, #238	; 0xee
 8002dfe:	4818      	ldr	r0, [pc, #96]	; (8002e60 <BMP180_Read_UP+0xf8>)
 8002e00:	f7fe fb5c 	bl	80014bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f107 030d 	add.w	r3, r7, #13
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2301      	movs	r3, #1
 8002e16:	22f7      	movs	r2, #247	; 0xf7
 8002e18:	21ee      	movs	r1, #238	; 0xee
 8002e1a:	4811      	ldr	r0, [pc, #68]	; (8002e60 <BMP180_Read_UP+0xf8>)
 8002e1c:	f7fe fb4e 	bl	80014bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_XLSB_REG, I2C_MEMADD_SIZE_8BIT, &XLSB, 1, HAL_MAX_DELAY);
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2301      	movs	r3, #1
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	22f8      	movs	r2, #248	; 0xf8
 8002e34:	21ee      	movs	r1, #238	; 0xee
 8002e36:	480a      	ldr	r0, [pc, #40]	; (8002e60 <BMP180_Read_UP+0xf8>)
 8002e38:	f7fe fb40 	bl	80014bc <HAL_I2C_Mem_Read>
	UP = ((MSB << 16) + (LSB << 8) + XLSB) >> (8 - oss);
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	041a      	lsls	r2, r3, #16
 8002e40:	7b7b      	ldrb	r3, [r7, #13]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	4413      	add	r3, r2
 8002e46:	7b3a      	ldrb	r2, [r7, #12]
 8002e48:	441a      	add	r2, r3
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f1c3 0308 	rsb	r3, r3, #8
 8002e50:	fa42 f303 	asr.w	r3, r2, r3
 8002e54:	613b      	str	r3, [r7, #16]

	return UP;
 8002e56:	693b      	ldr	r3, [r7, #16]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000028 	.word	0x20000028

08002e64 <BMP180_Calculate_RT>:

uint32_t BMP180_Calculate_RT(){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
	uint32_t UT = BMP180_Read_UT();
 8002e6a:	f7ff ff3b 	bl	8002ce4 <BMP180_Read_UT>
 8002e6e:	6078      	str	r0, [r7, #4]
	BMP180_Calibration.B5  = (((int32_t)UT - (int32_t)BMP180_Calibration.AC6) * (int32_t)BMP180_Calibration.AC5) >> 15;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e74:	8952      	ldrh	r2, [r2, #10]
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e7a:	8912      	ldrh	r2, [r2, #8]
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	13db      	asrs	r3, r3, #15
 8002e82:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e84:	6193      	str	r3, [r2, #24]
	BMP180_Calibration.B5 += ((int32_t)BMP180_Calibration.MC << 11) / (BMP180_Calibration.B5 + BMP180_Calibration.MD);
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e8c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002e90:	02d9      	lsls	r1, r3, #11
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002e98:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8002e9c:	4403      	add	r3, r0
 8002e9e:	fb91 f3f3 	sdiv	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002ea6:	6193      	str	r3, [r2, #24]

	return (BMP180_Calibration.B5 + 8) >> 4;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <BMP180_Calculate_RT+0x54>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	3308      	adds	r3, #8
 8002eae:	111b      	asrs	r3, r3, #4
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000090 	.word	0x20000090

08002ebc <BMP180_Calculate_RP>:

uint32_t BMP180_Calculate_RP(uint8_t oss){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
	uint32_t UP = BMP180_Read_UP(oss);
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff4d 	bl	8002d68 <BMP180_Read_UP>
 8002ece:	6238      	str	r0, [r7, #32]
	int32_t B3,B6,X3,p;
	uint32_t B4,B7;

	B6 = BMP180_Calibration.B5 - 4000;
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8002ed8:	61fb      	str	r3, [r7, #28]
	X3 = ((BMP180_Calibration.B2 * ((B6 * B6) >> 12)) >> 11) + ((BMP180_Calibration.AC2 * B6) >> 11);
 8002eda:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002edc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fb03 f303 	mul.w	r3, r3, r3
 8002ee8:	131b      	asrs	r3, r3, #12
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	12da      	asrs	r2, r3, #11
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	12db      	asrs	r3, r3, #11
 8002f00:	4413      	add	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
	B3 = (((((int32_t)BMP180_Calibration.AC1) * 4 + X3) << oss) + 2) >> 2;
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0a:	009a      	lsls	r2, r3, #2
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	441a      	add	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	3302      	adds	r3, #2
 8002f18:	109b      	asrs	r3, r3, #2
 8002f1a:	617b      	str	r3, [r7, #20]
	X3 = (((BMP180_Calibration.AC3 * B6) >> 13) + ((BMP180_Calibration.B1 * ((B6 * B6) >> 12)) >> 16) + 2) >> 2;
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f22:	461a      	mov	r2, r3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	135a      	asrs	r2, r3, #13
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002f2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f32:	4619      	mov	r1, r3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	fb03 f303 	mul.w	r3, r3, r3
 8002f3a:	131b      	asrs	r3, r3, #12
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	141b      	asrs	r3, r3, #16
 8002f42:	4413      	add	r3, r2
 8002f44:	3302      	adds	r3, #2
 8002f46:	109b      	asrs	r3, r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
	B4 = (BMP180_Calibration.AC4 * (uint32_t)(X3 + 32768)) >> 15;
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <BMP180_Calculate_RP+0x110>)
 8002f4c:	88db      	ldrh	r3, [r3, #6]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	0bdb      	lsrs	r3, r3, #15
 8002f5c:	613b      	str	r3, [r7, #16]
	B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	79fa      	ldrb	r2, [r7, #7]
 8002f66:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002f6a:	fa41 f202 	asr.w	r2, r1, r2
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	60fb      	str	r3, [r7, #12]
	if (B7 < 0x80000000) p = (B7 << 1) / B4; else p = (B7 / B4) << 1;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db06      	blt.n	8002f88 <BMP180_Calculate_RP+0xcc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	005a      	lsls	r2, r3, #1
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e005      	b.n	8002f94 <BMP180_Calculate_RP+0xd8>
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
	p += ((((p >> 8) * (p >> 8) * BMP180_PARAM_MG) >> 16) + ((BMP180_PARAM_MH * p) >> 16) + BMP180_PARAM_MI) >> 4;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	121b      	asrs	r3, r3, #8
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	1212      	asrs	r2, r2, #8
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	f640 32de 	movw	r2, #3038	; 0xbde
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	141a      	asrs	r2, r3, #16
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <BMP180_Calculate_RP+0x114>)
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	141b      	asrs	r3, r3, #16
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8002fba:	111b      	asrs	r3, r3, #4
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	4413      	add	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24

	return p;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000090 	.word	0x20000090
 8002fd0:	ffffe343 	.word	0xffffe343
 8002fd4:	00000000 	.word	0x00000000

08002fd8 <BMP180_Calculate_Altitude>:

uint32_t BMP180_Calculate_Altitude(uint8_t oss){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	uint32_t hPa = BMP180_Calculate_RP(oss) * 0.01;
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff69 	bl	8002ebc <BMP180_Calculate_RP>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fb1b 	bl	8000628 <__aeabi_ui2d>
 8002ff2:	a317      	add	r3, pc, #92	; (adr r3, 8003050 <BMP180_Calculate_Altitude+0x78>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd f8aa 	bl	8000150 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fb8a 	bl	800071c <__aeabi_d2uiz>
 8003008:	4603      	mov	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]
	return (((745 * (11390 - (hPa / 10))) / 256 + 46597) * (11390 - (hPa / 10))) / 65536 - 966;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <BMP180_Calculate_Altitude+0x80>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	f46f 723a 	mvn.w	r2, #744	; 0x2e8
 800301a:	fb03 f202 	mul.w	r2, r3, r2
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <BMP180_Calculate_Altitude+0x84>)
 8003020:	4413      	add	r3, r2
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 8003028:	3305      	adds	r3, #5
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	490a      	ldr	r1, [pc, #40]	; (8003058 <BMP180_Calculate_Altitude+0x80>)
 800302e:	fba1 1202 	umull	r1, r2, r1, r2
 8003032:	08d2      	lsrs	r2, r2, #3
 8003034:	f5c2 5231 	rsb	r2, r2, #11328	; 0x2c40
 8003038:	323e      	adds	r2, #62	; 0x3e
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f2a3 33c6 	subw	r3, r3, #966	; 0x3c6
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	f3af 8000 	nop.w
 8003050:	47ae147b 	.word	0x47ae147b
 8003054:	3f847ae1 	.word	0x3f847ae1
 8003058:	cccccccd 	.word	0xcccccccd
 800305c:	00817aae 	.word	0x00817aae

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	2600      	movs	r6, #0
 8003064:	4d0c      	ldr	r5, [pc, #48]	; (8003098 <__libc_init_array+0x38>)
 8003066:	4c0d      	ldr	r4, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	f000 f822 	bl	80030b8 <_init>
 8003074:	2600      	movs	r6, #0
 8003076:	4d0a      	ldr	r5, [pc, #40]	; (80030a0 <__libc_init_array+0x40>)
 8003078:	4c0a      	ldr	r4, [pc, #40]	; (80030a4 <__libc_init_array+0x44>)
 800307a:	1b64      	subs	r4, r4, r5
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	f855 3b04 	ldr.w	r3, [r5], #4
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	080030fc 	.word	0x080030fc
 800309c:	080030fc 	.word	0x080030fc
 80030a0:	080030fc 	.word	0x080030fc
 80030a4:	08003100 	.word	0x08003100

080030a8 <memset>:
 80030a8:	4603      	mov	r3, r0
 80030aa:	4402      	add	r2, r0
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d100      	bne.n	80030b2 <memset+0xa>
 80030b0:	4770      	bx	lr
 80030b2:	f803 1b01 	strb.w	r1, [r3], #1
 80030b6:	e7f9      	b.n	80030ac <memset+0x4>

080030b8 <_init>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	bf00      	nop
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr

080030c4 <_fini>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	bf00      	nop
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr
